services: {
  #floating_point_control: {}
  message: {
    destinations: {
      STDOUT: {
        type: cout
        threshold: INFO
        categories: {
          default: { limit: -1 }
        }
      }
    }
  }
  scheduler: {
    Rethrow: ['OtherArt','StdException','Unknown','BadAlloc',
              'BadExceptionType','ProductNotFound','DictionaryNotFound',
              'InsertFailure','Configuration','LogicError','UnimplementedFeature',
              'InvalidReference','NullPointerError','NoProductSpecified','EventTimeout',
              'DataCorruption','ScheduleExecutionFailure','EventProcessorFailure',
              'FileInPathError','FileOpenError','FileReadError','FatalRootError',
              'MismatchedInputFiles','ProductDoesNotSupportViews',
              'ProductDoesNotSupportPtr','NotFound']
    # IgnoreCompletely: []
    wantSummary: true
    # wantTracer: false
    # fileMode: ""
    # handleEmptyRuns: true
    # handleEmptySubRuns: true
    # enableSigInt: true
    # unloadRootSigHandler: false
    # resetRootErrHandler: true
  }
  #Timing: {}
  #SimpleMemoryCheck: {}
  #user: {}
}

source: {
  module_type: RootInput
  fileNames: [
    "m3.root"
  ]
  secondaryFileNames: [
    {
      a: "m3.root"
      b: [
        "m2.root"
      ]
    }
  ]
}

outputs: {
  out1: {
    module_type: RootOutput
    fileName: "m4.root"
    #fastCloning: false
  }
}

physics: {
  analyzers: {
    a1: {
      module_type: IntTestAnalyzer
      input_label: m1a
      expected_value: 1
    }
    a2: {
      module_type: IntTestAnalyzer
      input_label: m2a
      expected_value: 2
    }
    a3: {
      module_type: IntTestAnalyzer
      input_label: m1a
      expected_value: 1
    }
  }
  e1: [ a2, a1, a3, out1 ]
  end_paths: [ e1 ]
}

process_name: COPYBOTH
