diff --git a/CMakeLists.txt b/CMakeLists.txt
index fe16f1a..c6ea7b6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,86 +1,230 @@
-# ======================================================================
-#  art main build file
-#
-#  cd .../path/to/build/directory
-#  source .../path/to/art/ups/setup_for_development
-#  cmake [-DCMAKE_INSTALL_PREFIX=/install/path]
-#        -DCMAKE_BUILD_TYPE=$CETPKG_TYPE
-#        $CETPKG_SOURCE
-#  make
-#  make test
-#  make install
-#  make package (builds distribution tarfile)
-# ======================================================================
-
+# - Art top level build
+# Project setup
+# Require 2.8.12 to:
+# - get new interface export features
+# - target ALIAS
+cmake_minimum_required(VERSION 2.8.12)
+
+# - Policies - set all here as may influence project() call
+# Always id Clang as Clang, defer use of AppleClang id
+if(POLICY CMP0025)
+  cmake_policy(SET CMP0025 OLD)
+endif()
 
-# use cmake 2.8 or later
-cmake_minimum_required (VERSION 2.8)
+# Always use rpath on Mac, as it's supported in out min version, and
+# CMake 3 and higher prefer it
+if(POLICY CMP0042)
+  cmake_policy(SET CMP0042 NEW)
+endif()
 
 project(art)
 
-# cetbuildtools contains our cmake modules
-SET ( CETBUILDTOOLS_VERSION $ENV{CETBUILDTOOLS_VERSION} )
-IF (NOT CETBUILDTOOLS_VERSION)
-    MESSAGE (FATAL_ERROR "ERROR: setup cetbuildtools to get the cmake modules")
-ENDIF()
-set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/Modules 
-                      $ENV{CETBUILDTOOLS_DIR}/Modules 
-		      ${CMAKE_MODULE_PATH})
-
-include(CetCMakeEnv)
-cet_cmake_env()
-
-cet_set_compiler_flags(DIAGS VIGILANT
-  WERROR
-  NO_UNDEFINED
-  EXTRA_FLAGS -pedantic
+#-----------------------------------------------------------------------
+# API and ABI versioning
+# NB - this only demonstrates that it *can* be done
+# More info on this at:
+# - http://public.kitware.com/Bug/view.php?id=4383
+# - http://techbase.kde.org/Policies/Binary_Compatibility_Issues_With_C++
+#
+# The following numbers are *arbitrary* for now. Remember that
+# VERSION and SOVERSION do not neccessarily evolve in sync
+# - Hard code version plus splits (derive one from t'other later)
+set(art_VERSION "1.11.3")
+set(art_VERSION_MAJOR 1)
+set(art_VERSION_MINOR 11)
+set(art_VERSION_PATCH 3)
+
+set(art_SOVERSION "1.0.0")
+
+# - We can also use a postfix to distinguish the debug lib from
+# others if different build modes are ABI incompatible (can be
+# extended to other modes)
+set(art_DEBUG_POSTFIX "d")
+
+#-----------------------------------------------------------------------
+# Standard and Custom CMake Modules
+#
+list(INSERT CMAKE_MODULE_PATH 0 ${CMAKE_CURRENT_LIST_DIR}/Modules)
+
+# - Standard Support
+include(CMakePackageConfigHelpers)
+include(GNUInstallDirs)
+include(CheckCXXCompilerFlag)
+
+# - Local Customs
+include(artInternalTools)
+include(artTools)
+include(ArtDictionary)
+
+# - Build product locations
+# The variables CMAKE_{RUNTIME,LIBRARY,ARCHIVE}_OUTPUT_DIRECTORY can
+# be used to specify where executables, dynamic and static libraries
+# are output. They initialize the {RUNTIME,LIBRARY,ARCHIVE}_OUTPUT_DIRECTORY
+# properties of targets added via add_{executable,target}, so can
+# targets can override if need be.
+#
+# - Assume for now that GNUInstallDirs provides relative (to
+#   CMAKE_INSTALL_PREFIX) paths, and reflect this layout in the
+#   output directories. This should be o.k. even on DLL platforms
+#   as CMake should output these to the RUNTIME directory.
+#
+set(BASE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/BuildProducts")
+set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${BASE_OUTPUT_DIRECTORY}/${CMAKE_INSTALL_BINDIR}")
+set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${BASE_OUTPUT_DIRECTORY}/${CMAKE_INSTALL_LIBDIR}")
+set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${BASE_OUTPUT_DIRECTORY}/${CMAKE_INSTALL_LIBDIR}")
+
+# Implement SSE2 as option?
+#cet_have_qual(sse2 SSE2)
+#if ( SSE2 )
+#  cet_add_compiler_flags(CXX -msse2 -ftree-vectorizer-verbose=2)
+#endif()
+
+# Use an imported target for checkClassVersion to give transparency
+# between art build and client usage.
+# This *is* a little messy, but eases the writing of the scripts for
+# full portability between the art build and clients.
+# We set it up *here* because we need to append the library output
+# directory to checkClassVersion's search path.
+add_executable(art::checkClassVersion IMPORTED)
+set_target_properties(art::checkClassVersion PROPERTIES IMPORTED_LOCATION
+  ${CMAKE_CURRENT_SOURCE_DIR}/tools/checkClassVersion
   )
-cet_have_qual(sse2 SSE2)
-if ( SSE2 )
-  cet_add_compiler_flags(CXX -msse2 -ftree-vectorizer-verbose=2)
-endif()
+checkclassversion_append_path(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
 
-cet_report_compiler_flags()
+#-----------------------------------------------------------------------
+# Required Third Party Packages
+# - Core library(ies), which will supply us with Boost
+# For now use FNALCore, easy switch out to multi modules later if needed
+find_package(FNALCore 0.1.0 REQUIRED)
 
-# these are minimum required versions, not the actual product versions
-find_ups_product( cppunit v1_12_1a )
-find_ups_product( gccxml v0_9_20140718 )
-find_ups_product( clhep v2_2_0_3 )
-find_ups_product( cetbuildtools v4_01_00 )
-find_ups_product( cetpkgsupport v1_07_00 )
-find_ups_product( cetlib v1_08_00 )
-find_ups_product( fhiclcpp v3_00_00 )
-find_ups_product( messagefacility v1_11_12 )
-find_ups_product( sqlite v3_08_05_00 )
-find_ups_root( v5_34_20 )
-find_ups_product( tbb v4_1 )
-find_ups_boost(v1_53_0)
+# We need a minimum version of Boost, but rely on FNALCore to supply this
+# to use. So check our found FNALCore provides a suitable version
+set(art_MIN_BOOST_VERSION "1.53.0")
 
+if(FNALCore_BOOST_VERSION VERSION_LESS art_MIN_BOOST_VERSION)
+  message(FATAL_ERROR "Located version of FNALCore compiled against Boost ${FNALCore_BOOST_VERSION}\nart requires Boost >= ${art_MIN_BOOST_VERSION}")
+endif()
 
-# define CLHEP
-cet_find_library( CLHEP  NAMES CLHEP   PATHS ENV CLHEP_LIB_DIR NO_DEFAULT_PATH )
+# - Ensure we can refind Boost and extra components we need
+find_package(Boost ${art_MIN_BOOST_VERSION}
+  REQUIRED
+    date_time
+    unit_test_framework
+    program_options
+  )
 
-# define cppunit
-cet_find_library( CPPUNIT NAMES cppunit   PATHS ENV CPPUNIT_LIB   NO_DEFAULT_PATH )
+# FNALCore provides an interface to the C++ standard, so use its flags
+# Could also check for compiler/stdlib compatiblity.
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FNALCore_CXX_FLAGS}")
+
+# - Needs review and implementation where required (though should
+# be off-the-shelf FindX for most)
+# Other issues - could ROOT supply some of these, e.g. sqlite3
+# gccxml, tbb?
+# Need to implement
+
+# Is supplied by CMake, but no version checking, so need to check
+# Also, this is only used "behind the scenes" via ROOT's genreflex script
+# never directly, so strictly speaking it's ROOT's responsibility
+# to handle this for us.
+find_package(GCCXML 0.9.0 REQUIRED)
+
+# CLHEP supplies a CMake project config...
+find_package(CLHEP 2.2.0.3 REQUIRED)
+
+# SQLite3 - NB FNALCore also depends on and exposes this...
+find_package(SQLite3 3.8.5 REQUIRED)
+
+# Cross check with what ROOT supply - ideally would like component
+# based checks.
+find_package(ROOT 5.34.20 REQUIRED
+  Core
+  Cint
+  Cintex
+  Hist
+  Matrix
+  Reflex
+  RIO
+  Thread
+  Tree
+  )
+# - Must have Python support - it doesn't work as a COMPONENT
+# argument to find_package because Root's component lookup only
+# works for libraries.
+if(NOT ROOT_python_FOUND)
+  message(FATAL_ERROR "art requires ROOT with Python support")
+endif()
 
-# macros for art_dictionary and simple_plugin
-include(ArtDictionary)
-include(BuildPlugins)
+# Need to implement
+find_package(TBB 4.1.0 REQUIRED)
+
+#-----------------------------------------------------------------------
+# Set up paths for all subbuilds
+#
+include_directories(${PROJECT_SOURCE_DIR})
+include_directories(${PROJECT_BINARY_DIR})
 
 # tools (first)
 add_subdirectory(tools)
 
 # source
-add_subdirectory (art)
+add_subdirectory(art)
 
 # testing
-add_subdirectory(test)
+option(art_ENABLE_TESTING "Built unit tests for art" OFF)
+if(art_ENABLE_TESTING)
+  # cppunit *only* needed for testing
+  enable_testing()
+  find_package(CppUnit 1.12.1 REQUIRED)
+  add_subdirectory(test)
+endif()
+
+#-----------------------------------------------------------------------
+# Documentation
+#
+option(art_BUILD_DOCS "Build documentation for Art" ON)
+if(art_BUILD_DOCS)
+  add_subdirectory(doc)
+endif()
+
+#-----------------------------------------------------------------------
+# Install support files - usage from install tree only...
+#
+configure_package_config_file(
+  Modules/artConfig.cmake.in
+  ${CMAKE_CURRENT_BINARY_DIR}/artConfig.cmake
+  INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/art-${art_VERSION}
+  PATH_VARS
+    CMAKE_INSTALL_INCLUDEDIR
+    CMAKE_INSTALL_LIBDIR
+    CMAKE_INSTALL_BINDIR
+  )
+
+write_basic_package_version_file(
+  ${CMAKE_CURRENT_BINARY_DIR}/artConfigVersion.cmake
+  VERSION ${art_VERSION}
+  COMPATIBILITY AnyNewerVersion
+  )
 
-# ups - table and config files
-add_subdirectory(ups)
+install(FILES
+  ${CMAKE_CURRENT_BINARY_DIR}/artConfig.cmake
+  ${CMAKE_CURRENT_BINARY_DIR}/artConfigVersion.cmake
+  Modules/ArtDictionary.cmake
+  Modules/BuildDictionary.cmake
+  Modules/CheckClassVersion.cmake
+  Modules/artTools.cmake
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/art-${art_VERSION}
+  COMPONENT Development
+  )
+
+install(EXPORT ArtLibraries
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/art-${art_VERSION}
+  NAMESPACE art::
+  COMPONENT Development
+  )
 
-# CMake modules
-add_subdirectory(Modules)
+#-----------------------------------------------------------------------
+# Package for Source and Binary
+#
+include(ArtCPack)
 
-# packaging utility
-include(UseCPack)
diff --git a/Modules/ArtCPack.cmake b/Modules/ArtCPack.cmake
new file mode 100644
index 0000000..2741462
--- /dev/null
+++ b/Modules/ArtCPack.cmake
@@ -0,0 +1,26 @@
+# - Cpackaging file for Art
+
+#-----------------------------------------------------------------------
+# Generic settings
+#
+# - Package name is project name...
+# - Versioning
+set(CPACK_PACKAGE_VERSION_MAJOR ${${PROJECT_NAME}_VERSION_MAJOR})
+set(CPACK_PACKAGE_VERSION_MINOR ${${PROJECT_NAME}_VERSION_MINOR})
+set(CPACK_PACKAGE_VERSION_PATCH ${${PROJECT_NAME}_VERSION_PATCH})
+
+#-----------------------------------------------------------------------
+# Specifics for Source Package
+#
+set(CPACK_SOURCE_GENERATOR "TBZ2;ZIP")
+set(CPACK_SOURCE_IGNORE_FILES
+  "${PROJECT_BINARY_DIR}"
+  "/\\\\.git"
+  "\\\\.swp$"
+  )
+
+#-----------------------------------------------------------------------
+# Must allways include Cpack module **last**
+#
+include(CPack)
+
diff --git a/Modules/ArtDictionary.cmake b/Modules/ArtDictionary.cmake
index 25aefde..ad1cba1 100644
--- a/Modules/ArtDictionary.cmake
+++ b/Modules/ArtDictionary.cmake
@@ -1,5 +1,5 @@
 ########################################################################
-# art_dictionary
+# art_add_dictionary
 #
 # Wrapper around cetbuildtools' build_dictionary featuring the addition
 # of commonly required libraries to the dictionary library link list,
@@ -33,64 +33,49 @@ include(CMakeParseArguments)
 include(CheckClassVersion)
 
 function(art_dictionary)
+  message(WARNING "art_dictionary is deprecated, use art_add_dictionary")
+  art_add_dictionary(${ARGN})
+endfunction()
+
+function(art_add_dictionary)
   cmake_parse_arguments(AD
     "UPDATE_IN_PLACE;DICT_FUNCTIONS;USE_PRODUCT_NAME"
     "DICT_NAME_VAR"
     "DICTIONARY_LIBRARIES;COMPILE_FLAGS"
     ${ARGN}
     )
-  if(ART_PERSISTENCY_COMMON)
-    # Using art as a product rather than building art itself.
-    set(AD_DICTIONARY_LIBRARIES
-      ${ART_PERSISTENCY_COMMON} ${ART_UTILITIES} ${CETLIB} ${AD_DICTIONARY_LIBRARIES}
-      )
-  else()
-    set(AD_DICTIONARY_LIBRARIES
-      art_Persistency_Common art_Utilities ${CETLIB} ${AD_DICTIONARY_LIBRARIES}
-      )
-  endif()
-  if (AD_DICT_FUNCTIONS)
-    set(want_build_dictionary_version v3_13_00)
-    if (COMMAND check_ups_version)
-      check_ups_version(cetbuildtools $ENV{CETBUILDTOOLS_VERSION} ${want_build_dictionary_version}
-        PRODUCT_MATCHES_VAR understands_DICT_FUNCTIONS)
-    endif()
-    if (understands_DICT_FUNCTIONS)
-      set(extra_args DICT_FUNCTIONS)
-    else()
-      message(WARNING "art_dictionary: DICT_FUNCTIONS not forwarded to build_dictionary command too old to understand it (require ${want_build_dictionary_version}, found $ENV{CETBUILDTOOLS_VERSION}).")
-    endif()
-  endif()
-  if (AD_COMPILE_FLAGS)
-    # available since at least cetbuildtools v3_00_00
-    set(dict_flags COMPILE_FLAGS ${AD_COMPILE_FLAGS})
-    #message(STATUS "art_dictionary: Passing ${dict_flags} to build_dictionary")
-  endif()
-  if (AD_USE_PRODUCT_NAME)
-    set(want_build_dictionary_version v4_03_00)
-    if (COMMAND check_ups_version)
-      check_ups_version(cetbuildtools $ENV{CETBUILDTOOLS_VERSION} ${want_build_dictionary_version}
-        PRODUCT_MATCHES_VAR understands_USE_PRODUCT_NAME)
-    endif()
-    if (understands_USE_PRODUCT_NAME)
-      set(extra_args USE_PRODUCT_NAME)
-    else()
-      message(WARNING "art_dictionary: USE_PRODUCT_NAME not forwarded to build_dictionary command too old to understand it (require ${want_build_dictionary_version}, found $ENV{CETBUILDTOOLS_VERSION}).")
-    endif()
-  endif()
+
+  # Setup common libs required for linking
+  # We can use target names consistently across build and client because
+  # of import/export of targets
+  set(AD_DICTIONARY_LIBRARIES
+    ${art_IMPORT_NAMESPACE}art_Persistency_Common
+    ${art_IMPORT_NAMESPACE}art_Utilities
+    FNALCore::FNALCore
+    ${AD_DICTIONARY_LIBRARIES}
+    )
+
   build_dictionary(DICT_NAME_VAR dictname
     DICTIONARY_LIBRARIES ${AD_DICTIONARY_LIBRARIES}
     ${AD_UNPARSED_ARGUMENTS}
-    ${extra_args} ${dict_flags})
+    ${extra_args})
+
+  # "returns"
+  # We *probably* don't care about this as it only
+  # appears to be relevant when installing source
+  # code, and we almost certainly don't want to do that
+  # for generated code.
   if (cet_generated_code) # Bubble up to top scope.
     set(cet_generated_code ${cet_generated_code} PARENT_SCOPE)
   endif()
+
   if (AD_DICT_NAME_VAR)
     set (${AD_DICT_NAME_VAR} ${dictname} PARENT_SCOPE)
   endif()
+
   if(AD_UPDATE_IN_PLACE)
     set(AD_CCV_ARGS ${AD_CCV_ARGS} "UPDATE_IN_PLACE" ${AD_UPDATE_IN_PLACE})
   endif()
-  #message(STATUS "Calling check_class_version with args ${AD_ARGS}")
+
   check_class_version(${AD_LIBRARIES} UPDATE_IN_PLACE ${AD_CCV_ARGS})
 endfunction()
diff --git a/Modules/ArtMake.cmake b/Modules/ArtMake.cmake
index 53f5b5f..c315d83 100644
--- a/Modules/ArtMake.cmake
+++ b/Modules/ArtMake.cmake
@@ -124,14 +124,16 @@ macro( _art_simple_plugin file type liblist )
   #message(STATUS "_art_simple_plugin: have ${type} plugin ${plugbase}")
   #message(STATUS "_art_simple_plugin: AM_BASENAME_ONLY is ${AM_BASENAME_ONLY}")
   if (AM_USE_PRODUCT_NAME)
-    set(upn USE_PRODUCT_NAME)
+    set( plugbase ${product}_${plugbase} )
+    _debug_message("Configured to build plugin ${plugbase} of type ${type} with USE_PRODUCT_NAME.")
+    #message(STATUS "_art_simple_plugin debug:  calculated plugin base name is now ${plugbase} for ${product}")
   endif()
   if( AM_BASENAME_ONLY )
     _debug_message("Configured to build plugin ${plugbase} of type ${type} with BASENAME_ONLY.")
-    simple_plugin( ${plugbase} ${type} ${liblist} ${upn} BASENAME_ONLY )
+    simple_plugin( ${plugbase} ${type} ${liblist} BASENAME_ONLY )
   else()
     _debug_message("Configured to build plugin ${plugbase} of type ${type}.")
-    simple_plugin( ${plugbase} ${type} ${liblist} ${upn} )
+    simple_plugin( ${plugbase} ${type} ${liblist} )
   endif()
 endmacro( _art_simple_plugin )
 
diff --git a/Modules/BuildDictionary.cmake b/Modules/BuildDictionary.cmake
new file mode 100644
index 0000000..9b59004
--- /dev/null
+++ b/Modules/BuildDictionary.cmake
@@ -0,0 +1,218 @@
+# macro for building ROOT dictionaries
+#
+# USAGE:
+# build_dictionary( [<dictionary_name>]
+#                   [COMPILE_FLAGS <flags>]
+#                   [DICT_NAME_VAR <var>]
+#                   [DICTIONARY_LIBRARIES <library list>]
+#                   [NO_INSTALL]
+#                   [DICT_FUNCTIONS])
+#
+# * <dictionary_name> defaults to a name based on the current source
+# code subdirectory.
+#
+# * ${REFLEX} is always appended to the library list (even if it is
+# empty).
+#
+# * Specify NO_INSTALL when building a dictionary for tests.
+#
+# * The default behavior is to generate a dictionary for data only. Use
+# the DICT_FUNCTIONS option to reactivate the generation of dictionary
+# entries for functions.
+#
+# * If DICT_NAME_VAR is specified, <var> will be set to contain the
+# dictionary name.
+#
+# * Any other macros or functions in this file are for internal use
+# only.
+#
+########################################################################
+include(CMakeParseArguments)
+
+# define flags for genreflex
+set(GENREFLEX_FLAGS
+  --deep
+  --iocomments
+  --fail_on_warnings
+  --capabilities=classes_ids.cc
+  --gccxmlopt=--gccxml-compiler
+  --gccxmlopt=${CMAKE_CXX_COMPILER}
+  -D_REENTRANT
+  -DGNU_SOURCE
+  -DGNU_GCC
+  -DPROJECT_NAME="${PROJECT_NAME}"
+  -DPROJECT_VERSION="${${PROJECT_NAME}_VERSION}"
+  -D__STRICT_ANSI__
+  )
+
+#-----------------------------------------------------------------------
+# macro _set_dictionary_name()
+#
+macro(_set_dictionary_name)
+  if(PACKAGE_TOP_DIRECTORY)
+    string(REGEX REPLACE "^${PACKAGE_TOP_DIRECTORY}/(.*)" "\\1" CURRENT_SUBDIR "${CMAKE_CURRENT_SOURCE_DIR}")
+  else()
+    string(REGEX REPLACE "^${CMAKE_SOURCE_DIR}/(.*)" "\\1" CURRENT_SUBDIR "${CMAKE_CURRENT_SOURCE_DIR}")
+  endif()
+
+  string(REGEX REPLACE "/" "_" dictname "${CURRENT_SUBDIR}" )
+endmacro()
+
+#-----------------------------------------------------------------------
+# function _generate_dictionary()
+#
+function(_generate_dictionary)
+  cmake_parse_arguments(GD
+    "DICT_FUNCTIONS"
+    "NAME"
+    "DICTIONARY_LIBRARIES"
+    ${ARGN}
+    )
+  set(generate_dictionary_usage "_generate_dictionary( [DICT_FUNCTIONS] [DICTIONARY_LIBRARIES lib1 lib2 ... NAME [dictionary_name] )")
+
+  # Error on unknown arguments
+  if(NOT ${GD_NAME})
+    _set_dictionary_name()
+  else()
+    set(dictname ${GD_NAME})
+    list(LENGTH GD_UNPARSED_ARGUMENTS n_bad_args)
+    if(n_bad_args GREATER 1)
+      list(REMOVE_AT GD_UNPARSED_ARGUMENTS 0)
+      message("_GENERATE_DICTIONARY: unwanted extra arguments: ${GD_UNPARSED_ARGUMENTS}")
+      message(SEND_ERROR ${generate_dictionary_usage})
+    endif()
+  endif()
+
+  # Configure genreflex command line args
+  if(NOT GD_DICT_FUNCTIONS AND NOT CET_DICT_FUNCTIONS)
+    set(GENREFLEX_FLAGS ${GENREFLEX_FLAGS} --dataonly)
+  endif()
+
+  # Local Include dirs
+  get_directory_property(genpath INCLUDE_DIRECTORIES)
+  foreach(inc ${genpath})
+    set(GENREFLEX_INCLUDES ${GENREFLEX_INCLUDES} -I ${inc})
+  endforeach()
+
+  # Local compile defs
+  get_directory_property(compile_defs COMPILE_DEFINITIONS)
+  foreach(def ${compile_defs})
+    set(GENREFLEX_FLAGS ${GENREFLEX_FLAGS} -D${def})
+  endforeach()
+
+  # Include dirs and compile defs specific to requested link libs
+  foreach(extralib ${GD_DICTIONARY_LIBRARIES})
+    if(TARGET ${extralib})
+      # Yeah, these are knarly - note the following:
+      # - They are well formed, and taken from
+      # http://www.cmake.org/cmake/help/v3.0/manual/cmake-generator-expressions.7.html
+      # - The heavy wrapping is needed because we don't want to
+      #   pass a blank '-I' or '-D' to genreflex - it really doesn't
+      #   like empty -Ds
+      # - A '\t' is used to join lists to prevent escaping when
+      #  the expression is expanded in the custom_command
+      #
+      # - Include dirs
+      set(GENREFLEX_INCLUDES ${GENREFLEX_INCLUDES} "$<$<BOOL:$<TARGET_PROPERTY:${extralib},INCLUDE_DIRECTORIES>>:-I$<JOIN:$<TARGET_PROPERTY:${extralib},INCLUDE_DIRECTORIES>,\t-I>>")
+
+      # - Compile defs
+      set(GENREFLEX_FLAGS ${GENREFLEX_FLAGS} "$<$<BOOL:$<TARGET_PROPERTY:${extralib},COMPILE_DEFINITIONS>>:-D$<JOIN:$<TARGET_PROPERTY:${extralib},COMPILE_DEFINITIONS>,\t-D>>")
+    endif()
+  endforeach()
+
+  if(${GENREFLEX_CLEANUP} MATCHES "TRUE")
+    add_custom_command(
+      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${dictname}_dict.cpp
+             ${CMAKE_CURRENT_BINARY_DIR}/${dictname}_map.cpp
+      COMMAND ${ROOT_genreflex_CMD}
+              ${CMAKE_CURRENT_SOURCE_DIR}/classes.h
+          	  -s ${CMAKE_CURRENT_SOURCE_DIR}/classes_def.xml
+		          -I ${CMAKE_SOURCE_DIR}
+		          -I ${CMAKE_CURRENT_SOURCE_DIR}
+		          ${GENREFLEX_INCLUDES}
+              ${GENREFLEX_FLAGS}
+        	    -o ${dictname}_dict.cpp || {rm -f ${dictname}_dict.cpp\; /bin/false\;}
+      COMMAND ${CMAKE_COMMAND} -E copy classes_ids.cc ${dictname}_map.cpp
+      COMMAND ${CMAKE_COMMAND} -E remove -f classes_ids.cc
+      IMPLICIT_DEPENDS CXX ${CMAKE_CURRENT_SOURCE_DIR}/classes.h
+      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/classes_def.xml
+      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+      )
+  else()
+    add_custom_command(
+      OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${dictname}_dict.cpp
+             ${CMAKE_CURRENT_BINARY_DIR}/${dictname}_map.cpp
+      COMMAND ${ROOT_genreflex_CMD}
+              ${CMAKE_CURRENT_SOURCE_DIR}/classes.h
+           	  -s ${CMAKE_CURRENT_SOURCE_DIR}/classes_def.xml
+		          -I ${CMAKE_SOURCE_DIR}
+		          -I ${CMAKE_CURRENT_SOURCE_DIR}
+		          ${GENREFLEX_INCLUDES}
+              ${GENREFLEX_FLAGS}
+        	    -o ${dictname}_dict.cpp
+      COMMAND ${CMAKE_COMMAND} -E copy classes_ids.cc ${dictname}_map.cpp
+      COMMAND ${CMAKE_COMMAND} -E remove -f classes_ids.cc
+      IMPLICIT_DEPENDS CXX ${CMAKE_CURRENT_SOURCE_DIR}/classes.h
+      DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/classes_def.xml
+      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+      )
+  endif()
+
+  set_source_files_properties(
+    ${CMAKE_CURRENT_BINARY_DIR}/${dictname}_dict.cpp
+    ${CMAKE_CURRENT_BINARY_DIR}/${dictname}_map.cpp
+    PROPERTIES GENERATED 1
+    )
+endfunction()
+
+#-----------------------------------------------------------------------
+# function build_dictionary()
+#
+function(build_dictionary)
+  set(build_dictionary_usage "USAGE: build_dictionary( [dictionary_name] [DICTIONARY_LIBRARIES <library list>] [COMPILE_FLAGS <flags>] [DICT_NAME_VAR <var>] [NO_INSTALL] )")
+
+  cmake_parse_arguments(BD
+    "NOINSTALL;NO_INSTALL;DICT_FUNCTIONS"
+    "DICT_NAME_VAR"
+    "DICTIONARY_LIBRARIES;COMPILE_FLAGS"
+    ${ARGN}
+    )
+
+  # Handle obsolete and unknown args
+  if(BD_NOINSTALL OR BD_NO_INSTALL)
+    message(SEND_ERROR "build_dictionary no longer performs any install operation")
+  endif()
+
+  if(BD_UNPARSED_ARGUMENTS)
+    list(LENGTH BD_UNPARSED_ARGUMENTS dlen)
+    if(dlen GREATER 1 )
+	    message("BUILD_DICTIONARY: Too many arguments. ${ARGV}")
+	    message(SEND_ERROR  ${build_dictionary_usage})
+    endif()
+    list(GET BD_UNPARSED_ARGUMENTS 0 dictname)
+  else()
+    _set_dictionary_name()
+  endif()
+
+  if(BD_DICT_NAME_VAR)
+    set(${BD_DICT_NAME_VAR} ${dictname} PARENT_SCOPE)
+  endif()
+
+  if(BD_DICTIONARY_LIBRARIES)
+    set(dictionary_liblist ${BD_DICTIONARY_LIBRARIES})
+  endif()
+
+  list(APPEND dictionary_liblist ${ROOT_Core_LIBRARY} ${ROOT_Reflex_LIBRARY})
+  _generate_dictionary(DICTIONARY_LIBRARIES ${dictionary_liblist} NAME ${dictname})
+
+  add_library(${dictname}_dict SHARED ${CMAKE_CURRENT_BINARY_DIR}/${dictname}_dict.cpp )
+  add_library(${dictname}_map  SHARED ${CMAKE_CURRENT_BINARY_DIR}/${dictname}_map.cpp )
+
+  if(BD_COMPILE_FLAGS)
+    set_target_properties(${dictname}_dict ${dictname}_map
+      PROPERTIES COMPILE_FLAGS ${BD_COMPILE_FLAGS})
+  endif()
+  target_link_libraries(${dictname}_dict ${dictionary_liblist})
+  target_link_libraries(${dictname}_map  ${dictionary_liblist})
+  add_dependencies(${dictname}_map ${dictname}_dict)
+endfunction()
diff --git a/Modules/BuildPlugins.cmake b/Modules/BuildPlugins.cmake
index 529de98..0e6f51a 100644
--- a/Modules/BuildPlugins.cmake
+++ b/Modules/BuildPlugins.cmake
@@ -9,7 +9,6 @@
 #                [USE_BOOST_UNIT]
 #                [ALLOW_UNDERSCORES]
 #                [BASENAME_ONLY]
-#                [USE_PRODUCT_NAME]
 #                [NO_INSTALL]
 #   )
 #
diff --git a/Modules/CetRegexEscape.cmake b/Modules/CetRegexEscape.cmake
new file mode 100644
index 0000000..ef2af1a
--- /dev/null
+++ b/Modules/CetRegexEscape.cmake
@@ -0,0 +1,42 @@
+########################################################################
+# cet_regex_escape(<val> <var> [<num>])
+#
+#   Escape the provided string to prevent interpretation by the CMake
+#   regex engine.
+#
+# The result of escaping characters which would be interpreted by
+# CMake's regex engine is passed through cet_armor_string if <num> is
+# specified and non-zero.
+#
+########################################################################
+# cet_armor_string(<val> <var> <num>)
+#
+#    Armor the instances of "\" in the string aginst being passed to a
+#    macro (and therefore being interpolated).
+#
+# The <num> argument indicates the expected interpolation level for the
+# resulting string (0 is a NOP). Every time the string is expected to be
+# passed to a macro, increase <num> to ensure that "\" are correctly
+# handled. This is not necessary for a function.
+#
+########################################################################
+
+function(cet_regex_escape val var)
+  string(REGEX REPLACE "(\\.|\\||\\^|\\$|\\*|\\(|\\)|\\[|\\]|\\+)" "\\\\\\1" val "${val}")
+  string(REGEX REPLACE "/+" "/" val "${val}")
+  if (ARGN)
+    list(GET ARGN 0 count)
+  endif()
+  if (count)
+    cet_armor_string("${val}" val ${count})
+  endif()
+  set(${var} "${val}" PARENT_SCOPE)
+endfunction()
+
+function(cet_armor_string val var count)
+  while (count GREATER 0) # Extra escapes for passing to macros.
+    string(REPLACE "\\" "\\\\" val "${val}")
+    math(EXPR count "${count} - 1")
+  endwhile()
+  set(${var} "${val}" PARENT_SCOPE)
+endfunction()
diff --git a/Modules/CetTest.cmake b/Modules/CetTest.cmake
new file mode 100644
index 0000000..1d64914
--- /dev/null
+++ b/Modules/CetTest.cmake
@@ -0,0 +1,353 @@
+########################################################################
+# cet_test: specify tests in a concise and transparent way (see also
+#           cet_test_env() and cet_test_assertion(), below).
+#
+# Usage: cet_test(target [<options>] [<args>] [<data-files>])
+#
+####################################
+# Options:
+#
+# HANDBUILT
+#   Do not build the target -- it will be provided. This option is
+#    mutually exclusive with the PREBUILT option.
+#
+# PREBUILT
+#   Do not build the target -- pick it up from the source dir (eg scripts).
+#    This option is mutually exclusive with the HANDBUILT option.
+#
+# NO_AUTO
+#   Do not add the target to the auto test list.
+#
+# USE_BOOST_UNIT
+#   This test uses the Boost Unit Test Framework.
+#
+# INSTALL_BIN
+#   Install this test's script / exec in the product's binary directory
+#   (ignored for HANDBUILT).
+#
+# INSTALL_EXAMPLE
+#   Install this test and all its data files into the examples area of the
+#    product.
+#
+# INSTALL_SOURCE
+#   Install this test's source in the source area of the product.
+#
+####################################
+# Args
+#
+# CONFIGURATIONS
+#
+#   Configurations (Debug, etc, etc) under which the test shall be executed.
+#
+# DATAFILES
+#   Input and/or references files to be copied to the test area in the
+#    build tree for use by the test. The DATAFILES keyword is optional provided
+#    the placement of the files in the argument list is unambiguous.
+#
+# DEPENDENCIES
+#   List of top-level dependencies to consider for a PREBUILT
+#    target. Top-level implies a target (not file) created with ADD_EXECUTABLE,
+#    ADD_LIBRARY or ADD_CUSTOM_TARGET.
+#
+# LIBRARIES
+#   Extra libraries with which to link this target.
+#
+# OPTIONAL_GROUPS
+#   Assign this test to one or more named optional groups. If the CMake
+#    list variable CET_TEST_GROUPS is set (e.g. with -D on the CMake
+#    command line) and there is overlap between the two lists, execute
+#    the test. The CET_TEST_GROUPS cache variable may additionally
+#    contain the optional values ALL or NONE.
+#
+# REF
+#   The standard output of the test will be captured and compared
+#    against the specified reference file. It is an error to specify
+#    this argument and either the PASS_REGULAR_EXPRESSION or
+#    FAIL_REGULAR_EXPRESSION test properties to the TEST_PROPERTIES
+#    argument. As for the above-mentioned properties, when speciifed
+#    this is the sole arbiter of test success -- the exit code of the
+#    test executable is ignored. Note that the specified file is read at
+#    CMake processing time, so CMake must be re-run (preferably via
+#    buildtool) in order to update the test when the file is changed.
+#
+# SOURCES
+#   Sources to use to build the target (default is ${target}.cc).
+#
+# TEST_ARGS
+#   Any arguments to the test to be run.
+#
+# TEST_EXEC
+#   The exec to run (if not the target). The HANDBUILT option must
+#    be specified in conjunction with this option.
+#
+# TEST_PROPERTIES
+#   Properties to be added to the test. See documentation of the cmake
+#    command, "set_tests_properties."
+#
+####################################
+# Cache variables
+#
+# CET_TEST_GROUPS
+#   Test group names specified using the OPTIONAL_GROUPS list option are
+#    compared against this list to determine whether to configure the
+#    test. Default value is the special value "NONE," meaning no
+#    optional tests are to be configured. Optionally CET_TEST_GROUPS may
+#    contain the special value "ALL." Specify multiple values separated
+#    by ";" (escape or protect with quotes) or "," See explanation of
+#    the OPTIONAL_GROUPS variable above for more details.
+#
+# CET_DEFINED_TEST_GROUPS
+#  Any test group names CMake sees will be added to this list.
+#
+########################################################################
+# cet_test_env: set environment for all tests here specified.
+#
+# Usage: cet_test_env([<options] [<env>])
+#
+####################################
+# Options:
+#
+# CLEAR
+#   Clear the global test environment (ie anything previously set with
+#    cet_test_env()) before setting <env>.
+#
+####################################
+# Notes:
+#
+# * <env> may be omitted. If so and the CLEAR option is not specified,
+#   then cet_test_env() is a NOP.
+#
+# * If cet_test_env() is called in a directory to set the environment
+#   for tests then that will be propagated to tests defined in
+#   subdirectories unless include(CetTest) or cet_test_env(CLEAR ...) is
+#   invoked in that directory.
+#
+########################################################################
+# cet_test_assertion: require assertion failure on given condition
+#
+# Usage: cet_test_assertion(CONDITION TARGET...)
+#
+####################################
+# Notes:
+#
+# * CONDITION should be a CMake regex which should have any escaped
+#   items doubly-escaped due to being passed as a string argument
+#   (e.g. "\\\\(" for a literal open-parenthesis, "\\\\." for a literal
+#   period).
+#
+# * TARGET...: the name(s) of the test target(s) as specified to
+#   cet_test() or add_test() -- require at least one.
+#
+########################################################################
+
+# - Include once to avoid nuking environment...
+if(__CET_TEST_ISLOADED__)
+  return()
+endif()
+set(__CET_TEST_ISLOADED__ TRUE)
+
+# Need argument parser.
+include(CMakeParseArguments)
+# May need to escape a string to avoid misinterpretation as regex
+include(CetRegexEscape)
+
+# If Boost has been specified but the library hasn't, load the library.
+IF(NOT Boost_UNIT_TEST_FRAMEWORK_LIBRARY)
+  message(FATAL_ERROR "No Boost unit test library found")
+ENDIF()
+
+SET(CET_TEST_GROUPS "NONE"
+  CACHE STRING "List of optional test groups to be configured."
+  )
+
+
+STRING(TOUPPER "${CET_TEST_GROUPS}" CET_TEST_GROUPS_UC)
+
+SET(CET_TEST_ENV ""
+  CACHE INTERNAL "Environment to add to every test"
+  FORCE
+  )
+
+FUNCTION(_update_defined_test_groups)
+  IF(ARGC)
+    SET(TMP_LIST ${CET_DEFINED_TEST_GROUPS})
+    LIST(APPEND TMP_LIST ${ARGN})
+    LIST(REMOVE_DUPLICATES TMP_LIST)
+    SET(CET_DEFINED_TEST_GROUPS ${TMP_LIST}
+      CACHE STRING "List of defined test groups."
+      FORCE
+      )
+  ENDIF()
+ENDFUNCTION()
+
+FUNCTION(_check_want_test CET_OPTIONAL_GROUPS CET_WANT_TEST)
+  IF(NOT CET_OPTIONAL_GROUPS)
+    SET(${CET_WANT_TEST} YES PARENT_SCOPE)
+    RETURN() # Short-circuit.
+  ENDIF()
+  SET (${CET_WANT_TEST} NO PARENT_SCOPE)
+  LIST(FIND CET_TEST_GROUPS_UC ALL WANT_ALL)
+  LIST(FIND CET_TEST_GROUPS_UC NONE WANT_NONE)
+  IF(WANT_ALL GREATER -1)
+    SET (${CET_WANT_TEST} YES PARENT_SCOPE)
+    RETURN() # Short-circuit.
+  ELSEIF(WANT_NONE GREATER -1)
+    RETURN() # Short-circuit.
+  ELSE()
+    FOREACH(item IN LISTS CET_OPTIONAL_GROUPS)
+      STRING(TOUPPER "${item}" item_uc)
+      LIST(FIND CET_TEST_GROUPS_UC ${item_uc} FOUND_ITEM)
+      IF(FOUND_ITEM GREATER -1)
+        SET (${CET_WANT_TEST} YES PARENT_SCOPE)
+        RETURN() # Short-circuit.
+      ENDIF()
+    ENDFOREACH()
+  ENDIF()
+ENDFUNCTION()
+
+####################################
+# Main macro definitions.
+MACRO(cet_test_env)
+  CMAKE_PARSE_ARGUMENTS(CET_TEST
+    "CLEAR"
+    ""
+    ""
+    ${ARGN}
+    )
+  IF(CET_TEST_CLEAR)
+    SET(CET_TEST_ENV "")
+  ENDIF()
+  LIST(APPEND CET_TEST_ENV ${CET_TEST_UNPARSED_ARGUMENTS})
+ENDMACRO()
+
+FUNCTION(cet_test CET_TARGET)
+  # Parse arguments
+  IF(${CET_TARGET} MATCHES .*/.*)
+    MESSAGE(FATAL_ERROR "${CET_TARGET} shuld not be a path. Use a simple "
+      "target name with the HANDBUILT and TEST_EXEC options instead.")
+  ENDIF()
+  CMAKE_PARSE_ARGUMENTS (CET
+    "HANDBUILT;PREBUILT;NO_AUTO;USE_BOOST_UNIT;INSTALL_BIN;INSTALL_EXAMPLE;INSTALL_SOURCE"
+    "REF;TEST_EXEC"
+    "CONFIGURATIONS;DATAFILES;DEPENDENCIES;LIBRARIES;OPTIONAL_GROUPS;SOURCES;TEST_ARGS;TEST_PROPERTIES"
+    ${ARGN}
+    )
+  # Set up to handle a per-test work directory for parallel testing.
+  SET(CET_TEST_WORKDIR "${CMAKE_CURRENT_BINARY_DIR}/${CET_TARGET}.d")
+  file(MAKE_DIRECTORY "${CET_TEST_WORKDIR}")
+  IF(CET_TEST_EXEC)
+    IF(NOT CET_HANDBUILT)
+      MESSAGE(FATAL_ERROR "cet_test: target ${CET_TARGET} cannot specify "
+        "TEST_EXEC without HANDBUILT")
+    ENDIF()
+  ELSE()
+    SET(CET_TEST_EXEC ${CET_TARGET})
+  ENDIF()
+  # Assume any remaining arguments are data files.
+  IF(CET_UNPARSED_ARGUMENTS)
+    SET(CET_DATAFILES ${CET_DATAFILES} ${CET_UNPARSED_ARGUMENTS})
+  ENDIF()
+  if (DEFINED CET_DATAFILES)
+    list(REMOVE_DUPLICATES CET_DATAFILES)
+  endif()
+  IF(CET_HANDBUILT AND CET_PREBUILT)
+    # CET_HANDBUILT and CET_PREBUILT are mutually exclusive.
+    MESSAGE(FATAL_ERROR "cet_test: target ${CET_TARGET} cannot have both CET_HANDBUILT "
+      "and CET_PREBUILT options set.")
+  ELSEIF(CET_PREBUILT) # eg scripts.
+    IF (NOT CET_INSTALL_BIN)
+      SET(CET_NO_INSTALL "NO_INSTALL")
+    ENDIF()
+    cet_script(${CET_TARGET} ${CET_NO_INSTALL} DEPENDENCIES ${CET_DEPENDENCIES})
+  ELSEIF(NOT CET_HANDBUILT) # Normal build.
+    # Build the executable.
+    IF(NOT CET_SOURCES) # Useful default.
+      SET(CET_SOURCES ${CET_TARGET}.cc)
+    ENDIF()
+    ADD_EXECUTABLE(${CET_TARGET} ${CET_SOURCES})
+    IF(CET_USE_BOOST_UNIT)
+      # Make sure we have the correct library available.
+      IF (NOT Boost_UNIT_TEST_FRAMEWORK_LIBRARY)
+        MESSAGE(FATAL_ERROR "cet_test: target ${CET_TARGET} has USE_BOOST_UNIT "
+          "option set but Boost Unit Test Framework Library cannot be found: is "
+          "boost set up?")
+      ENDIF()
+      # Compile options (-Dxxx) for simple-format unit tests.
+      SET_TARGET_PROPERTIES(${CET_TARGET} PROPERTIES
+        COMPILE_DEFINITIONS BOOST_TEST_MAIN
+        COMPILE_DEFINITIONS BOOST_TEST_DYN_LINK
+        )
+      TARGET_LINK_LIBRARIES(${CET_TARGET} ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
+    ENDIF()
+    IF(COMMAND find_tbb_offloads)
+      find_tbb_offloads(FOUND_VAR have_tbb_offload ${CET_SOURCES})
+      IF(have_tbb_offload)
+        SET_TARGET_PROPERTIES(${CET_TARGET} PROPERTIES LINK_FLAGS ${TBB_OFFLOAD_FLAG})
+      ENDIF()
+    ENDIF()
+    TARGET_LINK_LIBRARIES(${CET_TARGET} ${CET_LIBRARIES})
+  ENDIF()
+  #cet_copy(${CET_DATAFILES} DESTINATION ${CET_TEST_WORKDIR} WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
+  foreach(cetdf ${CET_DATAFILES})
+    configure_file(${cetdf} ${CET_TEST_WORKDIR} COPYONLY)
+  endforeach()
+  IF(CET_CONFIGURATIONS)
+    SET(CONFIGURATIONS_CMD CONFIGURATIONS)
+  ENDIF()
+  _update_defined_test_groups(${CET_OPTIONAL_GROUPS})
+  _check_want_test("${CET_OPTIONAL_GROUPS}" WANT_TEST)
+  IF(NOT CET_NO_AUTO AND WANT_TEST)
+    # Add the test.
+    ADD_TEST(NAME ${CET_TARGET}
+      ${CONFIGURATIONS_CMD} ${CET_CONFIGURATIONS}
+      COMMAND ${CET_TEST_EXEC} ${CET_TEST_ARGS})
+    IF(${CMAKE_VERSION} VERSION_GREATER "2.8")
+      SET_TESTS_PROPERTIES(${CET_TARGET} PROPERTIES WORKING_DIRECTORY ${CET_TEST_WORKDIR})
+    ENDIF()
+    IF(CET_TEST_PROPERTIES)
+      SET_TESTS_PROPERTIES(${CET_TARGET} PROPERTIES ${CET_TEST_PROPERTIES})
+    ENDIF()
+    IF(CET_TEST_ENV)
+      # Set global environment.
+      GET_TEST_PROPERTY(${CET_TARGET} ENVIRONMENT CET_TEST_ENV_TMP)
+      IF(CET_TEST_ENV_TMP)
+        SET_TESTS_PROPERTIES(${CET_TARGET} PROPERTIES ENVIRONMENT "${CET_TEST_ENV};${CET_TEST_ENV_TMP}")
+      ELSE()
+        SET_TESTS_PROPERTIES(${CET_TARGET} PROPERTIES ENVIRONMENT "${CET_TEST_ENV}")
+      ENDIF()
+    ENDIF()
+    IF(DEFINED CET_REF)
+      GET_TEST_PROPERTY(${CET_TARGET} PASS_REGULAR_EXPRESSION has_pass_exp)
+      GET_TEST_PROPERTY(${CET_TARGET} FAIL_REGULAR_EXPRESSION has_fail_exp)
+      IF(has_pass_exp OR has_fail_exp)
+        MESSAGE(FATAL_ERROR "Cannot specify REF option for test ${CET_TARGET}, which already has\n"
+          "(PASS|FAIL)_REGULAR_EXPRESSION property set.")
+      ENDIF()
+      IF(CET_REF)
+        IF(EXISTS "${CET_REF}")
+          FILE(READ "${CET_REF}" CET_REF_TEXT)
+        ELSE()
+          MESSAGE(FATAL_ERROR "Specified REFerence file ${CET_REF} does not exist for test ${CET_TARGET}.")
+        ENDIF()
+      ENDIF()
+      cet_regex_escape("${CET_REF_TEXT}" CET_REF_TEXT)
+      SET(CET_REF_TEXT "^${CET_REF_TEXT}$")
+      SET_TESTS_PROPERTIES(${CET_TARGET} PROPERTIES PASS_REGULAR_EXPRESSION "${CET_REF_TEXT}")
+    ENDIF()
+  ENDIF()
+ENDFUNCTION(cet_test)
+
+FUNCTION(cet_test_assertion CONDITION FIRST_TARGET)
+  IF (${CMAKE_SYSTEM_NAME} MATCHES "Darwin" )
+    SET_TESTS_PROPERTIES(${FIRST_TARGET} ${ARGN} PROPERTIES
+      PASS_REGULAR_EXPRESSION
+      "Assertion failed: \\(${CONDITION}\\), "
+      )
+  ELSE()
+    SET_TESTS_PROPERTIES(${FIRST_TARGET} ${ARGN} PROPERTIES
+      PASS_REGULAR_EXPRESSION
+      "Assertion `${CONDITION}' failed\\."
+      )
+  ENDIF()
+ENDFUNCTION()
+########################################################################
diff --git a/Modules/CheckClassVersion.cmake b/Modules/CheckClassVersion.cmake
index c26e149..fdc6739 100644
--- a/Modules/CheckClassVersion.cmake
+++ b/Modules/CheckClassVersion.cmake
@@ -1,25 +1,19 @@
-INCLUDE(CetParseArgs)
+#string(REPLACE "/" "+" _ccv_target "${EXECUTABLE_OUTPUT_PATH}/checkClassVersion")
 
-EXECUTE_PROCESS(COMMAND root-config --has-python
-  RESULT_VARIABLE ART_CCV_ROOT_CONFIG_OK
-  OUTPUT_VARIABLE ART_CCV_ENABLED
-  OUTPUT_STRIP_TRAILING_WHITESPACE
-)
-
-IF(NOT ART_CCV_ROOT_CONFIG_OK EQUAL 0)
-  MESSAGE(FATAL_ERROR "Could not execute root-config successfully to interrogate configuration: exit code ${ART_CCV_ROOT_CONFIG_OK}")
-ENDIF()
-
-IF(NOT ART_CCV_ENABLED)
-  MESSAGE("WARNING: The version of root against which we are building currently has not been built "
-    "with python support: ClassVersion checking is disabled."
+# - Use a property to configure the dynamic loader path for checkClassVersion
+# It's done this way because we don't want to hard code anything in the
+# actual macro or provide an argument (because it's used internally by ArtDictionary
+# and that can be used by clients...
+function(checkclassversion_append_path _path)
+  set_property(GLOBAL
+    APPEND
+    PROPERTY CHECKCLASSVERSION_DYNAMIC_PATH ${_path}
     )
-ENDIF()
+endfunction()
 
-string(REPLACE "/" "+" _ccv_target "${EXECUTABLE_OUTPUT_PATH}/checkClassVersion")
 
 MACRO(check_class_version)
-  CET_PARSE_ARGS(ART_CCV
+  CMAKE_PARSE_ARGUMENTS(ART_CCV
     "LIBRARIES"
     "UPDATE_IN_PLACE"
     ${ARGN}
@@ -34,19 +28,29 @@ MACRO(check_class_version)
   IF(NOT dictname)
     MESSAGE(FATAL_ERROR "CHECK_CLASS_VERSION must be called after BUILD_DICTIONARY.")
   ENDIF()
-  IF(ART_CCV_ENABLED)
+  IF(ROOT_python_FOUND)
+    # Use dynamic path lookup if configured
+    get_property(ART_CCV_DYNAMIC_PATH GLOBAL PROPERTY CHECKCLASSVERSION_DYNAMIC_PATH)
+    set(ART_CCV_DYNAMIC_PATH_ARGS)
+    foreach(_path ${ART_CCV_DYNAMIC_PATH})
+      list(APPEND ART_CCV_DYNAMIC_PATH_ARGS -L${_path})
+    endforeach()
+
     # Add the check to the end of the dictionary building step.
     add_custom_command(TARGET ${dictname}_dict POST_BUILD
-      COMMAND checkClassVersion ${ART_CCV_EXTRA_ARGS}
-      -l ${LIBRARY_OUTPUT_PATH}/lib${dictname}_dict
+      COMMAND art::checkClassVersion
+      ${ART_CCV_EXTRA_ARGS}
+      ${ART_CCV_DYNAMIC_PATH_ARGS}
+      -l$<TARGET_FILE:${dictname}_dict>
       -x ${CMAKE_CURRENT_SOURCE_DIR}/classes_def.xml
+      COMMENT "Running checkClassVersion on ${dictname}_dict"
       VERBATIM
       )
-    if (NOT ART_FRAMEWORK_CORE)
+    if (NOT TARGET art::art_Framework_Core)
       # If we're in art, we need to be sure that CheckClassVersion and
       # art_Framework_Core are already built; if we're outside art, this
       # is a given.
-      add_dependencies(${dictname}_dict ${_ccv_target} art_Framework_Core)
+      add_dependencies(${dictname}_dict art::checkClassVersion art_Framework_Core)
     endif()
   ENDIF()
 ENDMACRO()
diff --git a/Modules/FindCppUnit.cmake b/Modules/FindCppUnit.cmake
new file mode 100644
index 0000000..379bd73
--- /dev/null
+++ b/Modules/FindCppUnit.cmake
@@ -0,0 +1,33 @@
+#
+# http://root.cern.ch/viewvc/trunk/cint/reflex/cmake/modules/FindCppUnit.cmake
+#
+# - Find CppUnit
+# This module finds an installed CppUnit package.
+#
+# It sets the following variables:
+# CPPUNIT_FOUND - Set to false, or undefined, if CppUnit isn't found.
+# CPPUNIT_INCLUDE_DIR - The CppUnit include directory.
+# CPPUNIT_LIBRARY - The CppUnit library to link against.
+
+FIND_PATH(CPPUNIT_INCLUDE_DIR cppunit/Test.h)
+FIND_LIBRARY(CPPUNIT_LIBRARY NAMES cppunit)
+
+IF (CPPUNIT_INCLUDE_DIR AND CPPUNIT_LIBRARY)
+  SET(CPPUNIT_FOUND TRUE)
+ENDIF (CPPUNIT_INCLUDE_DIR AND CPPUNIT_LIBRARY)
+
+IF (CPPUNIT_FOUND)
+
+  # show which CppUnit was found only if not quiet
+  IF (NOT CppUnit_FIND_QUIETLY)
+    MESSAGE(STATUS "Found CppUnit: ${CPPUNIT_LIBRARY}")
+  ENDIF (NOT CppUnit_FIND_QUIETLY)
+
+ELSE (CPPUNIT_FOUND)
+
+  # fatal error if CppUnit is required but not found
+  IF (CppUnit_FIND_REQUIRED)
+    MESSAGE(FATAL_ERROR "Could not find CppUnit")
+  ENDIF (CppUnit_FIND_REQUIRED)
+
+ENDIF (CPPUNIT_FOUND)
diff --git a/Modules/FindSQLite3.cmake b/Modules/FindSQLite3.cmake
new file mode 100644
index 0000000..71ec8f8
--- /dev/null
+++ b/Modules/FindSQLite3.cmake
@@ -0,0 +1,82 @@
+# - Try to find SQLite3
+# Once done this will define
+#
+#  SQLite3_FOUND - system has Sqlite
+#  SQLite3_INCLUDE_DIRS - the Sqlite include directory
+#  SQLite3_LIBRARIES - Link these to use Sqlite
+#  SQLite3_DEFINITIONS - Compiler switches required for using Sqlite
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+#
+
+# Copyright (c) 2014, Ben Morgan, <Ben.Morgan@warwick.ac.uk>
+# Copyright (c) 2008, Gilles Caulier, <caulier.gilles@gmail.com>
+#
+# Redistribution and use is allowed according to the terms of the BSD license.
+# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
+
+if(SQLite3_INCLUDE_DIR AND SQLite3_LIBRARY)
+   # in cache already
+   SET(SQLite3_FIND_QUIETLY TRUE)
+endif()
+
+# Optionally use pkg-config to get the directories and then use these values
+# in the FIND_PATH() and FIND_LIBRARY() calls
+if(NOT WIN32)
+  find_package(PkgConfig)
+  pkg_check_modules(PC_SQLite3 QUIET sqlite3)
+  set(SQLite3_DEFINITIONS ${PC_SQLite3_CFLAGS_OTHER})
+endif()
+
+# - Find header
+find_path(SQLite3_INCLUDE_DIR NAMES sqlite3.h
+  PATHS
+  ${PC_SQLite3_INCLUDEDIR}
+  ${PC_SQLite3_INCLUDE_DIRS}
+)
+
+# - Extract version
+if(SQLite3_INCLUDE_DIR AND EXISTS "${SQLite3_INCLUDE_DIR}/sqlite3.h")
+  file(STRINGS "${SQLite3_INCLUDE_DIR}/sqlite3.h" SQLite3_H REGEX "^#define SQLITE_VERSION *\"[^\"]*\"$")
+
+  string(REGEX REPLACE "^.*SQLITE_VERSION *\"([0-9]+).*$" "\\1" SQLite3_VERSION_MAJOR "${SQLite3_H}")
+  string(REGEX REPLACE "^.*SQLITE_VERSION *\"[0-9]+\\.([0-9]+).*$" "\\1" SQLite3_VERSION_MINOR  "${SQLite3_H}")
+  string(REGEX REPLACE "^.*SQLITE_VERSION *\"[0-9]+\\.[0-9]+\\.([0-9]+).*$" "\\1" SQLite3_VERSION_PATCH "${SQLite3_H}")
+  set(SQLite3_VERSION_STRING "${SQLite3_VERSION_MAJOR}.${SQLite3_VERSION_MINOR}.${SQLite3_VERSION_PATCH}")
+
+  # only append a TWEAK version if it exists:
+  set(SQLite3_VERSION_TWEAK "")
+  if( "${SQLite3_H}" MATCHES "^.*SQLITE_VERSION *\"[0-9]+\\.[0-9]+\\.[0-9]+\\.([0-9]+).*$")
+    set(SQLite3_VERSION_TWEAK "${CMAKE_MATCH_1}")
+    set(SQLite3_VERSION_STRING "${SQLite3_VERSION_STRING}.${SQLite3_VERSION_TWEAK}")
+  endif()
+
+  set(SQLite3_MAJOR_VERSION "${SQLite3_VERSION_MAJOR}")
+  set(SQLite3_MINOR_VERSION "${SQLite3_VERSION_MINOR}")
+  set(SQLite3_PATCH_VERSION "${SQLite3_VERSION_PATCH}")
+endif()
+
+
+find_library(SQLite3_LIBRARY NAMES sqlite3
+  PATHS
+  ${PC_SQLite3_LIBDIR}
+  ${PC_SQLite3_LIBRARY_DIRS}
+)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(SQLite3
+  FOUND_VAR SQLite3_FOUND
+  REQUIRED_VARS SQLite3_INCLUDE_DIR SQLite3_LIBRARY
+  VERSION_VAR SQLite3_VERSION_STRING
+  )
+
+# show the SQLite_INCLUDE_DIR and SQLite_LIBRARIES variables only in the advanced view
+mark_as_advanced(SQLite3_INCLUDE_DIR SQLite3_LIBRARY)
+
+# Final setup
+if(SQLite3_FOUND)
+  set(SQLite3_INCLUDE_DIRS ${SQLite3_INCLUDE_DIR})
+  set(SQLite3_LIBRARIES ${SQLite3_LIBRARY})
+endif()
+
diff --git a/Modules/FindTBB.cmake b/Modules/FindTBB.cmake
new file mode 100644
index 0000000..ccad261
--- /dev/null
+++ b/Modules/FindTBB.cmake
@@ -0,0 +1,291 @@
+# - Find ThreadingBuildingBlocks include dirs and libraries
+# Use this module by invoking find_package with the form:
+#  find_package(TBB
+#    [REQUIRED]             # Fail with error if TBB is not found
+#    )                      #
+# Once done, this will define
+#
+#  TBB_FOUND - system has TBB
+#  TBB_INCLUDE_DIRS - the TBB include directories
+#  TBB_LIBRARIES - TBB libraries to be lined, doesn't include malloc or
+#                  malloc proxy
+#
+#  TBB_VERSION_MAJOR - Major Product Version Number
+#  TBB_VERSION_MINOR - Minor Product Version Number
+#  TBB_INTERFACE_VERSION - Engineering Focused Version Number
+#  TBB_COMPATIBLE_INTERFACE_VERSION - The oldest major interface version
+#                                     still supported. This uses the engineering
+#                                     focused interface version numbers.
+#
+#  TBB_MALLOC_FOUND - system has TBB malloc library
+#  TBB_MALLOC_INCLUDE_DIRS - the TBB malloc include directories
+#  TBB_MALLOC_LIBRARIES - The TBB malloc libraries to be lined
+#
+#  TBB_MALLOC_PROXY_FOUND - system has TBB malloc proxy library
+#  TBB_MALLOC_PROXY_INCLUDE_DIRS = the TBB malloc proxy include directories
+#  TBB_MALLOC_PROXY_LIBRARIES - The TBB malloc proxy libraries to be lined
+#
+#
+# This module reads hints about search locations from variables:
+#  ENV TBB_ARCH_PLATFORM for windows only
+#  ENV TBB_ROOT or just TBB_ROOT
+#
+#
+#
+# Modified by Robert Maynard from the original OGRE source
+#
+#-------------------------------------------------------------------
+# This file is part of the CMake build system for OGRE
+#     (Object-oriented Graphics Rendering Engine)
+# For the latest info, see http://www.ogre3d.org/
+#
+# The contents of this file are placed in the public domain. Feel
+# free to make use of it in any way you like.
+#-------------------------------------------------------------------
+#
+#=============================================================================
+# Copyright 2010-2012 Kitware, Inc.
+# Copyright 2012      Rolf Eike Beer <eike@sf-mail.de>
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+
+#=============================================================================
+#  FindTBB helper functions and macros
+#
+
+#===============================================
+# Create search paths based on prefix path
+#===============================================
+macro(create_search_paths PREFIX)
+  foreach(dir ${${PREFIX}_PREFIX_PATH})
+    set(${PREFIX}_INC_SEARCH_PATH ${${PREFIX}_INC_SEARCH_PATH}
+      ${dir}/include ${dir}/Include ${dir}/include/${PREFIX})
+    set(${PREFIX}_LIB_SEARCH_PATH ${${PREFIX}_LIB_SEARCH_PATH}
+      ${dir}/lib ${dir}/Lib ${dir}/lib/${PREFIX} ${dir}/Libs)
+  endforeach(dir)
+endmacro(create_search_paths)
+
+#===============================================
+# Do the final processing for the package find.
+#===============================================
+macro(findpkg_finish PREFIX)
+  # skip if already processed during this run
+  if (NOT ${PREFIX}_FOUND)
+    if (${PREFIX}_INCLUDE_DIR AND ${PREFIX}_LIBRARY)
+      set(${PREFIX}_FOUND TRUE)
+      set (${PREFIX}_INCLUDE_DIRS ${${PREFIX}_INCLUDE_DIR})
+      set (${PREFIX}_LIBRARIES ${${PREFIX}_LIBRARY})
+    else ()
+      if (${PREFIX}_FIND_REQUIRED AND NOT ${PREFIX}_FIND_QUIETLY)
+        message(FATAL_ERROR "Required library ${PREFIX} not found.")
+      endif ()
+    endif ()
+
+   #mark the following variables as internal variables
+   mark_as_advanced(${PREFIX}_INCLUDE_DIR
+                    ${PREFIX}_LIBRARY
+                    ${PREFIX}_LIBRARY_DEBUG
+                    ${PREFIX}_LIBRARY_RELEASE)
+  endif ()
+endmacro(findpkg_finish)
+
+#===============================================
+# Generate debug names from given RELEASEease names
+#===============================================
+macro(get_debug_names PREFIX)
+  foreach(i ${${PREFIX}})
+    set(${PREFIX}_DEBUG ${${PREFIX}_DEBUG} ${i}d ${i}D ${i}_d ${i}_D ${i}_debug ${i})
+  endforeach(i)
+endmacro(get_debug_names)
+
+#===============================================
+# See if we have env vars to help us find tbb
+#===============================================
+macro(getenv_path VAR)
+   set(ENV_${VAR} $ENV{${VAR}})
+   # replace won't work if var is blank
+   if (ENV_${VAR})
+     string( REGEX REPLACE "\\\\" "/" ENV_${VAR} ${ENV_${VAR}} )
+   endif ()
+endmacro(getenv_path)
+
+#===============================================
+# Couple a set of RELEASEease AND debug libraries
+#===============================================
+macro(make_library_set PREFIX)
+  if (${PREFIX}_RELEASE AND ${PREFIX}_DEBUG)
+    set(${PREFIX} optimized ${${PREFIX}_RELEASE} debug ${${PREFIX}_DEBUG})
+  elseif (${PREFIX}_RELEASE)
+    set(${PREFIX} ${${PREFIX}_RELEASE})
+  elseif (${PREFIX}_DEBUG)
+    set(${PREFIX} ${${PREFIX}_DEBUG})
+  endif ()
+endmacro(make_library_set)
+
+
+#=============================================================================
+#  Now to actually find TBB
+#
+
+# Get path, convert backslashes as ${ENV_${var}}
+getenv_path(TBB_ROOT)
+# construct search paths
+set(TBB_PREFIX_PATH ${TBB_ROOT} ${ENV_TBB_ROOT})
+create_search_paths(TBB)
+
+# get the arch, only used by windows
+if($ENV{TBB_ARCH_PLATFORM})
+    set(TBB_ARCH_PLATFORM $ENV{TBB_ARCH_PLATFORM})
+endif()
+
+# For Windows, let's assume that the user might be using the precompiled
+# TBB packages from the main website. These use a rather awkward directory
+# structure (at least for automatically finding the right files) depending
+# on platform and compiler, but we'll do our best to accommodate it.
+# Not adding the same effort for the precompiled linux builds, though. Those
+# have different versions for CC compiler versions and linux kernels which
+# will never adequately match the user's setup, so there is no feasible way
+# to detect the "best" version to use. The user will have to manually
+# select the right files. (Chances are the distributions are shipping their
+# custom version of tbb, anyway, so the problem is probably nonexistant.)
+if (WIN32 AND MSVC)
+  set(COMPILER_PREFIX "vc7.1")
+  if (MSVC_VERSION EQUAL 1400)
+    set(COMPILER_PREFIX "vc8")
+  elseif(MSVC_VERSION EQUAL 1500)
+    set(COMPILER_PREFIX "vc9")
+  elseif(MSVC_VERSION EQUAL 1600)
+    set(COMPILER_PREFIX "vc10")
+  elseif(MSVC_VERSION EQUAL 1700)
+    set(COMPILER_PREFIX "vc11")
+  elseif(MSVC_VERSION EQUAL 1800)
+    set(COMPILER_PREFIX "vc12")
+  endif ()
+
+  # for each prefix path, add ia32/64\${COMPILER_PREFIX}\lib to the lib search path
+  foreach (dir ${TBB_PREFIX_PATH})
+    if (CMAKE_CL_64)
+      list(APPEND TBB_LIB_SEARCH_PATH ${dir}/ia64/${COMPILER_PREFIX}/lib)
+      list(APPEND TBB_LIB_SEARCH_PATH ${dir}/lib/ia64/${COMPILER_PREFIX})
+      list(APPEND TBB_LIB_SEARCH_PATH ${dir}/intel64/${COMPILER_PREFIX}/lib)
+      list(APPEND TBB_LIB_SEARCH_PATH ${dir}/lib/intel64/${COMPILER_PREFIX})
+    else ()
+      list(APPEND TBB_LIB_SEARCH_PATH ${dir}/ia32/${COMPILER_PREFIX}/lib)
+      list(APPEND TBB_LIB_SEARCH_PATH ${dir}/lib/ia32/${COMPILER_PREFIX})
+    endif ()
+  endforeach ()
+endif ()
+
+foreach (dir ${TBB_PREFIX_PATH})
+  list(APPEND TBB_LIB_SEARCH_PATH ${dir}/${TBB_ARCH_PLATFORM}/lib)
+  list(APPEND TBB_LIB_SEARCH_PATH ${dir}/lib/${TBB_ARCH_PLATFORM})
+  list(APPEND TBB_LIB_SEARCH_PATH ${dir}/lib)
+endforeach ()
+
+
+set(TBB_LIBRARY_NAMES tbb)
+get_debug_names(TBB_LIBRARY_NAMES)
+
+
+find_path(TBB_INCLUDE_DIR
+          NAMES tbb/tbb.h
+          PATHS ${TBB_INC_SEARCH_PATH})
+
+find_library(TBB_LIBRARY_RELEASE
+             NAMES ${TBB_LIBRARY_NAMES}
+             PATHS ${TBB_LIB_SEARCH_PATH})
+find_library(TBB_LIBRARY_DEBUG
+             NAMES ${TBB_LIBRARY_NAMES_DEBUG}
+             PATHS ${TBB_LIB_SEARCH_PATH})
+make_library_set(TBB_LIBRARY)
+
+findpkg_finish(TBB)
+
+#on unix we need to also link to rt
+if(UNIX AND NOT APPLE)
+  list(APPEND TBB_LIBRARIES rt)
+endif()
+
+#if we haven't found TBB no point on going any further
+if (NOT TBB_FOUND)
+  return()
+endif ()
+
+#=============================================================================
+# Look for TBB's malloc package
+set(TBB_MALLOC_LIBRARY_NAMES tbbmalloc)
+get_debug_names(TBB_MALLOC_LIBRARY_NAMES)
+
+find_path(TBB_MALLOC_INCLUDE_DIR
+          NAMES tbb/tbb.h
+          PATHS ${TBB_INC_SEARCH_PATH})
+
+find_library(TBB_MALLOC_LIBRARY_RELEASE
+             NAMES ${TBB_MALLOC_LIBRARY_NAMES}
+             PATHS ${TBB_LIB_SEARCH_PATH})
+find_library(TBB_MALLOC_LIBRARY_DEBUG
+             NAMES ${TBB_MALLOC_LIBRARY_NAMES_DEBUG}
+             PATHS ${TBB_LIB_SEARCH_PATH})
+make_library_set(TBB_MALLOC_LIBRARY)
+
+findpkg_finish(TBB_MALLOC)
+
+#=============================================================================
+# Look for TBB's malloc proxy package
+set(TBB_MALLOC_PROXY_LIBRARY_NAMES tbbmalloc_proxy)
+get_debug_names(TBB_MALLOC_PROXY_LIBRARY_NAMES)
+
+find_path(TBB_MALLOC_PROXY_INCLUDE_DIR
+          NAMES tbb/tbbmalloc_proxy.h
+          PATHS ${TBB_INC_SEARCH_PATH})
+
+find_library(TBB_MALLOC_PROXY_LIBRARY_RELEASE
+             NAMES ${TBB_MALLOC_PROXY_LIBRARY_NAMES}
+             PATHS ${TBB_LIB_SEARCH_PATH})
+find_library(TBB_MALLOC_PROXY_LIBRARY_DEBUG
+             NAMES ${TBB_MALLOC_PROXY_LIBRARY_NAMES_DEBUG}
+             PATHS ${TBB_LIB_SEARCH_PATH})
+make_library_set(TBB_MALLOC_PROXY_LIBRARY)
+
+findpkg_finish(TBB_MALLOC_PROXY)
+
+#-----------------------------------------------------------------------------
+# setup timing libs we need to link too
+
+
+#=============================================================================
+#parse all the version numbers from tbb
+if(NOT TBB_VERSION)
+
+ #only read the start of the file
+ file(READ
+      "${TBB_INCLUDE_DIR}/tbb/tbb_stddef.h"
+      TBB_VERSION_CONTENTS
+      LIMIT 2048)
+
+  string(REGEX REPLACE
+    ".*#define TBB_VERSION_MAJOR ([0-9]+).*" "\\1"
+    TBB_VERSION_MAJOR "${TBB_VERSION_CONTENTS}")
+
+  string(REGEX REPLACE
+    ".*#define TBB_VERSION_MINOR ([0-9]+).*" "\\1"
+    TBB_VERSION_MINOR "${TBB_VERSION_CONTENTS}")
+
+  string(REGEX REPLACE
+        ".*#define TBB_INTERFACE_VERSION ([0-9]+).*" "\\1"
+        TBB_INTERFACE_VERSION "${TBB_VERSION_CONTENTS}")
+
+  string(REGEX REPLACE
+        ".*#define TBB_COMPATIBLE_INTERFACE_VERSION ([0-9]+).*" "\\1"
+        TBB_COMPATIBLE_INTERFACE_VERSION "${TBB_VERSION_CONTENTS}")
+
+endif()
diff --git a/Modules/README.md b/Modules/README.md
new file mode 100644
index 0000000..9a7ddc3
--- /dev/null
+++ b/Modules/README.md
@@ -0,0 +1,201 @@
+Art's Custom CMake Modules
+==========================
+Notes on Art's custom cmake modules to help in decoding what these do
+(or more specifically, the functions and macros they provide).
+
+Document this in a separate file to keep things in one place and not
+to modify the core files. There will be some reference to the source
+tree under art/ because it's from here that we'll find uses of the
+functions and macros.
+
+Inclusion Order/Dependencies
+============================
+Art use cetbuildtools, so often calls into that, with usage marked by
+"CBT::"
+
+- ArtDictionary.cmake
+  - CBT::BuildDictionary
+  - CheckClassVersion.cmake
+- ArtMake.cmake
+  - ArtDictionary.cmake
+  - CBT::CetMake
+  - CBT::CetParseArgs
+  - CBT::InstallSource
+- BuildPlugins.cmake
+  - CBT::BasicPlugin.cmake
+- CheckClassVersion.cmake
+  - CBT::CetParseArgs.cmake
+
+Will need to check for other usage of CBT/Cetpkgsupport modules (e.g.
+"artmod" from cetpkgsupport (that is simple code generation, so may not
+be critical, though should be in art itself!!).
+
+Usage in Art Components
+=======================
+art/Version
+-----------
+Calls `art_make_library`, `install_headers` and `install_source`.
+
+art/Utilities
+-------------
+Calls `art_make`, `install_headers` and `install_source`.
+
+Location/Purpose of CMake Functions/Macros
+==========================================
+Using the above section on Usage, try and drill down through the layers
+of calls and see what underlying CMake functionality is actually wrapped.
+List ordering at any point may be arbitrary, though would like to
+aim from lowest to highest calls.
+
+Stuff from CetBuildTools
+------------------------
+- `install_headers` : `CBT::InstallSource.cmake`
+  - Globbing with hardcoding, relies of directory structure to function,
+    nothing more than wrapper around `install(FILES ...)`.
+- `install_sources` : `CBT::InstallSource.cmake`
+  - Basically performs the task that a basic CPack setup should do.
+    May install generated sources as well, but no real need to do
+    this.
+- `simple_plugin` : `CBT::BasicPlugin.cmake`
+  - Basically a wrapper around `add_library`, `target_link_libraries` and
+    `install`.
+  - Name of plugin either set directly as `<name>_<type>` or derived
+    from the path to the directory where it was called from.
+    - Makes it sensitive to directory names, as these can't have
+      underscores for the derived name to work
+  - Always have one source file to generate one plugin.
+    - source file expected to be named `<name>_<type>.cc`
+    - call to `aad_library` with derived target names and this file,
+      always a SHARED library type.
+  - Then creates list of libraries to link to
+    - uses supplied libs, and copies code from `cet_make_library`
+      to process items in the based on path/name/uppercase.
+    - Uses `find_tbb_offloads` as in `cet_make_library`.
+    - Can specify the `USE_BOOST_UNIT` to compile/link to Boost.Unit...
+  - If plugin to be installed, then its destination is `${flavorqual_dir}/lib`
+- `cet_make_library` : `CBT::CetMake.cmake`
+  - Basically a wrapper around `add_library/target_link_libraries/install`
+  - Plus a flag to handle NO_INSTALL (i.e. alocal/test library)
+  - Plus a flag to handle adding a static library as well.
+  - Takes a source list, so no globbing.
+  - It uses some command `find_tbb_offloads`. Appears that this checks
+    sources for something, then modifies LINK_FLAGS property of target
+    if check suceeds. Cannot find command to check what it does though...
+  - Some odd processing of the LIBRARIES list (what it gets linked to).
+    All libs are added, but some are converted to upper case names. Not
+    at all clear why this is done.
+  - Calls `cet_add_to_library_list` with library name as argument.
+    That just adds the name to an internally cached list variable.
+  - If installed, destination is set to "product" based paths.
+- `build_dictionary` : `CBT::BuildDictionary.cmake`
+  - If no dictionary name supplied, derives it from current source dir
+  - Always appends ROOT Core and Reflex libs to link list
+  - calls `_generate_dictionary` with dictionary name as arg
+  - Uses files `<dictname>_{dict,map}.cpp` generated by the macro
+    to compile **TWO** libraries, one for each file:
+    - `<dictname>_dict`
+    - `<dictname>_map`
+    - Both libs have their `COMPILE_FLAGS` properties appended
+      with any args passed in through `COMPILE_FLAGS` arg of `build_directory
+    - `<dictname>_map` is made to depend on `<dictname>_dict`
+    - They are both linked to the libraries derived above.
+    - They are both installed to `flavorqual_dir/lib` unless the `NO_INSTALL`
+      option was passed.
+- `_generate_dictionary` : `CBT::BuildDictionary.cmake`
+  - Basically wraps creation of `add_custom_command` that calls, in turn
+    - genreflex to create ...
+    - cmake to copy `classes_ids.cc` to `<dictname>_map.cpp`
+    - cmake to remove `classes_ids.cc`
+  - Genreflex is called with a set of flags, derived as:
+    - Core, always applied (set at top of module).
+      - These explicitly use g++ and GNU macros.
+    - Appends `--dataonly` if `DICT_FUNCTIONS` option not set
+    - Appends `-I <dir>` for every dir in `INCLUDE_DIRECTORIES` property
+      of current source directory
+    - Appends `-D<def>` for every def in `COMPILE_DEFINITIONS` property
+      of current source directory
+  - The resultant `add_custom_command` is then
+    - `genreflex classes.h -s classes_def.xml <-I-Dargs> -o <dictname>_dict.cpp`
+    - Note that it assumes that `classes{.h,_def.xml}` are in the current
+      cmake sourc directory.
+    - It also adds `-I` arguments for the CMake top level and current source
+      directories.
+    - It runs in the current binary directory.
+  - NB: **If** a variable named `GENREFLEX_CLEANUP` is true, then a
+    shell OR is used after the call to genreflex which removes
+    the `<dictname>_dict.cpp` file.
+    - This variable appears to be set in `find_ups_root`
+
+Stuff from Art
+--------------
+- `_art_simple_plugin` : `ArtMake.cmake`
+  - Basically a wrapper around `simple_plugin`
+  - Takes `file`, `type` and list of link libraries as input and
+    adapts these to the interface of `simple_plugin`
+- `check_class_version` : [`CheckClassVersion.cmake`](CheckClassVersion.cmak)
+  - Inclusion of `CheckClassVersion.cmake` results in a check for Python
+    support in ROOT via running `root-config`. This sets a variable
+    later used to protect the call to `checkClassVersion`
+  - Wraps the [`checkClassVersion`](../tools/checkClassVersion) script
+    inside `add_custom_target`
+    - NB: [the CMake script in tools](../tools/CMakeLists.txt) uses
+      `cet_script` to make an imported target for `checkClassVersion`
+  - Takes LIBRARIES arg, but using this results in FATAL_ERROR (not supported yet...)
+  - Takes UPDATE_IN_PLACE option which if set results in "-G" argument
+    being passed to `checkClassVersion` script
+  - Relies on local variable `dictname` being set prior to macro
+    invocation (does FATAL_ERROR if not set), so can only be called
+    after a `build_dictionary` call.
+  - Custom target only created if earlier check on ROOT Python support
+    was successful
+    - Runs `checkClassVersion` script using any passed down arguments,
+      a "-l" argument set to path to `lib<dictname>_dict` and a "-x"
+      argument set to `classes_def.xml` which must be in the source
+      directory from which the macro was invoked.
+    - Target gets dependencies on `classes_def.xml`, `<dictname>_dict`
+      `art_Framework_Core` and `checkClassVersion`
+- `art_dictionary` : `ArtDictionary.cmake`
+  - Wraps calls to `build_dictionary` and `check_class_version`
+- `art_make_library` : `ArtMake.cmake`
+  - Basically a wrapper around `cet_make_library`.
+  - Can supply a name for the library, otherwise derived from current
+    directory path from cmake (not project!) source dir.
+  - Has to be supplied with source code list
+  - Can supply a variable that gets set to the library name in the calling
+    scope. Does not appear to be used within art.
+  - Calls `cet_make_library` with the library name, source list,
+    LIBRARIES list (if it was supplied) plus all other arguments.
+- `art_make` : `ArtMake.cmake`
+  - Basically a wrapper around `art_make_library`, `_art_simple_plugin`
+    and `art_dictionary`.
+  - Begins by globbing for library/plugin sources...
+    - Appears that plugin sources must be named `<something>_<type>.cc`
+      where `<type>` is `source`, `module` or `service` (possibly others,
+      as list is appended via some unclear calculations).
+    - Several globs over everything, then more specific patterns, then
+      subdirectories.
+    - Then filters out specific from general...
+    - Also has an `EXCLUDES` argument to filter out user specified.
+    - Almost certainly easier and less error prone to move to explicit
+      listing...
+  - Some processing of file lists occurs, but seems overly complex
+    - Appears that a nested loop is used when a simple list set/copy
+      would suffice (see `art_file_list` and `art_make_library_src`
+      variables).
+  - Need to build library indicated by non-empty `art_file_list` and
+    `art_make_library_src`
+    - Calls down to `art_make_library` with source list being the
+      `art_make_library_src` variable, which appears equal to the
+      `art_file_list` variable.
+  - Plugin build activated if `NO_PLUGINS` is false and the `plugin_files`
+    list is non empty.
+    - Each file has the plugin type extracted and then passed to
+      `_art_simple_plugin` with the type and and type specific libs.
+ - Check for dictionary performed by globbing for `classes.h` and
+   `classes_def.xml` files.
+   - If these exist, it appends them to `art_file_list`
+   - If a library was built, it's appended to `art_make_dict_libraries`,
+     followed by any further `DICT_LIBRARIES`.
+   - A call is then made to `art_dictionary`, with
+     `art_make_dict_libraries` if it exists.
+
diff --git a/Modules/artConfig.cmake.in b/Modules/artConfig.cmake.in
new file mode 100644
index 0000000..d86a84a
--- /dev/null
+++ b/Modules/artConfig.cmake.in
@@ -0,0 +1,32 @@
+# - art CMake package configuration file
+# Minimal for now
+
+# - API/ABI details
+set(art_VERSION @art_VERSION@)
+
+@PACKAGE_INIT@
+
+set_and_check(art_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
+set_and_check(art_BINDIR "@PACKAGE_CMAKE_INSTALL_BINDIR@")
+set_and_check(art_LIBDIR "@PACKAGE_CMAKE_INSTALL_LIBDIR@")
+
+# - Third-party details/refinds
+
+# - Import targets
+set(art_IMPORT_NAMESPACE "art::")
+include("${CMAKE_CURRENT_LIST_DIR}/ArtLibraries.cmake")
+
+# - Configure tools
+add_executable(art::checkClassVersion IMPORTED)
+set_target_properties(art::checkClassVersion
+  PROPERTIES
+   IMPORTED_LOCATION "${art_BINDIR}/checkClassVersion"
+   )
+
+# - Include tools
+list(INSERT CMAKE_MODULE_PATH 0 "${CMAKE_CURRENT_LIST_DIR}")
+include(ArtDictionary)
+include(artTools)
+
+# May need to call checkclassversion_append_path here
+
diff --git a/Modules/artInternalTools.cmake b/Modules/artInternalTools.cmake
new file mode 100644
index 0000000..372f597
--- /dev/null
+++ b/Modules/artInternalTools.cmake
@@ -0,0 +1,41 @@
+# - Developer tools for use in build of Art only
+
+#-----------------------------------------------------------------------
+# Copyright 2014 Ben Morgan <Ben.Morgan@warwick.ac.uk>
+# Copyright 2014 University of Warwick
+
+# - Needed core CMake support
+include(GNUInstallDirs)
+
+# - Standard arguments to pass to install(TARGETS ...) command
+set(art_TARGET_INSTALL_ARGS
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+
+#-----------------------------------------------------------------------
+# function art_set_standard_target_properties(<tgt>)
+#          Apply standard global target properties to target <tgt>
+#          Motivation - there are always some properties to apply
+#                       globally, e.g. soversions
+function(art_set_standard_target_properties __art_target)
+  if(NOT TARGET ${__art_target})
+    message(FATAL_ERROR "${__art_target} is not a target")
+  endif()
+
+  # If we can't see the version numbers, barf
+  if((NOT art_VERSION) OR (NOT art_SOVERSION))
+    message(FATAL_ERROR "Cannot access art's VERSION/SOVERSION")
+  endif()
+
+
+  set_target_properties(${__art_target}
+    PROPERTIES
+     VERSION ${art_VERSION}
+     SOVERSION ${art_SOVERSION}
+    )
+endfunction()
+
diff --git a/Modules/artTools.cmake b/Modules/artTools.cmake
new file mode 100644
index 0000000..05fc3f6
--- /dev/null
+++ b/Modules/artTools.cmake
@@ -0,0 +1,182 @@
+# - Developer/User tools for building art-style products
+#-----------------------------------------------------------------------
+# Copyright 2014 Ben Morgan <Ben.Morgan@warwick.ac.uk>
+# Copyright 2014 University of Warwick
+
+# - Include zis only once
+if(__ART_TOOLS_INCLUDED)
+  return()
+endif()
+set(__ART_TOOLS_INCLUDED 1)
+
+
+# - Interfaces
+include(CMakeParseArguments)
+
+#-----------------------------------------------------------------------
+# Functions to replace "simple_plugin"
+# Follow cmake add_<target> type interface, possibly allow for SOURCES
+# and LINKS_LIBRARIES style arguments
+#
+# Art understands three main types of plugin
+# "service", "module" and "source".
+# Because the search for plugins is based on the library name being in
+# the form
+#  libAA_bb_Cc_<type>.<ext>
+# you have to know what <type> is
+# In addition, each specific type of module requires linking to certain
+# art libraries.
+
+#-----------------------------------------------------------------------
+# function art_add_service(<name> source1 source2 ... sourceN)
+#
+function(art_add_service _name)
+  if(NOT (_name MATCHES ".*_service$"))
+    message(FATAL_ERROR "art_add_service: target name must end in '_service'")
+  endif()
+
+  add_library(${_name} SHARED ${ARGN})
+  target_link_libraries(${_name}
+    ${art_IMPORT_NAMESPACE}art_Framework_Services_Registry
+    FNALCore::FNALCore
+    )
+endfunction()
+
+
+#-----------------------------------------------------------------------
+# function art_add_module(<name> source1 source2 ... sourceN)
+#
+function(art_add_module _name)
+  if(NOT (_name MATCHES ".*_module$"))
+    message(FATAL_ERROR "art_add_module: target name must end in '_module'")
+  endif()
+
+  add_library(${_name} SHARED ${ARGN})
+  target_link_libraries(${_name}
+    ${art_IMPORT_NAMESPACE}art_Framework_Core
+    ${art_IMPORT_NAMESPACE}art_Framework_Principal
+    ${art_IMPORT_NAMESPACE}art_Persistency_Common
+    ${art_IMPORT_NAMESPACE}art_Persistency_Provenance
+    ${art_IMPORT_NAMESPACE}art_Utilities
+    FNALCore::FNALCore
+    ${ROOT_Core_Library}
+    )
+endfunction()
+
+#-----------------------------------------------------------------------
+# function art_add_source(<name> source1 source2 ... sourceN)
+#
+function(art_add_source _name)
+  if(NOT (_name MATCHES ".*_source$"))
+    message(FATAL_ERROR "art_add_source: target name must end in '_source'")
+  endif()
+
+  add_library(${_name} SHARED ${ARGN})
+  target_link_libraries(${_name}
+    ${art_IMPORT_NAMESPACE}art_Framework_Core
+    ${art_IMPORT_NAMESPACE}art_Framework_Principal
+    ${art_IMPORT_NAMESPACE}art_Framework_IO_Sources
+    ${art_IMPORT_NAMESPACE}art_Persistency_Common
+    ${art_IMPORT_NAMESPACE}art_Persistency_Provenance
+    ${art_IMPORT_NAMESPACE}art_Utilities
+    FNALCore::FNALCore
+    ${ROOT_Core_Library}
+    )
+endfunction()
+
+
+#-----------------------------------------------------------------------
+# function art_get_genreflex_flags(<var>)
+#          Set value of <var> to minimal genreflex flags for generating
+#          dictionaries from Art sources
+#function(art_get_genreflex_flags __outputvar)
+#  set(${__outputvar}
+#    --deep
+#    --iocomments
+#    --fail_on_warnings
+#    --gccxmlopt=--debug
+#    --gccxmlopt=--gccxml-compiler
+#    --gccxmlopt=${CMAKE_CXX_COMPILER}
+#    -D_REENTRANT
+#    -DGNU_SOURCE
+#    -DGNU_GCC
+#    -DPROJECT_NAME="${PROJECT_NAME}"
+#    -DPROJECT_VERSION="${art_VERSION}"
+#    -D__STRICT_ANSI__
+#
+#    PARENT_SCOPE
+#    )
+#endfunction()
+
+
+#-----------------------------------------------------------------------
+# function art_add_dictionary(<name> <selection> <sources>)
+#          Build Reflex based dictionary libraries from input headers
+#          and selection file
+#          A "dictionary" is actually two shared libs <name>_dict and
+#          <name>_map
+#
+# - Inputs: Name, headers, selection file
+#function(art_add_dictionary __name __selection)
+
+  # - Selection file may be relative to current dir or absolute
+  #  if(IS_ABSOLUTE "${__selection}")
+#    set(selection_file "${__selection}")
+#  else()
+#    set(selection_file "${CMAKE_CURRENT_SOURCE_DIR}/${__selection}")
+#  endif()
+#
+#  if(NOT EXISTS "${selection_file}")
+#    message(FATAL_ERROR "art_add_dictionary: selection file '${selection_file}' does not exist")
+#  endif()
+#
+#  # - Args may also be relative or absolute
+#  foreach(_header ${ARGN})
+#    if(NOT IS_ABSOLUTE "${_header}")
+#      set(_header "${CMAKE_CURRENT_SOURCE_DIR}/${_header}")
+#    endif()
+#
+#    if(NOT EXISTS "${_header}")
+#      message(FATAL_ERROR "art_add_dictionary: input file '${_header}' does not exist")
+#    endif()
+#
+#    list(APPEND headers "${_header}")
+#  endforeach()
+#
+#  # Flags, include directories and definitions
+#  art_get_genreflex_flags(__art_genreflex_flags)
+#
+#  # Any directory scope inc dirs
+#  set(__art_genreflex_includes "-I${CMAKE_CURRENT_SOURCE_DIR}")
+#  get_directory_property(local_incdirs INCLUDE_DIRECTORIES)
+#  foreach(_incdir ${local_incdirs})
+#    list(APPEND __art_genreflex_includes "-I${_incdir}")
+#    message(STATUS "incdirs: ${_incdir}")
+#  endforeach()
+#  set(__art_genreflex_includes "-I$<JOIN:$<TARGET_PROPERTY:${__name},INCLUDE_DIRECTORIES>,\t-I>")
+#
+#  add_custom_command(
+#    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${__name}_dict.cpp
+#           ${CMAKE_CURRENT_BINARY_DIR}/${__name}_map.cpp
+#    COMMAND ${ROOT_genreflex_CMD}
+#            ${headers}
+#            -s ${selection_file}
+#            #"-I$<JOIN:$<TARGET_PROPERTY:${__name},INCLUDE_DIRECTORIES>,\t-I>"
+#            ${__art_genreflex_includes}
+#            --capabilities=${__name}_map.cpp
+#            -o ${__name}_dict.cpp
+#    IMPLICIT_DEPENDS CXX ${headers}
+#    DEPENDS ${selectionfile}
+#    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+#
+#    )
+#
+#  # Equally, could follow Qt4 code generation style and just output
+#  # paths to output sources...
+#  add_library(${__name}_dict SHARED ${CMAKE_CURRENT_BINARY_DIR}/${__name}_dict.cpp)
+#  add_library(${__name}_map  SHARED ${CMAKE_CURRENT_BINARY_DIR}/${__name}_map.cpp)
+#endfunction()
+
+
+
+
diff --git a/art/CMakeLists.txt b/art/CMakeLists.txt
index 88c5508..3a99486 100644
--- a/art/CMakeLists.txt
+++ b/art/CMakeLists.txt
@@ -1,12 +1,12 @@
 # project name
-project(artCode)
+#project(artCode)
 
-include(ArtMake)
+#include(ArtMake)
 
 # cmake will automatically order the library builds according to declared dependencies
-add_subdirectory (Version)
-add_subdirectory (Utilities)
-add_subdirectory (Framework)
-add_subdirectory (Persistency)
-add_subdirectory (Ntuple)
+add_subdirectory(Version)
+add_subdirectory(Utilities)
+add_subdirectory(Framework)
+add_subdirectory(Persistency)
+add_subdirectory(Ntuple)
 
diff --git a/art/Framework/Art/CMakeLists.txt b/art/Framework/Art/CMakeLists.txt
index 0a0a579..9b34aff 100644
--- a/art/Framework/Art/CMakeLists.txt
+++ b/art/Framework/Art/CMakeLists.txt
@@ -1,11 +1,18 @@
-# Confgure file to handle differences for Mac.
-configure_file(${CMAKE_CURRENT_SOURCE_DIR}/check_libs.cc.in
+# - Build art_Framework_Art and main applications
+
+# - check_libs app
+configure_file(check_libs.cc.in
   ${CMAKE_CURRENT_BINARY_DIR}/check_libs.cc @ONLY
   )
+add_executable(check_libs ${CMAKE_CURRENT_BINARY_DIR}/check_libs.cc)
+target_link_libraries(check_libs
+  art_Utilities
+  FNALCore::FNALCore
+  )
 
-####################################
+# - art_Framework_Art library
 # Configure for desired default exception handling.
-SET(ART_MAIN_FUNC artapp)
+set(ART_MAIN_FUNC artapp)
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/artapp.h.in
   ${CMAKE_CURRENT_BINARY_DIR}/${ART_MAIN_FUNC}.h @ONLY
   )
@@ -14,18 +21,34 @@ configure_file(${CMAKE_CURRENT_SOURCE_DIR}/artapp.cc.in
   ${CMAKE_CURRENT_BINARY_DIR}/${ART_MAIN_FUNC}.cc @ONLY
   )
 
-SET(ART_MAIN_FUNC mu2eapp)
+set(ART_MAIN_FUNC mu2eapp)
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/artapp.h.in
   ${CMAKE_CURRENT_BINARY_DIR}/${ART_MAIN_FUNC}.h @ONLY
   )
 
-SET(ART_RETHROW_DEFAULT TRUE)
+set(ART_RETHROW_DEFAULT TRUE)
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/artapp.cc.in
   ${CMAKE_CURRENT_BINARY_DIR}/${ART_MAIN_FUNC}.cc @ONLY
   )
-####################################
 
-set(art_Framework_Art_sources
+set(art_Framework_Art_HEADERS
+  BasicOptionsHandler.h
+  BasicOutputOptionsHandler.h
+  BasicPostProcessor.h
+  BasicSourceOptionsHandler.h
+  DebugOptionsHandler.h
+  FileCatalogOptionsHandler.h
+  find_config.h
+  InitRootHandlers.h
+  OptionsHandler.h
+  OptionsHandlers.h
+  run_art.h
+  ${CMAKE_CURRENT_BINARY_DIR}/artapp.h
+  ${CMAKE_CURRENT_BINARY_DIR}/mu2eapp.h
+  )
+
+add_library(art_Framework_Art SHARED
+  ${art_Framework_Art_HEADERS}
   BasicOptionsHandler.cc
   BasicPostProcessor.cc
   BasicSourceOptionsHandler.cc
@@ -40,9 +63,9 @@ set(art_Framework_Art_sources
   run_art.cc
   )
 
-art_make_library( LIBRARY_NAME art_Framework_Art
-                  SOURCE ${art_Framework_Art_sources} 
-                  LIBRARIES ${Boost_PROGRAM_OPTIONS_LIBRARY}
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_Art
+  ${Boost_PROGRAM_OPTIONS_LIBRARY}
   art_Framework_IO_Root
   art_Framework_EventProcessor
   art_Framework_Core
@@ -50,66 +73,185 @@ art_make_library( LIBRARY_NAME art_Framework_Art
   art_Persistency_Common
   art_Persistency_Provenance
   art_Utilities
-  ${ROOT_HIST}
-  ${ROOT_MATRIX}
-  )
-
-set (ART_EXEC_ROOT_LIBS
-  ${ROOT_CINTEX}
-  ${ROOT_PHYSICS}
-  ${ROOTSYS}/lib/libGraf.so
-  ${ROOT_TREE}
-  ${ROOT_HIST}
-  ${ROOT_MATRIX}
-  ${ROOT_NET}
-  ${ROOT_MATHCORE}
-  ${ROOT_RIO}
-  ${ROOT_THREAD}
-  ${ROOT_CORE}
-  ${ROOT_CINT}
-  ${ROOT_REFLEX}
-)
-
-# Build an art exec.
-macro(art_exec TARGET_STEM IN_STEM MAIN_FUNC)
-  cet_parse_args(AE "LIBRARIES" "" ${ARGN})
-  set(ART_MAIN_FUNC ${MAIN_FUNC})
-  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${IN_STEM}.cc.in
-    ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_STEM}.cc @ONLY
-    )
-  art_make_exec(NAME ${TARGET_STEM}
-    SOURCE ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_STEM}.cc
-    ${AE_DEFAULT_ARGS}
-    LIBRARIES
-    ${AE_LIBRARIES}
-    art_Framework_Art
-    # ROOT libraries added for use convenience ONLY -- they will go away
-    # eventually.
-    ${ART_EXEC_ROOT_LIBS}
-    ${MF_MESSAGELOGGER}
-    )
-endmacro()
-
-# Standard execs
-art_exec(art art artapp)
-art_exec(gm2 art artapp)
-art_exec(lar art artapp)
-art_exec(mu2e art mu2eapp)
-art_exec(nova art artapp)
-
-# Execs with Boost unit testing enabled for modules.
-art_exec(art_ut art_ut artapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
-art_exec(gm2_ut art_ut artapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
-art_exec(lar_ut art_ut artapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
-art_exec(mu2e_ut art_ut mu2eapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
-art_exec(nova_ut art_ut artapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
-
-art_make_exec(NAME check_libs
-  SOURCE ${CMAKE_CURRENT_BINARY_DIR}/check_libs.cc
-  LIBRARIES
-  art_Utilities
-  ${CETLIB}
+  ${ROOT_Hist_LIBRARY}
+  ${ROOT_Matrix_LIBRARY}
+  )
+
+# Set any additional properties
+set_target_properties(art_Framework_Art
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+# - art program / Boost.Unit version
+set(ART_MAIN_FUNC artapp)
+configure_file(art.cc.in art.cc @ONLY)
+configure_file(art_ut.cc.in art_ut.cc @ONLY)
+
+add_executable(art ${CMAKE_CURRENT_BINARY_DIR}/art.cc)
+target_link_libraries(art
+  art_Framework_Art
+  FNALCore::FNALCore
+  )
+add_executable(art_ut ${CMAKE_CURRENT_BINARY_DIR}/art_ut.cc)
+target_link_libraries(art_ut
+  art_Framework_Art
+  FNALCore::FNALCore
+  ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY}
+  )
+
+# - art with default exception handling / Boost.Unit variant
+set(ART_MAIN_FUNC mu2eapp)
+configure_file(art.cc.in mu2e.cc @ONLY)
+configure_file(art_ut.cc.in mu2e_ut.cc @ONLY)
+
+add_executable(mu2e ${CMAKE_CURRENT_BINARY_DIR}/mu2e.cc)
+target_link_libraries(mu2e
+  art_Framework_Art
+  FNALCore::FNALCore
+  )
+add_executable(mu2e_ut ${CMAKE_CURRENT_BINARY_DIR}/mu2e_ut.cc)
+target_link_libraries(mu2e_ut
+  art_Framework_Art
+  FNALCore::FNALCore
+  ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY}
+  )
+
+# - Install the targets
+install(TARGETS
+  check_libs
+  art_Framework_Art
+  art
+  art_ut
+  mu2e
+  mu2e_ut
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+
+install(FILES ${art_Framework_Art_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Art
+  COMPONENT Development
   )
 
-install_headers()
-install_source()
+#-----------------------------------------------------------------------
+# Old Stuff
+## Confgure file to handle differences for Mac.
+#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/check_libs.cc.in
+#  ${CMAKE_CURRENT_BINARY_DIR}/check_libs.cc @ONLY
+#  )
+#
+#####################################
+## Configure for desired default exception handling.
+#SET(ART_MAIN_FUNC artapp)
+#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/artapp.h.in
+#  ${CMAKE_CURRENT_BINARY_DIR}/${ART_MAIN_FUNC}.h @ONLY
+#  )
+#
+#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/artapp.cc.in
+#  ${CMAKE_CURRENT_BINARY_DIR}/${ART_MAIN_FUNC}.cc @ONLY
+#  )
+#
+#SET(ART_MAIN_FUNC mu2eapp)
+#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/artapp.h.in
+#  ${CMAKE_CURRENT_BINARY_DIR}/${ART_MAIN_FUNC}.h @ONLY
+#  )
+#
+#SET(ART_RETHROW_DEFAULT TRUE)
+#configure_file(${CMAKE_CURRENT_SOURCE_DIR}/artapp.cc.in
+#  ${CMAKE_CURRENT_BINARY_DIR}/${ART_MAIN_FUNC}.cc @ONLY
+#  )
+#####################################
+#
+#set(art_Framework_Art_sources
+#  BasicOptionsHandler.cc
+#  BasicPostProcessor.cc
+#  BasicSourceOptionsHandler.cc
+#  BasicOutputOptionsHandler.cc
+#  DebugOptionsHandler.cc
+#  FileCatalogOptionsHandler.cc
+#  InitRootHandlers.cc
+#  OptionsHandler.cc
+#  ${CMAKE_CURRENT_BINARY_DIR}/artapp.cc
+#  ${CMAKE_CURRENT_BINARY_DIR}/mu2eapp.cc
+#  find_config.cc
+#  run_art.cc
+#  )
+#
+#art_make_library( LIBRARY_NAME art_Framework_Art
+#                  SOURCE ${art_Framework_Art_sources}
+#                  LIBRARIES ${Boost_PROGRAM_OPTIONS_LIBRARY}
+#  art_Framework_IO_Root
+#  art_Framework_EventProcessor
+#  art_Framework_Core
+#  art_Framework_Services_Registry
+#  art_Persistency_Common
+#  art_Persistency_Provenance
+#  art_Utilities
+#  ${ROOT_HIST}
+#  ${ROOT_MATRIX}
+#  )
+#
+#set (ART_EXEC_ROOT_LIBS
+#  ${ROOT_CINTEX}
+#  ${ROOT_PHYSICS}
+#  ${ROOTSYS}/lib/libGraf.so
+#  ${ROOT_TREE}
+#  ${ROOT_HIST}
+#  ${ROOT_MATRIX}
+#  ${ROOT_NET}
+#  ${ROOT_MATHCORE}
+#  ${ROOT_RIO}
+#  ${ROOT_THREAD}
+#  ${ROOT_CORE}
+#  ${ROOT_CINT}
+#  ${ROOT_REFLEX}
+#)
+#
+## Build an art exec.
+#macro(art_exec TARGET_STEM IN_STEM MAIN_FUNC)
+#  cet_parse_args(AE "LIBRARIES" "" ${ARGN})
+#  set(ART_MAIN_FUNC ${MAIN_FUNC})
+#  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${IN_STEM}.cc.in
+#    ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_STEM}.cc @ONLY
+#    )
+#  art_make_exec(NAME ${TARGET_STEM}
+#    SOURCE ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_STEM}.cc
+#    ${AE_DEFAULT_ARGS}
+#    LIBRARIES
+#    ${AE_LIBRARIES}
+#    art_Framework_Art
+#    # ROOT libraries added for use convenience ONLY -- they will go away
+#    # eventually.
+#    ${ART_EXEC_ROOT_LIBS}
+#    ${MF_MESSAGELOGGER}
+#    )
+#endmacro()
+#
+## Standard execs
+#art_exec(art art artapp)
+#art_exec(gm2 art artapp)
+#art_exec(lar art artapp)
+#art_exec(mu2e art mu2eapp)
+#art_exec(nova art artapp)
+#
+## Execs with Boost unit testing enabled for modules.
+#art_exec(art_ut art_ut artapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
+#art_exec(gm2_ut art_ut artapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
+#art_exec(lar_ut art_ut artapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
+#art_exec(mu2e_ut art_ut mu2eapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
+#art_exec(nova_ut art_ut artapp LIBRARIES ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})
+#
+#art_make_exec(NAME check_libs
+#  SOURCE ${CMAKE_CURRENT_BINARY_DIR}/check_libs.cc
+#  LIBRARIES
+#  art_Utilities
+#  ${CETLIB}
+#  )
+#
+#install_headers()
+#install_source()
diff --git a/art/Framework/CMakeLists.txt b/art/Framework/CMakeLists.txt
index db53be6..c717a53 100644
--- a/art/Framework/CMakeLists.txt
+++ b/art/Framework/CMakeLists.txt
@@ -1,7 +1,179 @@
-add_subdirectory (Art)
-add_subdirectory (Core)
-add_subdirectory (EventProcessor)
-add_subdirectory (IO)
-add_subdirectory (Modules)
-add_subdirectory (Principal)
-add_subdirectory (Services)
+#-----------------------------------------------------------------------
+# Art - builds:
+# - art_Framework_Art library
+#   - links to (list internal only)
+#     - art_Framework_IO_Root
+#     - art_Framework_EventProcessor
+#     - art_Framework_Core
+#     - art_Framework_Services_Registry
+#     - art_Persistency_Common
+#     - art_Persistency_Provenance
+#     - art_Utilities
+# - Various art execs
+#   - art ones link to art_Framework_Art
+#   - `check_libs` links to art_Utilities
+#
+add_subdirectory(Art)
+
+#-----------------------------------------------------------------------
+# Core - builds
+# - art_Framework_Core (probably, check what `art_make` does again...
+#   looks like there are no plugins, so probably just lib and dict)
+#   - links to (internal list only)
+#     - art_Framework_Services_System_CurrentModule_service
+#     - art_Framework_Services_System_TriggerNamesService_service
+#     - art_Framework_Services_Optional_RandomNumberGenerator_service
+#     - art_Framework_Principal
+#     - art_Persistency_Common
+#     - art_Persistency_Provenance
+#     - art_Framework_Services_Registry
+#     - art_Utilities
+#     - art_Version
+#
+add_subdirectory(Core)
+
+#-----------------------------------------------------------------------
+# EventProcessor - builds
+# - art_Framework_EventProcessor (probably)
+#   - links to (internal list only)
+#     - art_Framework_Services_System_CurrentModule_service
+#     - art_Framework_Services_System_FileCatalogMetadata_service
+#     - art_Framework_Services_System_FloatingPointControl_service
+#     - art_Framework_Services_System_PathSelection_service
+#     - art_Framework_Services_System_ScheduleContext_service
+#     - art_Framework_Services_System_TriggerNamesService_service
+#     - art_Framework_Core
+#     - art_Utilities
+#
+add_subdirectory(EventProcessor)
+
+#-----------------------------------------------------------------------
+# IO - builds
+# - art_Framework_IO (probably)
+#   - links to (internal list only)
+#     - art_Persistency_Provenance
+# - (subdir) art_Framework_IO_Catalog
+#   - links to
+#     - art_Framework_Services_Optional_TrivialFileDelivery_service
+#     - art_Framework_Services_Optional_TrivialFileTransfer_service
+#     - art_Utilities
+# - (subdir) art_Framework_IO_ProductMix
+#   - links to
+#     - art_Framework_IO_Root
+#     - art_Framework_Services_System_CurrentModule_service
+#     - art_Framework_Services_System_TriggerNamesService_service
+#     - art_Framework_Services_Optional_RandomNumberGenerator_service
+#     - art_Framework_Core
+#     - art_Framework_Principal
+#     - art_Framework_Services_Registry
+#     - art_Persistency_Common
+#     - art_Persistency_Provenance
+#     - art_Utilities
+# - (subdir) art_Framework_IO_Root
+#   - links to
+#     - art_Framework_Core
+#     - art_Framework_IO
+#     - art_Framework_IO_Catalog
+#     - art_Framework_Principal
+#     - art_Framework_Services_Registry
+#     - art_Persistency_Common
+#     - art_Persistency_Provenance
+#     - art_Framework_IO_RootVersion
+#   - alsobuilds
+#     - art_Framework_IO_RootVersion (lib)
+#     - RootInput (source plugin)
+#     - RootOutput (output plugin)
+#     - config_dumper (exe)
+#       - links to
+#         - art_Framework_IO_Root
+#         - art_Utilities
+#         - art_Framework_Core
+#     - sam_metadata_dumper
+#       - links to
+#         - art_Framework_IO_Root
+#         - art_Utilities
+#         - art_Framework_Core
+# - (subdir) art_Framework_IO_Sources
+#   - links to
+#     - art_Framework_Services_FileServiceInterfaces
+#     - art_Framework_Services_Registry
+#     - art_Framework_Principal
+#     - art_Persistency_Common
+#     - art_Persistency_Provenance
+#     - art_Utilities
+#
+add_subdirectory(IO)
+
+#-----------------------------------------------------------------------
+# Modules - builds
+# - BlockingPrescaler       (module plugin)
+# - EmptyEvent              (source plugin)
+# - FileDumperOutput        (module plugin)
+# - Prescaler               (module plugin)
+# - ProvenanceCheckerOutput (module plugin)
+# - RandomNumberSaver       (module plugin)
+#
+add_subdirectory(Modules)
+
+#-----------------------------------------------------------------------
+# Principal - (BUILT)
+# - art_Framework_Principal
+#   - links to
+#     - art_Persistency_Provenance
+#     - art_Persistency_Common
+#     - art_Framework_Services_Registry
+#     - art_Utilities
+#     - art_Version
+#
+add_subdirectory(Principal)
+
+#-----------------------------------------------------------------------
+# Services - builds
+# - (subdir) art_Framework_Services_Registry (BUILT)
+#   - links to
+#     - art_Utilities
+# - (subdir) art_Framework_Services_FileServiceInterfaces (BUILT)
+#   - links to
+#     - art_Framework_Services_Registry
+# - (subdir) art_Framework_Services_Optional
+#   - only links externally
+#   - alsobuilds
+#     - RandomNumberGenerator (service plugin)
+#       - links to
+#         - art_Framework_Principal
+#         - art_Persistency_Common
+#     - SimpleInteraction (service plugin)
+#       - links to
+#         - art_Framework_Services_UserInteraction
+#     - SimpleMemoryCheck (service plugin)
+#       - links to
+#         - art_Persistency_Provenance
+#     - TFileService (service plugin)
+#       - links to
+#         - art_Framework_Services_System_TriggerNamesService_service
+#         - art_Framework_Services_Optional
+#         - art_Framework_IO
+#         - art_Framework_Principal
+#     - Timing (service plugin)
+#       - links to
+#         - art_Persistency_Provenance
+#     - Tracer (service plugin)
+#       - links to
+#         - art_Persistency_Provenance
+#     - TrivialFileDelivery (service plugin)
+#     - TrivialFileTransfer (service plugin)
+# - (subdir) System (all service plugins)
+#   - CurrentModule -> art_Persistency_Provenance (BUILT)
+#   - FileCatalogMetadata (BUILT)
+#   - FloatingPointControl (BUILT)
+#   - PathSelection -> art_Framework_Core
+#   - ScheduleContext -> art_Framework_Core
+#   - TriggerNameService (BUILT)
+# - (subdir) art_Framework_Services_UserInteraction
+#   - links to
+#     - art_Framework_Core
+#     - art_Framework_Principal
+#     - art_Persistency_Provenance
+#     - art_Framework_Services_Registry
+#
+add_subdirectory(Services)
diff --git a/art/Framework/Core/CMakeLists.txt b/art/Framework/Core/CMakeLists.txt
index 21e7f9c..8771f67 100644
--- a/art/Framework/Core/CMakeLists.txt
+++ b/art/Framework/Core/CMakeLists.txt
@@ -1,20 +1,137 @@
+#-----------------------------------------------------------------------
+# Build art_Framework_Core library
+
+# - Define headers
+set(art_Framework_Core_HEADERS)
+
+# Generated headers
 foreach(ART_IPR_BASE_NAME FindOne FindMany)
   UNSET(ART_IPR_BY_PTR)
   SET(ART_IPR_CLASS_NAME ${ART_IPR_BASE_NAME})
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${ART_IPR_BASE_NAME}.h.in
     ${CMAKE_CURRENT_BINARY_DIR}/${ART_IPR_CLASS_NAME}.h
     @ONLY FORCE)
+  list(APPEND art_Framework_Core_HEADERS
+    ${CMAKE_CURRENT_BINARY_DIR}/${ART_IPR_CLASS_NAME}.h
+    )
 
   SET(ART_IPR_BY_PTR true)
   SET(ART_IPR_CLASS_NAME "${ART_IPR_BASE_NAME}P")
   configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${ART_IPR_BASE_NAME}.h.in
     ${CMAKE_CURRENT_BINARY_DIR}/${ART_IPR_CLASS_NAME}.h
     @ONLY)
+  list(APPEND art_Framework_Core_HEADERS
+    ${CMAKE_CURRENT_BINARY_DIR}/${ART_IPR_CLASS_NAME}.h
+    )
 endforeach()
 
-art_make(
-  SUBDIRS detail
-  LIB_LIBRARIES
+# - Define headers
+list(APPEND art_Framework_Core_HEADERS
+  Breakpoints.h
+  CachedProducts.h
+  CPCSentry.h
+  DecrepitRelicInputSourceImplementation.h
+  EDAnalyzer.h
+  EDFilter.h
+  EDProducer.h
+  EmptyEventTimestampPlugin.h
+  EndPathExecutor.h
+  EngineCreator.h
+  EventObserver.h
+  EventSelector.h
+  FileBlock.h
+  FileCatalogMetadataPlugin.h
+  Frameworkfwd.h
+  get_BranchDescription.h
+  GroupSelector.h
+  GroupSelectorRules.h
+  IEventProcessor.h
+  InputSourceDescription.h
+  InputSourceFactory.h
+  InputSource.h
+  InputSourceMacros.h
+  MFStatusUpdater.h
+  ModuleMacros.h
+  ModuleType.h
+  OutputModuleDescription.h
+  OutputModule.h
+  OutputWorker.h
+  Path.h
+  PathManager.h
+  PathsInfo.h
+  PrincipalCache.h
+  PrincipalMaker.h
+  ProcessingTask.h
+  ProducerBase.h
+  ProductRegistryHelper.h
+  PtrRemapper.h
+  RootDictionaryManager.h
+  Schedule.h
+  TriggerNames.h
+  TriggerReport.h
+  TriggerResultInserter.h
+  UnknownModuleException.h
+  WorkerInPath.h
+  WorkerMap.h
+  WorkerT.h
+  )
+
+# - detail headers
+set(art_Framework_Core_DETAIL_HEADERS
+  detail/getAssnsHandle.h
+  detail/IPRHelper.h
+  detail/ModuleConfigInfo.h
+  detail/ModuleFactory.h
+  detail/ModuleInPathInfo.h
+  detail/ModuleTypeDeducer.h
+  detail/OutputModuleUtils.h
+  detail/ScheduleTask.h
+  )
+
+# - Describe Library
+add_library(art_Framework_Core SHARED
+  ${art_Framework_Core_HEADERS}
+  ${art_Framework_Core_DETAIL_HEADERS}
+  Breakpoints.cc
+  CachedProducts.cc
+  DecrepitRelicInputSourceImplementation.cc
+  detail/ModuleConfigInfo.cc
+  detail/ModuleFactory.cc
+  detail/OutputModuleUtils.cc
+  detail/ScheduleTask.cc
+  EDAnalyzer.cc
+  EDFilter.cc
+  EDProducer.cc
+  EmptyEventTimestampPlugin.cc
+  EndPathExecutor.cc
+  EngineCreator.cc
+  EventObserver.cc
+  EventSelector.cc
+  FileCatalogMetadataPlugin.cc
+  get_BranchDescription.cc
+  GroupSelector.cc
+  GroupSelectorRules.cc
+  IEventProcessor.cc
+  InputSource.cc
+  InputSourceFactory.cc
+  MFStatusUpdater.cc
+  OutputModule.cc
+  OutputWorker.cc
+  Path.cc
+  PathManager.cc
+  PathsInfo.cc
+  PrincipalCache.cc
+  ProducerBase.cc
+  ProductRegistryHelper.cc
+  RootDictionaryManager.cc
+  Schedule.cc
+  TriggerNames.cc
+  TriggerResultInserter.cc
+  WorkerInPath.cc
+  )
+
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_Core
   art_Framework_Services_System_CurrentModule_service
   art_Framework_Services_System_TriggerNamesService_service
   art_Framework_Services_Optional_RandomNumberGenerator_service
@@ -24,12 +141,75 @@ art_make(
   art_Framework_Services_Registry
   art_Utilities
   art_Version
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB}
-  ${CLHEP}
-  ${TBB}
+  FNALCore::FNALCore
+  ${CLHEP_LIBRARIES}
+  ${TBB_LIBRARIES}
   )
 
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+target_include_directories(art_Framework_Core
+  PUBLIC
+   ${TBB_INCLUDE_DIRS}
+  )
+
+# Set any additional properties
+set_target_properties(art_Framework_Core
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_Core
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Framework_Core_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Core
+  COMPONENT Development
+  )
+install(FILES ${art_Framework_Core_DETAIL_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Core/detail
+  COMPONENT Development
+  )
+
+
+#-----------------------------------------------------------------------
+# Old stuff
+#
+#foreach(ART_IPR_BASE_NAME FindOne FindMany)
+#  UNSET(ART_IPR_BY_PTR)
+#  SET(ART_IPR_CLASS_NAME ${ART_IPR_BASE_NAME})
+#  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${ART_IPR_BASE_NAME}.h.in
+#    ${CMAKE_CURRENT_BINARY_DIR}/${ART_IPR_CLASS_NAME}.h
+#    @ONLY FORCE)
+#
+#  SET(ART_IPR_BY_PTR true)
+#  SET(ART_IPR_CLASS_NAME "${ART_IPR_BASE_NAME}P")
+#  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/${ART_IPR_BASE_NAME}.h.in
+#    ${CMAKE_CURRENT_BINARY_DIR}/${ART_IPR_CLASS_NAME}.h
+#    @ONLY)
+#endforeach()
+#
+#art_make(
+#  SUBDIRS detail
+#  LIB_LIBRARIES
+#  art_Framework_Services_System_CurrentModule_service
+#  art_Framework_Services_System_TriggerNamesService_service
+#  art_Framework_Services_Optional_RandomNumberGenerator_service
+#  art_Framework_Principal
+#  art_Persistency_Common
+#  art_Persistency_Provenance
+#  art_Framework_Services_Registry
+#  art_Utilities
+#  art_Version
+#  ${MF_MESSAGELOGGER}
+#  ${FHICLCPP}
+#  ${CETLIB}
+#  ${CLHEP}
+#  ${TBB}
+#  )
+#
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Framework/EventProcessor/CMakeLists.txt b/art/Framework/EventProcessor/CMakeLists.txt
index c25f798..dc8c03d 100644
--- a/art/Framework/EventProcessor/CMakeLists.txt
+++ b/art/Framework/EventProcessor/CMakeLists.txt
@@ -1,6 +1,29 @@
-art_make(
-  SUBDIRS detail
-  LIB_LIBRARIES
+# - Build art_Framework_EventProcessor
+
+set(art_Framework_EventProcessor_HEADERS
+  EPStates.h
+  EventProcessor.h
+  EvProcInitHelper.h
+  ServiceDirector.h
+  )
+
+set(art_Framework_EventProcessor_DETAIL_HEADERS
+  detail/writeSummary.h
+  )
+
+# Define library
+add_library(art_Framework_EventProcessor SHARED
+  ${art_Framework_EventProcessor_HEADERS}
+  ${art_Framework_EventProcessor_DETAIL_HEADERS}
+  EPStates.cc
+  EventProcessor.cc
+  EvProcInitHelper.cc
+  ServiceDirector.cc
+  detail/writeSummary.cc
+  )
+
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_EventProcessor
   art_Framework_Services_System_CurrentModule_service
   art_Framework_Services_System_FileCatalogMetadata_service
   art_Framework_Services_System_FloatingPointControl_service
@@ -9,8 +32,55 @@ art_make(
   art_Framework_Services_System_TriggerNamesService_service
   art_Framework_Core
   art_Utilities
-  ${CETLIB}
+  FNALCore::FNALCore
+  ${TBB_LIBRARIES}
+  )
+
+target_include_directories(art_Framework_EventProcessor
+  PUBLIC
+   ${TBB_INCLUDE_DIRS}
+  )
+
+# Set any additional properties
+set_target_properties(art_Framework_EventProcessor
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_EventProcessor
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Framework_EventProcessor_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/EventProcessor
+  COMPONENT Development
   )
+install(FILES ${art_Framework_EventProcessor_DETAIL_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/EventProcessor
+  COMPONENT Development
+  )
+
 
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+#-----------------------------------------------------------------------
+# Old stuff
+#
+#art_make(
+#  SUBDIRS detail
+#  LIB_LIBRARIES
+#  art_Framework_Services_System_CurrentModule_service
+#  art_Framework_Services_System_FileCatalogMetadata_service
+#  art_Framework_Services_System_FloatingPointControl_service
+#  art_Framework_Services_System_PathSelection_service
+#  art_Framework_Services_System_ScheduleContext_service
+#  art_Framework_Services_System_TriggerNamesService_service
+#  art_Framework_Core
+#  art_Utilities
+#  ${CETLIB}
+#  )
+#
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Framework/IO/CMakeLists.txt b/art/Framework/IO/CMakeLists.txt
index 84148c9..7064780 100644
--- a/art/Framework/IO/CMakeLists.txt
+++ b/art/Framework/IO/CMakeLists.txt
@@ -1,18 +1,65 @@
-# project name
-project(art_Framework_IO)
+# Build art_Framework_IO and sub libraries
+
+# Define library
+add_library(art_Framework_IO SHARED
+  FileStatsCollector.h
+  FileStatsCollector.cc
+  PostCloseFileRenamer.h
+  PostCloseFileRenamer.cc
+  )
 
-art_make(LIB_LIBRARIES
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_IO
   art_Persistency_Provenance
   ${Boost_DATE_TIME_LIBRARY}
   ${Boost_FILESYSTEM_LIBRARY}
-  ${Boost_REGEXLIBRARY}
-)
+  ${Boost_SYSTEM_LIBRARY}
+  ${Boost_REGEX_LIBRARY}
+  )
+
+# Set any additional properties
+set_target_properties(art_Framework_IO
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_IO
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES FileStatsCollector.h PostCloseFileRenamer.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/IO
+  COMPONENT Development
+  )
+
+# Build subcomponents
+add_subdirectory(Catalog)
+add_subdirectory(Root)
+add_subdirectory(Sources)
+add_subdirectory(ProductMix)
+
+#-----------------------------------------------------------------------
+# Old stuff
+#
+# project name
+#project(art_Framework_IO)
+#
+#art_make(LIB_LIBRARIES
+#  art_Persistency_Provenance
+#  ${Boost_DATE_TIME_LIBRARY}
+#  ${Boost_FILESYSTEM_LIBRARY}
+#  ${Boost_REGEXLIBRARY}
+#)
 
-install_headers()
-install_source()
+#install_headers()
+#install_source()
 
 # build art_Framework_IO libraries
-add_subdirectory (Catalog)
-add_subdirectory (ProductMix)
-add_subdirectory (Root)
-add_subdirectory (Sources)
+#add_subdirectory (Catalog)
+#add_subdirectory (ProductMix)
+#add_subdirectory (Root)
+#add_subdirectory (Sources)
diff --git a/art/Framework/IO/Catalog/CMakeLists.txt b/art/Framework/IO/Catalog/CMakeLists.txt
index 75bebb0..9743fa5 100644
--- a/art/Framework/IO/Catalog/CMakeLists.txt
+++ b/art/Framework/IO/Catalog/CMakeLists.txt
@@ -1,24 +1,65 @@
-set(art_Framework_IO_Catalog_sources
+# Build art_Framework_IO_Catalog library
+
+add_library(art_Framework_IO_Catalog SHARED
+  FileCatalog.h
+  InputFileCatalog.h
   FileCatalog.cc
   InputFileCatalog.cc
   )
 
-#link_libraries(
-#  art_Utilities
-#  ${Boost_FILESYSTEM_LIBRARY}
-#  )
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_IO_Catalog
+   art_Framework_Services_Optional_TrivialFileDelivery_service
+   art_Framework_Services_Optional_TrivialFileTransfer_service
+   art_Utilities
+   ${Boost_FILESYSTEM_LIBRARY}
+   )
+
+ # Set any additional properties
+set_target_properties(art_Framework_IO_Catalog
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_IO_Catalog
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES FileCatalog.h InputFileCatalog.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/IO/Catalog
+  COMPONENT Development
+  )
 
-art_make_library( LIBRARY_NAME art_Framework_IO_Catalog
-                  SOURCE ${art_Framework_IO_Catalog_sources}
-                  LIBRARIES art_Framework_Services_Optional_TrivialFileDelivery_service
-  art_Framework_Services_Optional_TrivialFileTransfer_service
-  art_Utilities
-  ${Boost_FILESYSTEM_LIBRARY}
-)
 
-install_headers()
-#install(FILES FileCatalog.h
-#              InputFileCatalog.h
-#         DESTINATION  ${product}/${version}/include/art/Framework/IO/Catalog )
 
-install_source()
+#-----------------------------------------------------------------------
+# Old stuff
+#
+#set(art_Framework_IO_Catalog_sources
+#  FileCatalog.cc
+#  InputFileCatalog.cc
+#  )
+#
+##link_libraries(
+##  art_Utilities
+##  ${Boost_FILESYSTEM_LIBRARY}
+##  )
+#
+#art_make_library( LIBRARY_NAME art_Framework_IO_Catalog
+#                  SOURCE ${art_Framework_IO_Catalog_sources}
+#                  LIBRARIES art_Framework_Services_Optional_TrivialFileDelivery_service
+#  art_Framework_Services_Optional_TrivialFileTransfer_service
+#  art_Utilities
+#  ${Boost_FILESYSTEM_LIBRARY}
+#)
+#
+#install_headers()
+##install(FILES FileCatalog.h
+##              InputFileCatalog.h
+##         DESTINATION  ${product}/${version}/include/art/Framework/IO/Catalog )
+#
+#install_source()
diff --git a/art/Framework/IO/ProductMix/CMakeLists.txt b/art/Framework/IO/ProductMix/CMakeLists.txt
index b9f18fb..a948707 100644
--- a/art/Framework/IO/ProductMix/CMakeLists.txt
+++ b/art/Framework/IO/ProductMix/CMakeLists.txt
@@ -1,7 +1,23 @@
+# - Build art_Framework_IO_ProductMix library
 
-art_make_library( LIBRARY_NAME art_Framework_IO_ProductMix
-                  SOURCE MixHelper.cc ProdToProdMapBuilder.cc
-                  LIBRARIES art_Framework_IO_Root
+set(art_Framework_IO_ProductMix_HEADERS
+  MixContainerTypes.h
+  MixHelper.h
+  MixOpBase.h
+  MixOp.h
+  ProdToProdMapBuilder.h
+  )
+
+# Define library
+add_library(art_Framework_IO_ProductMix SHARED
+  ${art_Framework_IO_ProductMix_HEADERS}
+  MixHelper.cc
+  ProdToProdMapBuilder.cc
+  )
+
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_IO_ProductMix
+  art_Framework_IO_Root
   art_Framework_Services_System_CurrentModule_service
   art_Framework_Services_System_TriggerNamesService_service
   art_Framework_Services_Optional_RandomNumberGenerator_service
@@ -11,12 +27,55 @@ art_make_library( LIBRARY_NAME art_Framework_IO_ProductMix
   art_Persistency_Common
   art_Persistency_Provenance
   art_Utilities
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB}
+  FNALCore::FNALCore
+  )
+
+# Set any additional properties
+set_target_properties(art_Framework_IO_ProductMix
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+# - Dictify
+#
+art_add_dictionary(DICTIONARY_LIBRARIES art_Persistency_Provenance)
+
+install(TARGETS art_Framework_IO_ProductMix art_Framework_IO_ProductMix_dict
+  art_Framework_IO_ProductMix_map
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Framework_IO_ProductMix_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/IO/ProductMix
+  COMPONENT Development
   )
 
-art_dictionary(DICTIONARY_LIBRARIES art_Persistency_Provenance)
 
-install_headers()
-install_source()
+#-----------------------------------------------------------------------
+# Old stuff
+#
+#art_make_library( LIBRARY_NAME art_Framework_IO_ProductMix
+#                  SOURCE MixHelper.cc ProdToProdMapBuilder.cc
+#                  LIBRARIES art_Framework_IO_Root
+#  art_Framework_Services_System_CurrentModule_service
+#  art_Framework_Services_System_TriggerNamesService_service
+#  art_Framework_Services_Optional_RandomNumberGenerator_service
+#  art_Framework_Core
+#  art_Framework_Principal
+#  art_Framework_Services_Registry
+#  art_Persistency_Common
+#  art_Persistency_Provenance
+#  art_Utilities
+#  ${MF_MESSAGELOGGER}
+#  ${FHICLCPP}
+#  ${CETLIB}
+#  )
+#
+#art_dictionary(DICTIONARY_LIBRARIES art_Persistency_Provenance)
+#
+#install_headers()
+#install_source()
diff --git a/art/Framework/IO/Root/CMakeLists.txt b/art/Framework/IO/Root/CMakeLists.txt
index 9aff6e5..5014e67 100644
--- a/art/Framework/IO/Root/CMakeLists.txt
+++ b/art/Framework/IO/Root/CMakeLists.txt
@@ -1,14 +1,69 @@
-art_make_library( LIBRARY_NAME art_Framework_IO_RootVersion
-                  SOURCE GetFileFormatEra.cc GetFileFormatVersion.cc
-)
+# - Build art_Framework_IO_Root{Version} plus modules/apps
 
-art_make(EXCLUDE
+# - art_Framework_IO_RootVersion
+add_library(art_Framework_IO_RootVersion SHARED
+  GetFileFormatEra.h
+  GetFileFormatVersion.h
   GetFileFormatEra.cc
   GetFileFormatVersion.cc
-  config_dumper.cc
-  sam_metadata_dumper.cc
-  NO_PLUGINS
-  LIB_LIBRARIES 
+  )
+
+# Set any additional properties
+set_target_properties(art_Framework_IO_RootVersion
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_IO_RootVersion
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES GetFileFormatEra.h GetFileFormatVersion.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/IO/Root
+  COMPONENT Development
+  )
+
+# - art_Framework_IO_Root
+set(art_Framework_IO_Root_HEADERS
+  BranchMapperWithReader.h
+  DuplicateChecker.h
+  FastCloningInfoProvider.h
+  Inputfwd.h
+  RefCoreStreamer.h
+  RootBranchInfo.h
+  RootBranchInfoList.h
+  RootDelayedReader.h
+  RootInputFile.h
+  RootInputFileSequence.h
+  rootNames.h
+  RootOutputFile.h
+  RootOutputTree.h
+  RootTree.h
+  setMetaDataBranchAddress.h
+  )
+
+add_library(art_Framework_IO_Root SHARED
+  ${art_Framework_IO_Root_HEADERS}
+  DuplicateChecker.cc
+  FastCloningInfoProvider.cc
+  RefCoreStreamer.cc
+  RootBranchInfo.cc
+  RootBranchInfoList.cc
+  RootDelayedReader.cc
+  RootInputFile.cc
+  RootInputFileSequence.cc
+  rootNames.cc
+  RootOutputFile.cc
+  RootOutputTree.cc
+  RootTree.cc
+  )
+
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_IO_Root
   art_Framework_Core
   art_Framework_IO
   art_Framework_IO_Catalog
@@ -17,30 +72,169 @@ art_make(EXCLUDE
   art_Persistency_Common
   art_Persistency_Provenance
   art_Framework_IO_RootVersion
-  ${ROOT_TREE}
-  ${ROOT_NET}
-  ${ROOT_MATHCORE}
-)
+  ${ROOT_Tree_LIBRARY}
+  ${ROOT_Net_LIBRARY}
+  ${ROOT_MatchCore_LIBRARY}
+  )
+
+# Set any additional properties
+set_target_properties(art_Framework_IO_Root
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_IO_Root
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Framework_IO_Root_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/IO/Root
+  COMPONENT Development
+  )
+
+# - art_Framework_IO_RootInput_source
+add_library(art_Framework_IO_RootInput_source SHARED
+  RootInput.h
+  RootInput_source.cc
+  )
+target_link_libraries(art_Framework_IO_RootInput_source
+  art_Framework_IO_Root
+  art_Framework_IO_Catalog
+  )
+# Set any additional properties
+set_target_properties(art_Framework_IO_RootInput_source
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_IO_RootInput_source
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES RootInput.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/IO/Root
+  COMPONENT Development
+  )
+
+
+# art_Framework_IO_RootOutput_module
+add_library(art_Framework_IO_RootOutput_module SHARED
+  RootOutput.h
+  RootOutput_module.cc
+  )
+target_link_libraries(art_Framework_IO_RootOutput_module
+  art_Framework_IO_Root
+  )
+# Set any additional properties
+set_target_properties(art_Framework_IO_RootOutput_module
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
 
-simple_plugin(RootInput "source" art_Framework_IO_Root art_Framework_IO_Catalog )
-simple_plugin(RootOutput "module" art_Framework_IO_Root)
+install(TARGETS art_Framework_IO_RootOutput_module
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES RootOutput.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/IO/Root
+  COMPONENT Development
+  )
 
-art_make_exec( NAME config_dumper
-  LIBRARIES art_Framework_IO_Root
+
+# config_dumper
+add_executable(config_dumper config_dumper.cc)
+target_link_libraries(config_dumper
+  art_Framework_IO_Root
   art_Utilities
   art_Framework_Core
   ${Boost_PROGRAM_OPTIONS_LIBRARY}
-  ${ROOT_TREE}
-  ${ROOT_RIO}
+  ${ROOT_Tree_LIBRARY}
+  ${ROOT_RIO_LIBRARY}
+  )
+install(TARGETS config_dumper
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
   )
 
-art_make_exec( NAME sam_metadata_dumper
-  LIBRARIES art_Framework_IO_Root
+# sam_metadata_dumper
+add_executable(sam_metadata_dumper sam_metadata_dumper.cc)
+target_link_libraries(sam_metadata_dumper
+  art_Framework_IO_Root
   art_Utilities
   art_Framework_Core
   ${Boost_PROGRAM_OPTIONS_LIBRARY}
-  ${ROOT_RIO}
+  ${ROOT_RIO_LIBRARY}
   )
+install(TARGETS sam_metadata_dumper
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+
 
-install_headers()
-install_source()
+#-----------------------------------------------------------------------
+# Old stuff
+#
+#art_make_library( LIBRARY_NAME art_Framework_IO_RootVersion
+#                  SOURCE GetFileFormatEra.cc GetFileFormatVersion.cc
+#)
+#
+#art_make(EXCLUDE
+#  GetFileFormatEra.cc
+#  GetFileFormatVersion.cc
+#  config_dumper.cc
+#  sam_metadata_dumper.cc
+#  NO_PLUGINS
+#  LIB_LIBRARIES
+#  art_Framework_Core
+#  art_Framework_IO
+#  art_Framework_IO_Catalog
+#  art_Framework_Principal
+#  art_Framework_Services_Registry
+#  art_Persistency_Common
+#  art_Persistency_Provenance
+#  art_Framework_IO_RootVersion
+#  ${ROOT_TREE}
+#  ${ROOT_NET}
+#  ${ROOT_MATHCORE}
+#)
+#
+#simple_plugin(RootInput "source" art_Framework_IO_Root art_Framework_IO_Catalog )
+#simple_plugin(RootOutput "module" art_Framework_IO_Root)
+#
+#art_make_exec( NAME config_dumper
+#  LIBRARIES art_Framework_IO_Root
+#  art_Utilities
+#  art_Framework_Core
+#  ${Boost_PROGRAM_OPTIONS_LIBRARY}
+#  ${ROOT_TREE}
+#  ${ROOT_RIO}
+#  )
+#
+#art_make_exec( NAME sam_metadata_dumper
+#  LIBRARIES art_Framework_IO_Root
+#  art_Utilities
+#  art_Framework_Core
+#  ${Boost_PROGRAM_OPTIONS_LIBRARY}
+#  ${ROOT_RIO}
+#  )
+#
+#install_headers()
+#install_source()
diff --git a/art/Framework/IO/Sources/CMakeLists.txt b/art/Framework/IO/Sources/CMakeLists.txt
index 74762f5..708f719 100644
--- a/art/Framework/IO/Sources/CMakeLists.txt
+++ b/art/Framework/IO/Sources/CMakeLists.txt
@@ -1,6 +1,28 @@
-art_make(LIBRARY_NAME art_Framework_IO_Sources
-  SUBDIRS detail
-  LIB_LIBRARIES art_Framework_Services_FileServiceInterfaces
+# - Build art_Framework_IO_Sources library
+
+set(art_Framework_IO_Sources_HEADERS
+  put_product_in_principal.h
+  Source.h
+  SourceHelper.h
+  SourceTraits.h
+  )
+
+set(art_Framework_IO_Sources_DETAIL_HEADERS
+  detail/FileNamesHandler.h
+  detail/FileServiceProxy.h
+  )
+
+# Define library
+add_library(art_Framework_IO_Sources SHARED
+  ${art_Framework_IO_Sources_HEADERS}
+  ${art_Framework_IO_Sources_DETAIL_HEADERS}
+  SourceHelper.cc
+  detail/FileServiceProxy.cc
+  )
+
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_IO_Sources
+  art_Framework_Services_FileServiceInterfaces
   art_Framework_Services_Registry
   art_Framework_Principal
   art_Persistency_Common
@@ -8,5 +30,41 @@ art_make(LIBRARY_NAME art_Framework_IO_Sources
   art_Utilities
   )
 
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+# Set any additional properties
+set_target_properties(art_Framework_IO_Sources
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_IO_Sources
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Framework_IO_Sources_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/IO/Sources
+  COMPONENT Development
+  )
+install(FILES ${art_Framework_IO_Sources_DETAIL_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/IO/Sources/detail
+  COMPONENT Development
+  )
+
+#-----------------------------------------------------------------------
+# Old Stuff
+#
+#art_make(LIBRARY_NAME art_Framework_IO_Sources
+#  SUBDIRS detail
+#  LIB_LIBRARIES art_Framework_Services_FileServiceInterfaces
+#  art_Framework_Services_Registry
+#  art_Framework_Principal
+#  art_Persistency_Common
+#  art_Persistency_Provenance
+#  art_Utilities
+#  )
+#
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Framework/Modules/CMakeLists.txt b/art/Framework/Modules/CMakeLists.txt
index e134fcd..9d00a4d 100644
--- a/art/Framework/Modules/CMakeLists.txt
+++ b/art/Framework/Modules/CMakeLists.txt
@@ -1,14 +1,134 @@
-# project name
-project(art_Framework_Modules)
+# - Build art_Framework_Modules modules
 
-simple_plugin(BlockingPrescaler       "module")
-simple_plugin(EmptyEvent              "source")
-simple_plugin(FileDumperOutput        "module")
-simple_plugin(Prescaler               "module")
-simple_plugin(ProvenanceCheckerOutput "module")
-simple_plugin(RandomNumberSaver       "module")
+# - BlockingPrescaler
+add_library(art_Framework_Modules_BlockingPrescaler_module SHARED
+  BlockingPrescaler_module.cc
+  )
+target_link_libraries(art_Framework_Modules_BlockingPrescaler_module
+  art_Framework_Core
+  art_Framework_Principal
+  art_Persistency_Common
+  art_Persistency_Provenance
+  art_Utilities
+  FNALCore::FNALCore
+  )
 
-art_dictionary(DICTIONARY_LIBRARIES art_Persistency_Common)
+# - EmptyEvent
+add_library(art_Framework_Modules_EmptyEvent_source SHARED
+  EmptyEvent_source.cc
+  )
+target_link_libraries(art_Framework_Modules_EmptyEvent_source
+  art_Framework_Core
+  art_Framework_Principal
+  art_Persistency_Common
+  art_Persistency_Provenance
+  art_Utilities
+  FNALCore::FNALCore
+  )
 
-install_headers()
-install_source()
+# - FileDumperOutput
+add_library(art_Framework_Modules_FileDumperOutput_module SHARED
+  FileDumperOutput_module.cc
+  )
+target_link_libraries(art_Framework_Modules_FileDumperOutput_module
+  art_Framework_Core
+  art_Framework_Principal
+  art_Persistency_Common
+  art_Persistency_Provenance
+  art_Utilities
+  FNALCore::FNALCore
+  )
+
+# - Prescaler
+add_library(art_Framework_Modules_Prescaler_module SHARED
+  Prescaler_module.cc
+  )
+target_link_libraries(art_Framework_Modules_Prescaler_module
+  art_Framework_Core
+  art_Framework_Principal
+  art_Persistency_Common
+  art_Persistency_Provenance
+  art_Utilities
+  FNALCore::FNALCore
+  )
+
+# - ProvenanceCheckerOutput
+add_library(art_Framework_Modules_ProvenanceCheckerOutput_module SHARED
+  ProvenanceCheckerOutput_module.cc
+  )
+target_link_libraries(art_Framework_Modules_ProvenanceCheckerOutput_module
+  art_Framework_Core
+  art_Framework_Principal
+  art_Persistency_Common
+  art_Persistency_Provenance
+  art_Utilities
+  FNALCore::FNALCore
+  )
+
+# - RandomNumberSaver
+add_library(art_Framework_Modules_RandomNumberSaver_module SHARED
+  RandomNumberSaver_module.cc
+  )
+target_link_libraries(art_Framework_Modules_RandomNumberSaver_module
+  art_Framework_Core
+  art_Framework_Principal
+  art_Persistency_Common
+  art_Persistency_Provenance
+  art_Utilities
+  FNALCore::FNALCore
+  )
+
+# - Set properties
+set_target_properties(
+  art_Framework_Modules_BlockingPrescaler_module
+  art_Framework_Modules_EmptyEvent_source
+  art_Framework_Modules_FileDumperOutput_module
+  art_Framework_Modules_Prescaler_module
+  art_Framework_Modules_ProvenanceCheckerOutput_module
+  art_Framework_Modules_RandomNumberSaver_module
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+# - Dictify
+art_add_dictionary(DICTIONARY_LIBRARIES art_Persistency_Common)
+
+# - Install targets, files
+install(TARGETS
+  art_Framework_Modules_BlockingPrescaler_module
+  art_Framework_Modules_EmptyEvent_source
+  art_Framework_Modules_FileDumperOutput_module
+  art_Framework_Modules_Prescaler_module
+  art_Framework_Modules_ProvenanceCheckerOutput_module
+  art_Framework_Modules_RandomNumberSaver_module
+  art_Framework_Modules_dict
+  art_Framework_Modules_map
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES MixFilter.h ProvenanceDumper.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Modules
+  COMPONENT Development
+  )
+
+#-----------------------------------------------------------------------
+# Old Stuff
+#
+## project name
+#project(art_Framework_Modules)
+#
+#simple_plugin(BlockingPrescaler       "module")
+#simple_plugin(EmptyEvent              "source")
+#simple_plugin(FileDumperOutput        "module")
+#simple_plugin(Prescaler               "module")
+#simple_plugin(ProvenanceCheckerOutput "module")
+#simple_plugin(RandomNumberSaver       "module")
+#
+#art_dictionary(DICTIONARY_LIBRARIES art_Persistency_Common)
+#
+#install_headers()
+#install_source()
diff --git a/art/Framework/Principal/CMakeLists.txt b/art/Framework/Principal/CMakeLists.txt
index ea91197..bbfc70b 100644
--- a/art/Framework/Principal/CMakeLists.txt
+++ b/art/Framework/Principal/CMakeLists.txt
@@ -1,4 +1,43 @@
-set(art_Framework_Principal_sources
+# - Build art_Framework_Principal lib
+# Define headers
+set(art_Framework_Principal_HEADERS
+  ActionCodes.h
+  Actions.h
+  AssnsGroup.h
+  CurrentProcessingContext.h
+  DataViewImpl.h
+  DeferredProductGetter.h
+  Event.h
+  EventPrincipal.h
+  fwd.h
+  GroupFactory.h
+  Group.h
+  Handle.h
+  NoDelayedReader.h
+  OccurrenceTraits.h
+  OutputHandle.h
+  Principal.h
+  Provenance.h
+  Run.h
+  RunPrincipal.h
+  RunStopwatch.h
+  SelectorBase.h
+  Selector.h
+  SubRun.h
+  SubRunPrincipal.h
+  View.h
+  Worker.h
+  WorkerParams.h
+  )
+
+set(art_Framework_Principal_DETAIL_HEADERS
+  detail/maybe_record_parents.h
+  )
+
+# Describe library
+add_library(art_Framework_Principal SHARED
+  ${art_Framework_Principal_HEADERS}
+  ${art_Framework_Principal_DETAIL_HEADERS}
   Actions.cc
   AssnsGroup.cc
   CurrentProcessingContext.cc
@@ -13,25 +52,89 @@ set(art_Framework_Principal_sources
   Provenance.cc
   Run.cc
   RunPrincipal.cc
-  Selector.cc
   SelectorBase.cc
+  Selector.cc
   SubRun.cc
   SubRunPrincipal.cc
   Worker.cc
-)
+  )
 
-art_make_library( LIBRARY_NAME art_Framework_Principal
-                  SOURCE ${art_Framework_Principal_sources}
-                  LIBRARIES art_Persistency_Provenance
+# Describe library include interface
+target_include_directories(art_Framework_Principal
+  PUBLIC
+   ${CLHEP_INCLUDE_DIRS}
+  )
+
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_Principal
+  art_Version
+  art_Utilities
   art_Persistency_Common
   art_Framework_Services_Registry
-  art_Utilities
-  art_Version
-  ${MF_MESSAGELOGGER}
-  ${FHICLCPP}
-  ${CETLIB}
-  ${CLHEP}
-)
-
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+  FNALCore::FNALCore
+  ${CLHEP_LIBRARIES}
+  )
+
+# Set any additional properties
+set_target_properties(art_Framework_Principal
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_Principal
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Framework_Principal_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Principal
+  COMPONENT Development
+  )
+install(FILES ${art_Framework_Principal_DETAIL_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Principal/detail
+  COMPONENT Development
+  )
+
+#-----------------------------------------------------------------------
+# Old stuff
+#
+#set(art_Framework_Principal_sources
+#  Actions.cc
+#  AssnsGroup.cc
+#  CurrentProcessingContext.cc
+#  DataViewImpl.cc
+#  DeferredProductGetter.cc
+#  Event.cc
+#  EventPrincipal.cc
+#  Group.cc
+#  GroupFactory.cc
+#  NoDelayedReader.cc
+#  Principal.cc
+#  Provenance.cc
+#  Run.cc
+#  RunPrincipal.cc
+#  Selector.cc
+#  SelectorBase.cc
+#  SubRun.cc
+#  SubRunPrincipal.cc
+#  Worker.cc
+#)
+#
+#art_make_library( LIBRARY_NAME art_Framework_Principal
+#                  SOURCE ${art_Framework_Principal_sources}
+#                  LIBRARIES art_Persistency_Provenance
+#  art_Persistency_Common
+#  art_Framework_Services_Registry
+#  art_Utilities
+#  art_Version
+#  ${MF_MESSAGELOGGER}
+#  ${FHICLCPP}
+#  ${CETLIB}
+#  ${CLHEP}
+#)
+
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Framework/Services/CMakeLists.txt b/art/Framework/Services/CMakeLists.txt
index b495c6a..21eadee 100644
--- a/art/Framework/Services/CMakeLists.txt
+++ b/art/Framework/Services/CMakeLists.txt
@@ -1,6 +1,6 @@
 # build art_Framework_Services libraries
-add_subdirectory (FileServiceInterfaces)
-add_subdirectory (Optional)
-add_subdirectory (Registry)
-add_subdirectory (System)
-add_subdirectory (UserInteraction)
+add_subdirectory(FileServiceInterfaces)
+add_subdirectory(Optional)
+add_subdirectory(Registry)
+add_subdirectory(System)
+add_subdirectory(UserInteraction)
diff --git a/art/Framework/Services/FileServiceInterfaces/CMakeLists.txt b/art/Framework/Services/FileServiceInterfaces/CMakeLists.txt
index 36fa18b..83625c9 100644
--- a/art/Framework/Services/FileServiceInterfaces/CMakeLists.txt
+++ b/art/Framework/Services/FileServiceInterfaces/CMakeLists.txt
@@ -1,13 +1,60 @@
-set(art_Framework_Services_FileServiceInterfaces_sources
+# - Build art_Framework_Services_FileServiceInterfaces lib
+# Define headers
+set(art_Framework_Services_FileServiceInterfaces_HEADERS
+  CatalogInterface.h
+  FileDeliveryStatus.h
+  FileDisposition.h
+  FileTransfer.h
+  FileTransferStatus.h
+  )
+
+# Describe library
+add_library(art_Framework_Services_FileServiceInterfaces SHARED
+  ${art_Framework_Services_FileServiceInterfaces_HEADERS}
   FileDeliveryStatus.cc
   FileDisposition.cc
   FileTransferStatus.cc
-)
+  )
+
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_Services_FileServiceInterfaces
+  art_Framework_Services_Registry
+  FNALCore::FNALCore
+  )
 
-art_make_library(SOURCE ${art_Framework_Services_FileServiceInterfaces_sources}
-  LIBRARIES art_Framework_Services_Registry
-  ${FHICLCPP}
+# Set any additional properties
+set_target_properties(art_Framework_Services_FileServiceInterfaces
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
   )
 
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+install(TARGETS art_Framework_Services_FileServiceInterfaces
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Framework_Services_FileServiceInterfaces_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/FileServiceInterfaces
+  COMPONENT Development
+  )
+
+
+#-----------------------------------------------------------------------
+# OLD STUFF
+#
+#set(art_Framework_Services_FileServiceInterfaces_sources
+#  FileDeliveryStatus.cc
+#  FileDisposition.cc
+#  FileTransferStatus.cc
+#)
+#
+#art_make_library(SOURCE ${art_Framework_Services_FileServiceInterfaces_sources}
+#  LIBRARIES art_Framework_Services_Registry
+#  ${FHICLCPP}
+#  )
+#
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Framework/Services/Optional/CMakeLists.txt b/art/Framework/Services/Optional/CMakeLists.txt
index 5e7f08d..d9abacf 100644
--- a/art/Framework/Services/Optional/CMakeLists.txt
+++ b/art/Framework/Services/Optional/CMakeLists.txt
@@ -1,43 +1,297 @@
-set( art_Framework_Services_Optional_sources
+# - Build art_Framework_Services_Optional lib and plugins
+
+# - art_Framework_Services_Optional
+add_library(art_Framework_Services_Optional SHARED
+  TFileDirectory.h
   TFileDirectory.cc
+  detail/TH1AddDirectorySentry.h
   detail/TH1AddDirectorySentry.cc
-)
-
-art_make_library(# LIBRARY_NAME art_Framework_Services_Optional
-                  SOURCE ${art_Framework_Services_Optional_sources}
-                  LIBRARIES ${CETLIB}
-  ${ROOT_HIST}
-  ${ROOT_MATRIX}
-  ${ROOT_MATHCORE}
-  ${ROOT_CORE}
-  ${ROOT_CINT}
-  ${Boost_FILESYSTEM_LIBRARY}
-  ${Boost_REGEX_LIBRARY}
-  ${Boost_SYSTEM_LIBRARY}
-)
-
-simple_plugin(RandomNumberGenerator "service"
+  )
+
+target_link_libraries(art_Framework_Services_Optional
+  FNALCore::FNALCore
+  ${ROOT_Core_LIBRARY}
+  ${ROOT_Hist_LIBRARY}
+  )
+target_include_directories(art_Framework_Services_Optional
+  PUBLIC
+   ${ROOT_INCLUDE_DIRS}
+  )
+set_target_properties(art_Framework_Services_Optional
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+install(TARGETS art_Framework_Services_Optional
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES TFileDirectory.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/Optional
+  COMPONENT Development
+  )
+install(FILES detail/TH1AddDirectorySentry.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/Optional/detail
+  COMPONENT Development
+  )
+
+# - RandomNumberGeneratorService
+add_library(art_Framework_Services_Optional_RandomNumberGenerator_service
+  SHARED
+  RandomNumberGenerator.h
+  RandomNumberGenerator_service.cc
+  )
+target_link_libraries(art_Framework_Services_Optional_RandomNumberGenerator_service
+  FNALCore::FNALCore
+  ${CLHEP_LIBRARIES}
   art_Framework_Principal
-  art_Persistency_Common
-  ${MF_MESSAGELOGGER}
-  ${MF_UTILITIES}
-  ${CETLIB}
-  ${CLHEP}
+  )
+set_target_properties(art_Framework_Services_Optional_RandomNumberGenerator_service
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+install(TARGETS art_Framework_Services_Optional_RandomNumberGenerator_service
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES RandomNumberGenerator.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/Optional
+  COMPONENT Development
+  )
+
+# - SimpleInteraction_service
+add_library(art_Framework_Services_Optional_SimpleInteraction_service
+  SHARED
+  SimpleInteraction.h
+  SimpleInteraction_service.cc
+  )
+target_link_libraries(art_Framework_Services_Optional_SimpleInteraction_service
+  art_Framework_Services_UserInteraction
+  )
+set_target_properties(art_Framework_Services_Optional_SimpleInteraction_service
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+install(TARGETS art_Framework_Services_Optional_SimpleInteraction_service
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES SimpleInteraction.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/Optional
+  COMPONENT Development
   )
 
-simple_plugin(SimpleInteraction "service" art_Framework_Services_UserInteraction)
-simple_plugin(SimpleMemoryCheck "service" art_Persistency_Provenance)
-simple_plugin(TFileService "service"
+# - SimpleMemoryCheck_service
+add_library(art_Framework_Services_Optional_SimpleMemoryCheck_service
+  SHARED
+  SimpleMemoryCheck_service.cc
+  )
+target_link_libraries(art_Framework_Services_Optional_SimpleMemoryCheck_service
+  art_Persistency_Provenance
+  )
+set_target_properties(art_Framework_Services_Optional_SimpleMemoryCheck_service
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+install(TARGETS art_Framework_Services_Optional_SimpleMemoryCheck_service
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+
+# - TFileService_service
+#simple_plugin(TFileService "service"
+#  art_Framework_Services_System_TriggerNamesService_service
+#  art_Framework_Services_Optional
+#  art_Framework_IO
+#  art_Framework_Principal
+#  ${ROOT_RIO}
+#  ${ROOT_THREAD})
+add_library(art_Framework_Services_Optional_TFileService_service
+  SHARED
+  TFileService.h
+  TFileService_service.cc
+  )
+target_link_libraries(art_Framework_Services_Optional_TFileService_service
   art_Framework_Services_System_TriggerNamesService_service
   art_Framework_Services_Optional
   art_Framework_IO
   art_Framework_Principal
-  ${ROOT_RIO}
-  ${ROOT_THREAD})
-simple_plugin(Timing "service" art_Persistency_Provenance)
-simple_plugin(Tracer "service" art_Persistency_Provenance)
-simple_plugin(TrivialFileDelivery "service")
-simple_plugin(TrivialFileTransfer "service")
-
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+  ${ROOT_RIO_LIBRARY}
+  ${ROOT_Thread_LIBRARY}
+  )
+set_target_properties(art_Framework_Services_Optional_TFileService_service
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+install(TARGETS art_Framework_Services_Optional_TFileService_service
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES TFileService.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/Optional
+  COMPONENT Development
+  )
+
+
+
+# - Timing_service
+add_library(art_Framework_Services_Optional_Timing_service
+  SHARED
+  Timing_service.cc
+  )
+target_link_libraries(art_Framework_Services_Optional_Timing_service
+  art_Persistency_Provenance
+  )
+set_target_properties(art_Framework_Services_Optional_Timing_service
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+install(TARGETS art_Framework_Services_Optional_Timing_service
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+
+# - Tracer_service
+add_library(art_Framework_Services_Optional_Tracer_service
+  SHARED
+  Tracer_service.cc
+  )
+target_link_libraries(art_Framework_Services_Optional_Tracer_service
+  art_Persistency_Provenance
+  )
+set_target_properties(art_Framework_Services_Optional_Tracer_service
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+install(TARGETS art_Framework_Services_Optional_Tracer_service
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+
+# - TrivialFileDelivery_service
+add_library(art_Framework_Services_Optional_TrivialFileDelivery_service
+  SHARED
+  TrivialFileDelivery.h
+  TrivialFileDelivery_service.cc
+  )
+target_link_libraries(art_Framework_Services_Optional_TrivialFileDelivery_service
+  art_Framework_Services_Registry
+  )
+set_target_properties(art_Framework_Services_Optional_TrivialFileDelivery_service
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+install(TARGETS art_Framework_Services_Optional_TrivialFileDelivery_service
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES TrivialFileDelivery.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/Optional
+  COMPONENT Development
+  )
+
+# - TrivialFileTransfer_service
+add_library(art_Framework_Services_Optional_TrivialFileTransfer_service
+  SHARED
+  TrivialFileTransfer.h
+  TrivialFileTransfer_service.cc
+  )
+target_link_libraries(art_Framework_Services_Optional_TrivialFileTransfer_service
+  art_Framework_Services_Registry
+  )
+set_target_properties(art_Framework_Services_Optional_TrivialFileTransfer_service
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+install(TARGETS art_Framework_Services_Optional_TrivialFileTransfer_service
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES TrivialFileTransfer.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/Optional
+  COMPONENT Development
+  )
+
+
+
+
+# ----------------------------------------------------------------------------
+# - Old stuff
+#set( art_Framework_Services_Optional_sources
+#  TFileDirectory.cc
+#  detail/TH1AddDirectorySentry.cc
+#)
+#
+#art_make_library(# LIBRARY_NAME art_Framework_Services_Optional
+#                  SOURCE ${art_Framework_Services_Optional_sources}
+#                  LIBRARIES ${CETLIB}
+#  ${ROOT_HIST}
+#  ${ROOT_MATRIX}
+#  ${ROOT_MATHCORE}
+#  ${ROOT_CORE}
+#  ${ROOT_CINT}
+#  ${Boost_FILESYSTEM_LIBRARY}
+#  ${Boost_REGEX_LIBRARY}
+#  ${Boost_SYSTEM_LIBRARY}
+#)
+
+#simple_plugin(RandomNumberGenerator "service"
+#  art_Framework_Principal
+#  art_Persistency_Common
+#  ${MF_MESSAGELOGGER}
+#  ${MF_UTILITIES}
+#  ${CETLIB}
+#  ${CLHEP}
+#  )
+
+#simple_plugin(SimpleInteraction "service" art_Framework_Services_UserInteraction)
+#simple_plugin(SimpleMemoryCheck "service" art_Persistency_Provenance)
+#simple_plugin(TFileService "service"
+#  art_Framework_Services_System_TriggerNamesService_service
+#  art_Framework_Services_Optional
+#  art_Framework_IO
+#  art_Framework_Principal
+#  ${ROOT_RIO}
+#  ${ROOT_THREAD})
+#simple_plugin(Timing "service" art_Persistency_Provenance)
+#simple_plugin(Tracer "service" art_Persistency_Provenance)
+#simple_plugin(TrivialFileDelivery "service")
+#simple_plugin(TrivialFileTransfer "service")
+#
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Framework/Services/Registry/CMakeLists.txt b/art/Framework/Services/Registry/CMakeLists.txt
index 59e35ee..769eea1 100644
--- a/art/Framework/Services/Registry/CMakeLists.txt
+++ b/art/Framework/Services/Registry/CMakeLists.txt
@@ -1,17 +1,87 @@
-# project name
-project(art_Framework_Services_Registry)
+# - Build art_Framework_Services_Registry lib
+# Define headers
+set(art_Framework_Services_Registry_HEADERS
+  ActivityRegistry.h
+  BranchActionType.h
+  GlobalSignal.h
+  LocalSignal.h
+  ServiceHandle.h
+  ServiceMacros.h
+  ServiceRegistry.h
+  ServiceScope.h
+  ServicesManager.h
+  ServiceToken.h
+  )
+
+set(art_Framework_Services_Registry_DETAIL_HEADERS
+  detail/helper_macros.h
+  detail/makeWatchFunc.h
+  detail/ServiceCacheEntry.h
+  detail/ServiceCache.h
+  detail/ServiceHelper.h
+  detail/ServiceStack.h
+  detail/ServiceWrapperBase.h
+  detail/ServiceWrapper.h
+  detail/SignalResponseType.h
+  )
 
-set(art_Framework_Services_Registry_sources
+# Describe library
+add_library(art_Framework_Services_Registry SHARED
+  ${art_Framework_Services_Registry_HEADERS}
+  ${art_Framework_Services_Registry_DETAIL_HEADERS}
   ServiceRegistry.cc
   ServicesManager.cc
   detail/ServiceCacheEntry.cc
   )
 
-art_make_library( LIBRARY_NAME art_Framework_Services_Registry
-  SOURCE ${art_Framework_Services_Registry_sources}
-  LIBRARIES ${TBB}
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_Services_Registry
   art_Utilities
   )
 
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+# Set any additional properties
+set_target_properties(art_Framework_Services_Registry
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_Services_Registry
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Framework_Services_Registry_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/Registry
+  COMPONENT Development
+  )
+install(FILES ${art_Framework_Services_Registry_DETAIL_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/Registry/detail
+  COMPONENT Development
+  )
+
+
+
+
+#-----------------------------------------------------------------------
+# Old stuff
+#
+# project name
+#project(art_Framework_Services_Registry)
+#
+#set(art_Framework_Services_Registry_sources
+#  ServiceRegistry.cc
+#  ServicesManager.cc
+#  detail/ServiceCacheEntry.cc
+#  )
+#
+#art_make_library( LIBRARY_NAME art_Framework_Services_Registry
+#  SOURCE ${art_Framework_Services_Registry_sources}
+#  LIBRARIES ${TBB}
+#  art_Utilities
+#  )
+
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Framework/Services/System/CMakeLists.txt b/art/Framework/Services/System/CMakeLists.txt
index b64dd16..8f47208 100644
--- a/art/Framework/Services/System/CMakeLists.txt
+++ b/art/Framework/Services/System/CMakeLists.txt
@@ -1,12 +1,131 @@
-# project name
-project(art_Framework_Services_System)
+# - Build art_Framework_Services_System plugins
+# All service plugins, so require linking to art_Framework_Services_Registry
+set(art_Framework_Services_System_HEADERS)
+set(art_Framework_Services_System_DETAIL_HEADERS)
+set(art_Framework_Services_System_TARGETS)
+
+# - CurrentModule
+add_library(art_Framework_Services_System_CurrentModule_service
+  SHARED
+  CurrentModule.h
+  CurrentModule_service.cc
+  )
+list(APPEND art_Framework_Services_System_HEADERS CurrentModule.h)
+list(APPEND art_Framework_Services_System_TARGETS art_Framework_Services_System_CurrentModule_service)
+target_link_libraries(art_Framework_Services_System_CurrentModule_service
+  art_Framework_Services_Registry
+  art_Persistency_Provenance
+  )
+
+# - FileCatalogMetadata
+add_library(art_Framework_Services_System_FileCatalogMetadata_service
+  SHARED
+  FileCatalogMetadata.h
+  FileCatalogMetadata_service.cc
+  )
+list(APPEND art_Framework_Services_System_HEADERS FileCatalogMetadata.h)
+list(APPEND art_Framework_Services_System_TARGETS art_Framework_Services_System_FileCatalogMetadata_service)
+target_link_libraries(art_Framework_Services_System_FileCatalogMetadata_service
+  art_Framework_Services_Registry
+  )
+
+# - FloatingPointControl
+add_library(art_Framework_Services_System_FloatingPointControl_service
+  SHARED
+  FloatingPointControl.h
+  FloatingPointControl_service.cc
+  )
+list(APPEND art_Framework_Services_System_HEADERS FloatingPointControl.h)
+list(APPEND art_Framework_Services_System_TARGETS art_Framework_Services_System_FloatingPointControl_service)
+target_link_libraries(art_Framework_Services_System_FloatingPointControl_service
+  art_Framework_Services_Registry
+  )
+
+# - PathSelection
+add_library(art_Framework_Services_System_PathSelection_service
+  SHARED
+  PathSelection.h
+  PathSelection_service.cc
+  )
+list(APPEND art_Framework_Services_System_HEADERS PathSelection.h)
+list(APPEND art_Framework_Services_System_TARGETS art_Framework_Services_System_PathSelection_service)
+target_link_libraries(art_Framework_Services_System_PathSelection_service
+  art_Framework_Services_Registry
+  art_Framework_Core
+  )
+
+# - ScheduleContext
+add_library(art_Framework_Services_System_ScheduleContext_service
+  SHARED
+  ScheduleContext.h
+  detail/ScheduleContextSetter.h
+  ScheduleContext_service.cc
+  )
+list(APPEND art_Framework_Services_System_HEADERS ScheduleContext.h)
+list(APPEND art_Framework_Services_System_DETAIL_HEADERS
+  detail/ScheduleContextSetter.h)
+list(APPEND art_Framework_Services_System_TARGETS
+  art_Framework_Services_System_ScheduleContext_service
+  )
+target_link_libraries(art_Framework_Services_System_ScheduleContext_service
+  art_Framework_Services_Registry
+  art_Framework_Core
+  ${TBB_LIBRARIES}
+  )
+target_include_directories(art_Framework_Services_System_ScheduleContext_service
+  PRIVATE
+   ${TBB_INCLUDE_DIRS}
+  )
 
-simple_plugin(CurrentModule "service" art_Persistency_Provenance)
-simple_plugin(FileCatalogMetadata "service")
-simple_plugin(FloatingPointControl "service")
-simple_plugin(PathSelection "service" art_Framework_Core)
-simple_plugin(ScheduleContext "service" art_Framework_Core)
-simple_plugin(TriggerNamesService "service")
+# - TriggerNamesService
+add_library(art_Framework_Services_System_TriggerNamesService_service
+  SHARED
+  TriggerNamesService.h
+  TriggerNamesService_service.cc
+  )
+list(APPEND art_Framework_Services_System_HEADERS TriggerNamesService.h)
+list(APPEND art_Framework_Services_System_TARGETS art_Framework_Services_System_TriggerNamesService_service)
+target_link_libraries(art_Framework_Services_System_TriggerNamesService_service
+  art_Framework_Services_Registry
+  )
 
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+
+# Set any additional properties
+set_target_properties(${art_Framework_Services_System_TARGETS}
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS ${art_Framework_Services_System_TARGETS}
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Framework_Services_System_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/System
+  COMPONENT Development
+  )
+install(FILES ${art_Framework_Services_System_DETAIL_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/Services/System/detail
+  COMPONENT Development
+  )
+
+
+#-----------------------------------------------------------------------
+# Old Stuff
+#
+# project name
+#project(art_Framework_Services_System)
+#
+#simple_plugin(CurrentModule "service" art_Persistency_Provenance)
+#simple_plugin(FileCatalogMetadata "service")
+#simple_plugin(FloatingPointControl "service")
+#simple_plugin(PathSelection "service" art_Framework_Core)
+#simple_plugin(ScheduleContext "service" art_Framework_Core)
+#simple_plugin(TriggerNamesService "service")
+#
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Framework/Services/UserInteraction/CMakeLists.txt b/art/Framework/Services/UserInteraction/CMakeLists.txt
index 69ef269..5a0e453 100644
--- a/art/Framework/Services/UserInteraction/CMakeLists.txt
+++ b/art/Framework/Services/UserInteraction/CMakeLists.txt
@@ -1,11 +1,50 @@
-art_make_library(LIBRARY_NAME art_Framework_Services_UserInteraction
-  SOURCE UserInteraction.cc
-  LIBRARIES art_Framework_Core
+# - Build art_Framework_Services_UserInteraction
+
+# Describe library
+add_library(art_Framework_Services_UserInteraction SHARED
+  UserInteraction.h
+  UserInteraction.cc
+  )
+
+# Describe library link interface - all Public for now
+target_link_libraries(art_Framework_Services_UserInteraction
+  art_Framework_Core
   art_Framework_Principal
   art_Persistency_Provenance
   art_Framework_Services_Registry
-  ${FHICLCPP}
+  FNALCore::FNALCore
+  )
+
+# Set any additional properties
+set_target_properties(art_Framework_Services_UserInteraction
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Framework_Services_UserInteraction
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES UserInteraction.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Framework/UserInteraction
+  COMPONENT Development
   )
 
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+#-----------------------------------------------------------------------
+# Old stuff
+#
+#art_make_library(LIBRARY_NAME art_Framework_Services_UserInteraction
+#  SOURCE UserInteraction.cc
+#  LIBRARIES art_Framework_Core
+#  art_Framework_Principal
+#  art_Persistency_Provenance
+#  art_Framework_Services_Registry
+#  ${FHICLCPP}
+#  )
+#
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Ntuple/CMakeLists.txt b/art/Ntuple/CMakeLists.txt
index 065ee71..3783784 100644
--- a/art/Ntuple/CMakeLists.txt
+++ b/art/Ntuple/CMakeLists.txt
@@ -1,7 +1,50 @@
-art_make(
-  LIB_LIBRARIES
-  ${SQLITE3}
+# - Build art_Ntuple libray
+# Define headers
+set(art_Ntuple_HEADERS
+  Ntuple.h
+  sqlite_helpers.h
+  Transaction.h
   )
 
-install_headers()
-install_source()
+# Describe library
+add_library(art_Ntuple SHARED ${art_Ntuple_HEADERS} Transaction.cc)
+
+# Describe library include interface
+target_include_directories(art_Ntuple
+  PUBLIC
+   ${SQLite3_INCLUDE_DIRS}
+   )
+
+# Describe library link interface
+target_link_libraries(art_Ntuple ${SQLite3_LIBRARIES})
+
+# Set any additional properties
+set_target_properties(art_Ntuple
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Ntuple
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Ntuple_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Ntuple
+  COMPONENT Development
+  )
+
+
+#-----------------------------------------------------------------------
+# Original
+#
+#art_make(
+#  LIB_LIBRARIES
+#  ${SQLITE3}
+#  )
+
+#install_headers()
+#install_source()
diff --git a/art/Persistency/CMakeLists.txt b/art/Persistency/CMakeLists.txt
index ba96a13..f4bccc5 100644
--- a/art/Persistency/CMakeLists.txt
+++ b/art/Persistency/CMakeLists.txt
@@ -1,12 +1,12 @@
 # project name
-project(Persistency)
+#project(Persistency)
 
 # build Persistency libraries
-add_subdirectory (CLHEPDictionaries)
-add_subdirectory (Common)
-add_subdirectory (Provenance)
-add_subdirectory (RootDB)
-add_subdirectory (StdDictionaries)
-add_subdirectory (WrappedStdDictionaries)
-add_subdirectory (CetlibDictionaries)
-add_subdirectory (FhiclCppDictionaries)
+#add_subdirectory (CLHEPDictionaries)
+add_subdirectory(Common)
+add_subdirectory(Provenance)
+add_subdirectory(RootDB)
+add_subdirectory(StdDictionaries)
+add_subdirectory(WrappedStdDictionaries)
+add_subdirectory(CetlibDictionaries)
+add_subdirectory(FhiclCppDictionaries)
diff --git a/art/Persistency/CetlibDictionaries/CMakeLists.txt b/art/Persistency/CetlibDictionaries/CMakeLists.txt
index eaf8586..97bc515 100644
--- a/art/Persistency/CetlibDictionaries/CMakeLists.txt
+++ b/art/Persistency/CetlibDictionaries/CMakeLists.txt
@@ -1,6 +1,14 @@
 # project name
-project(art_Persistency_CetlibDictionaries)
+#project(art_Persistency_CetlibDictionaries)
 
-art_dictionary(DICTIONARY_LIBRARIES ${CETLIB})
+art_add_dictionary(DICTIONARY_LIBRARIES FNALCore::FNALCore)
 
-install_source()
+install(TARGETS art_Persistency_CetlibDictionaries_dict art_Persistency_CetlibDictionaries_map
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+
+#install_source()
diff --git a/art/Persistency/Common/CMakeLists.txt b/art/Persistency/Common/CMakeLists.txt
index e4cb4f8..d51c4df 100644
--- a/art/Persistency/Common/CMakeLists.txt
+++ b/art/Persistency/Common/CMakeLists.txt
@@ -1,32 +1,128 @@
-# project name
-project(art_Persistency_Common)
+# - Build art_Persistency_Common lib
+# Define headers
+set(art_Persistency_Common_HEADERS
+  Assns.h
+  BoolCache.h
+  CacheStreamers.h
+  CollectionUtilities.h
+  ConstPtrCache.h
+  debugging_allocator.h
+  DelayedReader.h
+  EDProductGetter.h
+  EDProduct.h
+  fwd.h
+  getElementAddresses.h
+  GetProduct.h
+  GroupQueryResult.h
+  HLTenums.h
+  HLTGlobalStatus.h
+  HLTPathStatus.h
+  PostReadFixupTrait.h
+  Ptr.h
+  PtrVectorBase.h
+  PtrVector.h
+  RefCore.h
+  RNGsnapshot.h
+  setPtr.h
+  traits.h
+  TriggerResults.h
+  Wrapper.h
+  )
+
+set(art_Persistency_Common_DETAIL_HEADERS
+  detail/maybeCastObj.h
+  detail/setPtrVectorBaseStreamer.h
+  )
 
-set(art_Persistency_Common_sources
+# Describe library
+add_library(art_Persistency_Common SHARED
+  ${art_Persistency_Common_HEADERS}
+  ${art_Persistency_Common_DETAIL_HEADERS}
   CacheStreamers.cc
   DelayedReader.cc
   EDProduct.cc
   GroupQueryResult.cc
   PtrVectorBase.cc
-  RNGsnapshot.cc
   RefCore.cc
+  RNGsnapshot.cc
+  traits.cc
   detail/maybeCastObj.cc
   detail/setPtrVectorBaseStreamer.cc
-  traits.cc
-)
+  )
+
+# Describe library include interface
+#target_include_directories(art_Persistency_Common
+#  PUBLIC
+#   ${ROOT_INCLUDE_DIRS}
+#   ${BOOST_INCLUDE_DIRS}
+#   )
 
-set( art_Persistency_Common_libraries 
-	art_Persistency_Provenance
-	art_Utilities
-	${ROOT_CORE}
-	${Boost_THREAD_LIBRARY}
-	)
+# Describe library link interface
+target_link_libraries(art_Persistency_Common
+  PUBLIC
+  FNALCore::FNALCore
+  art_Utilities
+  art_Persistency_Provenance
+  ${ROOT_Core_LIBRARY}
+  )
 
-art_make_library( LIBRARY_NAME art_Persistency_Common
-                  SOURCE ${art_Persistency_Common_sources}
-		  LIBRARIES ${art_Persistency_Common_libraries}
-		 )
+# Set any additional properties
+set_target_properties(art_Persistency_Common
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
 
-art_dictionary(DICTIONARY_LIBRARIES art_Persistency_Common)
+# - Dictify
+art_add_dictionary(DICTIONARY_LIBRARIES art_Persistency_Common)
 
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+install(TARGETS art_Persistency_Common art_Persistency_Common_dict art_Persistency_Common_map
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Persistency_Common_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Persistency/Common
+  COMPONENT Development
+  )
+install(FILES ${art_Persistency_Common_DETAIL_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Persistency/Common/detail
+  COMPONENT Development
+  )
+
+#-----------------------------------------------------------------------
+# Old stuff
+# project name
+#project(art_Persistency_Common)
+#
+#set(art_Persistency_Common_sources
+#  CacheStreamers.cc
+#  DelayedReader.cc
+#  EDProduct.cc
+#  GroupQueryResult.cc
+#  PtrVectorBase.cc
+#  RNGsnapshot.cc
+#  RefCore.cc
+#  detail/maybeCastObj.cc
+#  detail/setPtrVectorBaseStreamer.cc
+#  traits.cc
+#)
+#
+#set( art_Persistency_Common_libraries
+#	art_Persistency_Provenance
+#	art_Utilities
+#	${ROOT_CORE}
+#	${Boost_THREAD_LIBRARY}
+#	)
+#
+#art_make_library( LIBRARY_NAME art_Persistency_Common
+#                  SOURCE ${art_Persistency_Common_sources}
+#		  LIBRARIES ${art_Persistency_Common_libraries}
+#		 )
+#
+#art_dictionary(DICTIONARY_LIBRARIES art_Persistency_Common)
+#
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
diff --git a/art/Persistency/FhiclCppDictionaries/CMakeLists.txt b/art/Persistency/FhiclCppDictionaries/CMakeLists.txt
index a867fe3..714797b 100644
--- a/art/Persistency/FhiclCppDictionaries/CMakeLists.txt
+++ b/art/Persistency/FhiclCppDictionaries/CMakeLists.txt
@@ -1,6 +1,14 @@
 # project name
-project(art_Persistency_FhiclCppDictionaries)
+#project(art_Persistency_FhiclCppDictionaries)
 
-art_dictionary(DICTIONARY_LIBRARIES ${FHICLCPP})
+art_add_dictionary(DICTIONARY_LIBRARIES FNALCore::FNALCore)
+install(TARGETS art_Persistency_FhiclCppDictionaries_map
+  art_Persistency_FhiclCppDictionaries_dict
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
 
-install_source()
+#install_source()
diff --git a/art/Persistency/Provenance/CMakeLists.txt b/art/Persistency/Provenance/CMakeLists.txt
index 7be5fb2..bc1e754 100644
--- a/art/Persistency/Provenance/CMakeLists.txt
+++ b/art/Persistency/Provenance/CMakeLists.txt
@@ -1,7 +1,64 @@
-# project name
-project(art_Persistency_Provenance)
+# - Build art_Persistency_Provenance lib
+# Define headers
+set(art_Persistency_Provenance_HEADERS
+  BranchChildren.h
+  BranchDescription.h
+  BranchID.h
+  BranchIDList.h
+  BranchIDListHelper.h
+  BranchIDListRegistry.h
+  BranchKey.h
+  BranchListIndex.h
+  BranchMapper.h
+  BranchType.h
+  EventAuxiliary.h
+  EventID.h
+  EventProcessHistoryID.h
+  EventSelectionID.h
+  FileFormatVersion.h
+  FileIndex.h
+  HashedTypes.h
+  Hash.h
+  History.h
+  MasterProductRegistry.h
+  ModuleDescription.h
+  ModuleDescriptionID.h
+  ParameterSetBlob.h
+  ParameterSetMap.h
+  Parentage.h
+  ParentageID.h
+  ParentageRegistry.h
+  PassID.h
+  ProcessConfiguration.h
+  ProcessConfigurationID.h
+  ProcessConfigurationRegistry.h
+  ProcessHistory.h
+  ProcessHistoryID.h
+  ProcessHistoryRegistry.h
+  ProductID.h
+  ProductList.h
+  ProductMetaData.h
+  ProductProvenance.h
+  ProductRegistry.h
+  ProductStatus.h
+  ProvenanceFwd.h
+  ReflexTools.h
+  ReleaseVersion.h
+  RunAuxiliary.h
+  RunID.h
+  Selections.h
+  SortInvalidFirst.h
+  SubRunAuxiliary.h
+  SubRunID.h
+  Timestamp.h
+  Transient.h
+  TransientStreamer.h
+  TypeLabel.h
+  )
 
-set(art_Persistency_Provenance_sources
+# Describe library
+add_library(art_Persistency_Provenance SHARED
+  ${art_Persistency_Provenance_HEADERS}
   BranchChildren.cc
   BranchDescription.cc
   BranchID.cc
@@ -30,22 +87,100 @@ set(art_Persistency_Provenance_sources
   SubRunAuxiliary.cc
   SubRunID.cc
   TransientStreamer.cc
- )
+  )
+
+# Describe library include interface
+target_include_directories(art_Persistency_Provenance
+  PUBLIC
+   ${ROOT_INCLUDE_DIRS}
+  PRIVATE
+   ${BOOST_INCLUDE_DIRS}
+   )
 
+# Describe library link interface - all Public for now
+target_link_libraries(art_Persistency_Provenance
+  LINK_PUBLIC
+   art_Persistency_RootDB
+   art_Utilities
+   ${ROOT_Cintex_LIBRARY}
+  LINK_PRIVATE
+   ${BOOST_THREAD_LIBRARY}
+  )
 
-set( art_Persistency_Provenance_libraries
-  art_Persistency_RootDB
-  art_Utilities
-  ${Boost_THREAD_LIBRARY}
-  ${ROOT_CINTEX}
+# Set any additional properties
+set_target_properties(art_Persistency_Provenance
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
   )
 
-art_make_library( LIBRARY_NAME art_Persistency_Provenance
-                  SOURCE ${art_Persistency_Provenance_sources}
-                  LIBRARIES ${art_Persistency_Provenance_libraries}
-		 )
+# - Dictify
+art_add_dictionary(DICTIONARY_LIBRARIES art_Persistency_Provenance)
+
+
+install(TARGETS art_Persistency_Provenance art_Persistency_Provenance_dict art_Persistency_Provenance_map
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_Persistency_Provenance_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Persistency/Provenance
+  COMPONENT Development
+  )
+
+
+#-----------------------------------------------------------------------
+# Old stuff
+# project name
+#project(art_Persistency_Provenance)
+#
+#set(art_Persistency_Provenance_sources
+#  BranchChildren.cc
+#  BranchDescription.cc
+#  BranchID.cc
+#  BranchIDListHelper.cc
+#  BranchKey.cc
+#  BranchMapper.cc
+#  BranchType.cc
+#  EventAuxiliary.cc
+#  EventID.cc
+#  FileFormatVersion.cc
+#  FileIndex.cc
+#  Hash.cc
+#  History.cc
+#  MasterProductRegistry.cc
+#  ModuleDescription.cc
+#  ParameterSetBlob.cc
+#  Parentage.cc
+#  ProcessConfiguration.cc
+#  ProcessHistory.cc
+#  ProductID.cc
+#  ProductMetaData.cc
+#  ProductProvenance.cc
+#  ReflexTools.cc
+#  RunAuxiliary.cc
+#  RunID.cc
+#  SubRunAuxiliary.cc
+#  SubRunID.cc
+#  TransientStreamer.cc
+# )
+
+
+#set( art_Persistency_Provenance_libraries
+#  art_Persistency_RootDB
+#  art_Utilities
+#  ${Boost_THREAD_LIBRARY}
+#  ${ROOT_CINTEX}
+#  )
+
+#art_make_library( LIBRARY_NAME art_Persistency_Provenance
+#                  SOURCE ${art_Persistency_Provenance_sources}
+#                  LIBRARIES ${art_Persistency_Provenance_libraries}
+#		 )
 
-art_dictionary(DICTIONARY_LIBRARIES art_Persistency_Provenance)
+#art_dictionary(DICTIONARY_LIBRARIES art_Persistency_Provenance)
 
-install_headers()
-install_source()
+#install_headers()
+#install_source()
diff --git a/art/Persistency/RootDB/CMakeLists.txt b/art/Persistency/RootDB/CMakeLists.txt
index d009f4d..3b9c3ef 100644
--- a/art/Persistency/RootDB/CMakeLists.txt
+++ b/art/Persistency/RootDB/CMakeLists.txt
@@ -1,19 +1,75 @@
-set(art_Persistency_RootDB_suorce
+# - Build art_Persistency_RootDB lib
+# Define headers
+set(art_Persistency_RootDB_HEADERS
+  MetaDataAccess.h
+  SQLErrMsg.h
+  SQLite3Wrapper.h
+  tkeyvfs.h
+  )
+
+# Describe library
+add_library(art_Persistency_RootDB SHARED
+  ${art_Persistency_RootDB_HEADERS}
   MetaDataAccess.cc
   SQLErrMsg.cc
   SQLite3Wrapper.cc
   tkeyvfs.cc
-)
+  )
 
-art_make_library( LIBRARY_NAME art_Persistency_RootDB
-                  SOURCE ${art_Persistency_RootDB_suorce}
-                  LIBRARIES ${ROOT_RIO}
-  ${ROOT_THREAD}
-  ${ROOT_CORE}
-  ${ROOT_CINT}
+# Describe library include interface
+target_include_directories(art_Persistency_RootDB
+  PUBLIC
+   ${ROOT_INCLUDE_DIRS}
+   ${SQLite3_INCLUDE_DIRS}
+   )
+
+# Describe library link interface - all Public for now
+target_link_libraries(art_Persistency_RootDB
+  ${ROOT_Core_LIBRARY}
+  ${ROOT_RIO_LIBRARY}
   art_Utilities
-  ${SQLITE3}
+  ${SQLite3_LIBRARIES}
+  )
+
+# Set any additional properties
+set_target_properties(art_Persistency_RootDB
+  PROPERTIES
+   VERSION ${art_VERSION}
+   SOVERSION ${art_SOVERSION}
+  )
+
+install(TARGETS art_Persistency_RootDB
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
   )
+install(FILES ${art_Persistency_RootDB_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Persistency/RootDB
+  COMPONENT Development
+  )
+
 
-install_headers()
-install_source()
+#-----------------------------------------------------------------------
+# Old stuff
+#
+#set(art_Persistency_RootDB_suorce
+#  MetaDataAccess.cc
+#  SQLErrMsg.cc
+#  SQLite3Wrapper.cc
+#  tkeyvfs.cc
+#)
+#
+#art_make_library( LIBRARY_NAME art_Persistency_RootDB
+#                  SOURCE ${art_Persistency_RootDB_suorce}
+#                  LIBRARIES ${ROOT_RIO}
+#  ${ROOT_THREAD}
+#  ${ROOT_CORE}
+#  ${ROOT_CINT}
+#  art_Utilities
+#  ${SQLITE3}
+#  )
+#
+#install_headers()
+#install_source()
diff --git a/art/Persistency/StdDictionaries/CMakeLists.txt b/art/Persistency/StdDictionaries/CMakeLists.txt
index e4ed67b..a306dbe 100644
--- a/art/Persistency/StdDictionaries/CMakeLists.txt
+++ b/art/Persistency/StdDictionaries/CMakeLists.txt
@@ -1,6 +1,14 @@
 # project name
-project(art_Persistency_StdDictionaries)
+#project(art_Persistency_StdDictionaries)
 
-art_dictionary()
+art_add_dictionary()
+install(TARGETS art_Persistency_StdDictionaries_dict art_Persistency_StdDictionaries_map
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
 
-install_source()
+
+#install_source()
diff --git a/art/Persistency/WrappedStdDictionaries/CMakeLists.txt b/art/Persistency/WrappedStdDictionaries/CMakeLists.txt
index 0e2a441..3ad5f8b 100644
--- a/art/Persistency/WrappedStdDictionaries/CMakeLists.txt
+++ b/art/Persistency/WrappedStdDictionaries/CMakeLists.txt
@@ -1,3 +1,11 @@
-art_dictionary()
+art_add_dictionary()
 
-install_source()
+install(TARGETS art_Persistency_WrappedStdDictionaries_dict art_Persistency_WrappedStdDictionaries_map
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+
+#install_source()
diff --git a/art/Utilities/CMakeLists.txt b/art/Utilities/CMakeLists.txt
index db94c7f..7cad08f 100644
--- a/art/Utilities/CMakeLists.txt
+++ b/art/Utilities/CMakeLists.txt
@@ -1,17 +1,128 @@
-art_make(LIB_LIBRARIES
-  ${MF_MESSAGELOGGER}
-  ${MF_UTILITIES}
-	${FHICLCPP}
-	${CETLIB}
-	${Boost_FILESYSTEM_LIBRARY}
-	${Boost_REGEX_LIBRARY}
-	${Boost_SYSTEM_LIBRARY}
-	${Boost_THREAD_LIBRARY}
-	${ROOT_CINT}
-	${ROOT_REFLEX}
-	-lpthread
-	-ldl
-  )
-
-install_headers(SUBDIRS detail)
-install_source(SUBDIRS detail)
+#art_make(LIB_LIBRARIES
+#  ${MF_MESSAGELOGGER}
+#  ${MF_UTILITIES}
+#	${FHICLCPP}
+#	${CETLIB}
+#	${Boost_FILESYSTEM_LIBRARY}
+#	${Boost_REGEX_LIBRARY}
+#	${Boost_SYSTEM_LIBRARY}
+#	${Boost_THREAD_LIBRARY}
+#	${ROOT_CINT}
+#	${ROOT_REFLEX}
+#	-lpthread
+#	-ldl
+#  )
+
+#install_headers(SUBDIRS detail)
+#install_source(SUBDIRS detail)
+
+set(art_UTILITIES_HEADERS
+  BasicPluginMacros.h
+  CPUTimer.h
+  CRC32Calculator.h
+  DebugMacros.h
+  Digest.h
+  Exception.h
+  ExceptionMessages.h
+  FirstAbsoluteOrLookupWithDotPolicy.h
+  FriendlyName.h
+  GetPassID.h
+  GetReleaseVersion.h
+  HRRealTime.h
+  InputTag.h
+  JobMode.h
+  MallocOpts.h
+  OutputFileInfo.h
+  RegexMatch.h
+  RootHandlers.h
+  ScheduleID.h
+  TestHelper.h
+  ThreadSafeIndexedRegistry.h
+  TypeID.h
+  UnixSignalHandlers.h
+  Verbosity.h
+  WrappedClassName.h
+  ensurePointer.h
+  ensureTable.h
+  fwd.h
+  md5.h
+  parent_path.h
+  pointersEqual.h
+  quiet_unit_test.hpp
+  unique_filename.h
+  vectorTransform.h
+  )
+
+set(art_UTILITIES_DETAIL_HEADERS
+  detail/math_private.h
+  detail/metaprogramming.h
+  )
+
+set(art_UTILITIES_SOURCES
+  CPUTimer.cc
+  CRC32Calculator.cc
+  DebugMacros.cc
+  Digest.cc
+  ensureTable.cc
+  Exception.cc
+  ExceptionMessages.cc
+  FirstAbsoluteOrLookupWithDotPolicy.cc
+  FriendlyName.cc
+  InputTag.cc
+  MallocOpts.cc
+  md5.c
+  parent_path.cc
+  RegexMatch.cc
+  RootHandlers.cc
+  TestHelper.cc
+  TypeID.cc
+  unique_filename.cc
+  UnixSignalHandlers.cc
+  WrappedClassName.cc
+  )
+
+
+add_library(art_Utilities
+  SHARED
+  ${art_UTILITIES_HEADERS}
+  ${art_UTILITIES_DETAIL_HEADERS}
+  ${art_UTILITIES_SOURCES}
+  )
+set_target_properties(art_Utilities
+  PROPERTIES
+    VERSION ${art_VERSION}
+    SOVERSION ${art_SOVERSION}
+  )
+
+# No usage requirements for Root dirs, so add them here,
+# but due to Root's broken CMake config file, this won't
+# work directly.
+target_include_directories(art_Utilities
+  PRIVATE ${ROOT_INCLUDE_DIRS}
+  )
+
+target_link_libraries(art_Utilities
+  LINK_PUBLIC
+   FNALCore::FNALCore
+   ${Boost_FILESYSTEM_LIBRARY}
+   ${Boost_SYSTEM_LIBRARY}
+  LINK_PRIVATE
+   ${ROOT_Reflex_LIBRARY}
+  )
+
+install(TARGETS art_Utilities
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES ${art_UTILITIES_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Utilities
+  COMPONENT Development
+  )
+install(FILES ${art_UTILITIES_DETAIL_HEADERS}
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Utilities/detail
+  COMPONENT Development
+  )
+
diff --git a/art/Version/CMakeLists.txt b/art/Version/CMakeLists.txt
index 87f97b6..c599368 100644
--- a/art/Version/CMakeLists.txt
+++ b/art/Version/CMakeLists.txt
@@ -1,12 +1,33 @@
 # project name
-project(art_Version)
+#project(art_Version)
 
-configure_file ( ${CMAKE_CURRENT_SOURCE_DIR}/GetReleaseVersion.cc.in
-  ${CMAKE_CURRENT_BINARY_DIR}/GetReleaseVersion.cc @ONLY )
+configure_file(${CMAKE_CURRENT_SOURCE_DIR}/GetReleaseVersion.cc.in
+  ${CMAKE_CURRENT_BINARY_DIR}/GetReleaseVersion.cc
+  @ONLY
+  )
 
-art_make_library( LIBRARY_NAME art_Version
-                  SOURCE ${CMAKE_CURRENT_BINARY_DIR}/GetReleaseVersion.cc
-                 )
+add_library(art_Version SHARED
+  GetReleaseVersion.h
+  ${CMAKE_CURRENT_BINARY_DIR}/GetReleaseVersion.cc
+  )
+set_target_properties(art_Version
+  PROPERTIES
+    VERSION ${art_VERSION}
+    SOVERSION ${art_SOVERSION}
+  )
+
+#-----------------------------------------------------------------------
+# Install lib and dev
+#
+install(TARGETS art_Version
+  EXPORT ArtLibraries
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+  COMPONENT Runtime
+  )
+install(FILES GetReleaseVersion.h
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/art/Version
+  COMPONENT Development
+  )
 
-install_headers()
-install_source()
diff --git a/doc/Art.doxyfile.in b/doc/Art.doxyfile.in
new file mode 100644
index 0000000..cd058fa
--- /dev/null
+++ b/doc/Art.doxyfile.in
@@ -0,0 +1,1792 @@
+# Doxyfile 1.8.1.2
+
+# This file describes the settings to be used by the documentation system
+# doxygen (www.doxygen.org) for a project.
+#
+# All text after a hash (#) is considered a comment and will be ignored.
+# The format is:
+#       TAG = value [value, ...]
+# For lists items can also be appended using:
+#       TAG += value [value, ...]
+# Values that contain spaces should be placed between quotes (" ").
+
+#---------------------------------------------------------------------------
+# Project related configuration options
+#---------------------------------------------------------------------------
+
+# This tag specifies the encoding used for all characters in the config file
+# that follow. The default is UTF-8 which is also the encoding used for all
+# text before the first occurrence of this tag. Doxygen uses libiconv (or the
+# iconv built into libc) for the transcoding. See
+# http://www.gnu.org/software/libiconv for the list of possible encodings.
+
+DOXYFILE_ENCODING      = UTF-8
+
+# The PROJECT_NAME tag is a single word (or sequence of words) that should
+# identify the project. Note that if you do not use Doxywizard you need
+# to put quotes around the project name if it contains spaces.
+
+PROJECT_NAME           = "Art"
+
+# The PROJECT_NUMBER tag can be used to enter a project or revision number.
+# This could be handy for archiving the generated documentation or
+# if some version control system is used.
+
+PROJECT_NUMBER         =
+
+# Using the PROJECT_BRIEF tag one can provide an optional one line description
+# for a project that appears at the top of each page and should give viewer
+# a quick idea about the purpose of the project. Keep the description short.
+
+PROJECT_BRIEF          = "FNAL Event Processing Framework"
+
+# With the PROJECT_LOGO tag one can specify an logo or icon that is
+# included in the documentation. The maximum height of the logo should not
+# exceed 55 pixels and the maximum width should not exceed 200 pixels.
+# Doxygen will copy the logo to the output directory.
+
+PROJECT_LOGO           =
+
+# The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)
+# base path where the generated documentation will be put.
+# If a relative path is entered, it will be relative to the location
+# where doxygen was started. If left blank the current directory will be used.
+
+OUTPUT_DIRECTORY       =
+
+# If the CREATE_SUBDIRS tag is set to YES, then doxygen will create
+# 4096 sub-directories (in 2 levels) under the output directory of each output
+# format and will distribute the generated files over these directories.
+# Enabling this option can be useful when feeding doxygen a huge amount of
+# source files, where putting all generated files in the same directory would
+# otherwise cause performance problems for the file system.
+
+CREATE_SUBDIRS         = NO
+
+# The OUTPUT_LANGUAGE tag is used to specify the language in which all
+# documentation generated by doxygen is written. Doxygen will use this
+# information to generate all constant output in the proper language.
+# The default language is English, other supported languages are:
+# Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional,
+# Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German,
+# Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English
+# messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian,
+# Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak,
+# Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.
+
+OUTPUT_LANGUAGE        = English
+
+# If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will
+# include brief member descriptions after the members that are listed in
+# the file and class documentation (similar to JavaDoc).
+# Set to NO to disable this.
+
+BRIEF_MEMBER_DESC      = YES
+
+# If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend
+# the brief description of a member or function before the detailed description.
+# Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the
+# brief descriptions will be completely suppressed.
+
+REPEAT_BRIEF           = YES
+
+# This tag implements a quasi-intelligent brief description abbreviator
+# that is used to form the text in various listings. Each string
+# in this list, if found as the leading text of the brief description, will be
+# stripped from the text and the result after processing the whole list, is
+# used as the annotated text. Otherwise, the brief description is used as-is.
+# If left blank, the following values are used ("$name" is automatically
+# replaced with the name of the entity): "The $name class" "The $name widget"
+# "The $name file" "is" "provides" "specifies" "contains"
+# "represents" "a" "an" "the"
+
+ABBREVIATE_BRIEF       =
+
+# If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then
+# Doxygen will generate a detailed section even if there is only a brief
+# description.
+
+ALWAYS_DETAILED_SEC    = NO
+
+# If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all
+# inherited members of a class in the documentation of that class as if those
+# members were ordinary class members. Constructors, destructors and assignment
+# operators of the base classes will not be shown.
+
+INLINE_INHERITED_MEMB  = NO
+
+# If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full
+# path before files name in the file list and in the header files. If set
+# to NO the shortest path that makes the file name unique will be used.
+
+FULL_PATH_NAMES        = YES
+
+# If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag
+# can be used to strip a user-defined part of the path. Stripping is
+# only done if one of the specified strings matches the left-hand part of
+# the path. The tag can be used to show relative paths in the file list.
+# If left blank the directory from which doxygen is run is used as the
+# path to strip.
+
+STRIP_FROM_PATH        =
+
+# The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of
+# the path mentioned in the documentation of a class, which tells
+# the reader which header file to include in order to use a class.
+# If left blank only the name of the header file containing the class
+# definition is used. Otherwise one should specify the include paths that
+# are normally passed to the compiler using the -I flag.
+
+STRIP_FROM_INC_PATH    =
+
+# If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter
+# (but less readable) file names. This can be useful if your file system
+# doesn't support long names like on DOS, Mac, or CD-ROM.
+
+SHORT_NAMES            = NO
+
+# If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen
+# will interpret the first line (until the first dot) of a JavaDoc-style
+# comment as the brief description. If set to NO, the JavaDoc
+# comments will behave just like regular Qt-style comments
+# (thus requiring an explicit @brief command for a brief description.)
+
+JAVADOC_AUTOBRIEF      = NO
+
+# If the QT_AUTOBRIEF tag is set to YES then Doxygen will
+# interpret the first line (until the first dot) of a Qt-style
+# comment as the brief description. If set to NO, the comments
+# will behave just like regular Qt-style comments (thus requiring
+# an explicit \brief command for a brief description.)
+
+QT_AUTOBRIEF           = NO
+
+# The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen
+# treat a multi-line C++ special comment block (i.e. a block of //! or ///
+# comments) as a brief description. This used to be the default behaviour.
+# The new default is to treat a multi-line C++ comment block as a detailed
+# description. Set this tag to YES if you prefer the old behaviour instead.
+
+MULTILINE_CPP_IS_BRIEF = NO
+
+# If the INHERIT_DOCS tag is set to YES (the default) then an undocumented
+# member inherits the documentation from any documented member that it
+# re-implements.
+
+INHERIT_DOCS           = YES
+
+# If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce
+# a new page for each member. If set to NO, the documentation of a member will
+# be part of the file/class/namespace that contains it.
+
+SEPARATE_MEMBER_PAGES  = NO
+
+# The TAB_SIZE tag can be used to set the number of spaces in a tab.
+# Doxygen uses this value to replace tabs by spaces in code fragments.
+
+TAB_SIZE               = 2
+
+# This tag can be used to specify a number of aliases that acts
+# as commands in the documentation. An alias has the form "name=value".
+# For example adding "sideeffect=\par Side Effects:\n" will allow you to
+# put the command \sideeffect (or @sideeffect) in the documentation, which
+# will result in a user-defined paragraph with heading "Side Effects:".
+# You can put \n's in the value part of an alias to insert newlines.
+
+ALIASES                =
+
+# This tag can be used to specify a number of word-keyword mappings (TCL only).
+# A mapping has the form "name=value". For example adding
+# "class=itcl::class" will allow you to use the command class in the
+# itcl::class meaning.
+
+TCL_SUBST              =
+
+# Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C
+# sources only. Doxygen will then generate output that is more tailored for C.
+# For instance, some of the names that are used will be different. The list
+# of all members will be omitted, etc.
+
+OPTIMIZE_OUTPUT_FOR_C  = NO
+
+# Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java
+# sources only. Doxygen will then generate output that is more tailored for
+# Java. For instance, namespaces will be presented as packages, qualified
+# scopes will look different, etc.
+
+OPTIMIZE_OUTPUT_JAVA   = NO
+
+# Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran
+# sources only. Doxygen will then generate output that is more tailored for
+# Fortran.
+
+OPTIMIZE_FOR_FORTRAN   = NO
+
+# Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL
+# sources. Doxygen will then generate output that is tailored for
+# VHDL.
+
+OPTIMIZE_OUTPUT_VHDL   = NO
+
+# Doxygen selects the parser to use depending on the extension of the files it
+# parses. With this tag you can assign which parser to use for a given extension.
+# Doxygen has a built-in mapping, but you can override or extend it using this
+# tag. The format is ext=language, where ext is a file extension, and language
+# is one of the parsers supported by doxygen: IDL, Java, Javascript, CSharp, C,
+# C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, C++. For instance to make
+# doxygen treat .inc files as Fortran files (default is PHP), and .f files as C
+# (default is Fortran), use: inc=Fortran f=C. Note that for custom extensions
+# you also need to set FILE_PATTERNS otherwise the files are not read by doxygen.
+
+EXTENSION_MAPPING      =
+
+# If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all
+# comments according to the Markdown format, which allows for more readable
+# documentation. See http://daringfireball.net/projects/markdown/ for details.
+# The output of markdown processing is further processed by doxygen, so you
+# can mix doxygen, HTML, and XML commands with Markdown formatting.
+# Disable only in case of backward compatibilities issues.
+
+MARKDOWN_SUPPORT       = YES
+
+# If you use STL classes (i.e. std::string, std::vector, etc.) but do not want
+# to include (a tag file for) the STL sources as input, then you should
+# set this tag to YES in order to let doxygen match functions declarations and
+# definitions whose arguments contain STL classes (e.g. func(std::string); v.s.
+# func(std::string) {}). This also makes the inheritance and collaboration
+# diagrams that involve STL classes more complete and accurate.
+
+BUILTIN_STL_SUPPORT    = NO
+
+# If you use Microsoft's C++/CLI language, you should set this option to YES to
+# enable parsing support.
+
+CPP_CLI_SUPPORT        = NO
+
+# Set the SIP_SUPPORT tag to YES if your project consists of sip sources only.
+# Doxygen will parse them like normal C++ but will assume all classes use public
+# instead of private inheritance when no explicit protection keyword is present.
+
+SIP_SUPPORT            = NO
+
+# For Microsoft's IDL there are propget and propput attributes to indicate getter
+# and setter methods for a property. Setting this option to YES (the default)
+# will make doxygen replace the get and set methods by a property in the
+# documentation. This will only work if the methods are indeed getting or
+# setting a simple type. If this is not the case, or you want to show the
+# methods anyway, you should set this option to NO.
+
+IDL_PROPERTY_SUPPORT   = YES
+
+# If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC
+# tag is set to YES, then doxygen will reuse the documentation of the first
+# member in the group (if any) for the other members of the group. By default
+# all members of a group must be documented explicitly.
+
+DISTRIBUTE_GROUP_DOC   = NO
+
+# Set the SUBGROUPING tag to YES (the default) to allow class member groups of
+# the same type (for instance a group of public functions) to be put as a
+# subgroup of that type (e.g. under the Public Functions section). Set it to
+# NO to prevent subgrouping. Alternatively, this can be done per class using
+# the \nosubgrouping command.
+
+SUBGROUPING            = YES
+
+# When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and
+# unions are shown inside the group in which they are included (e.g. using
+# @ingroup) instead of on a separate page (for HTML and Man pages) or
+# section (for LaTeX and RTF).
+
+INLINE_GROUPED_CLASSES = NO
+
+# When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and
+# unions with only public data fields will be shown inline in the documentation
+# of the scope in which they are defined (i.e. file, namespace, or group
+# documentation), provided this scope is documented. If set to NO (the default),
+# structs, classes, and unions are shown on a separate page (for HTML and Man
+# pages) or section (for LaTeX and RTF).
+
+INLINE_SIMPLE_STRUCTS  = NO
+
+# When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum
+# is documented as struct, union, or enum with the name of the typedef. So
+# typedef struct TypeS {} TypeT, will appear in the documentation as a struct
+# with name TypeT. When disabled the typedef will appear as a member of a file,
+# namespace, or class. And the struct will be named TypeS. This can typically
+# be useful for C code in case the coding convention dictates that all compound
+# types are typedef'ed and only the typedef is referenced, never the tag name.
+
+TYPEDEF_HIDES_STRUCT   = NO
+
+# The SYMBOL_CACHE_SIZE determines the size of the internal cache use to
+# determine which symbols to keep in memory and which to flush to disk.
+# When the cache is full, less often used symbols will be written to disk.
+# For small to medium size projects (<1000 input files) the default value is
+# probably good enough. For larger projects a too small cache size can cause
+# doxygen to be busy swapping symbols to and from disk most of the time
+# causing a significant performance penalty.
+# If the system has enough physical memory increasing the cache will improve the
+# performance by keeping more symbols in memory. Note that the value works on
+# a logarithmic scale so increasing the size by one will roughly double the
+# memory usage. The cache size is given by this formula:
+# 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0,
+# corresponding to a cache size of 2^16 = 65536 symbols.
+
+SYMBOL_CACHE_SIZE      = 0
+
+# Similar to the SYMBOL_CACHE_SIZE the size of the symbol lookup cache can be
+# set using LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given
+# their name and scope. Since this can be an expensive process and often the
+# same symbol appear multiple times in the code, doxygen keeps a cache of
+# pre-resolved symbols. If the cache is too small doxygen will become slower.
+# If the cache is too large, memory is wasted. The cache size is given by this
+# formula: 2^(16+LOOKUP_CACHE_SIZE). The valid range is 0..9, the default is 0,
+# corresponding to a cache size of 2^16 = 65536 symbols.
+
+LOOKUP_CACHE_SIZE      = 0
+
+#---------------------------------------------------------------------------
+# Build related configuration options
+#---------------------------------------------------------------------------
+
+# If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in
+# documentation are documented, even if no documentation was available.
+# Private class members and static file members will be hidden unless
+# the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES
+
+EXTRACT_ALL            = NO
+
+# If the EXTRACT_PRIVATE tag is set to YES all private members of a class
+# will be included in the documentation.
+
+EXTRACT_PRIVATE        = NO
+
+# If the EXTRACT_PACKAGE tag is set to YES all members with package or internal scope will be included in the documentation.
+
+EXTRACT_PACKAGE        = NO
+
+# If the EXTRACT_STATIC tag is set to YES all static members of a file
+# will be included in the documentation.
+
+EXTRACT_STATIC         = NO
+
+# If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs)
+# defined locally in source files will be included in the documentation.
+# If set to NO only classes defined in header files are included.
+
+EXTRACT_LOCAL_CLASSES  = YES
+
+# This flag is only useful for Objective-C code. When set to YES local
+# methods, which are defined in the implementation section but not in
+# the interface are included in the documentation.
+# If set to NO (the default) only methods in the interface are included.
+
+EXTRACT_LOCAL_METHODS  = NO
+
+# If this flag is set to YES, the members of anonymous namespaces will be
+# extracted and appear in the documentation as a namespace called
+# 'anonymous_namespace{file}', where file will be replaced with the base
+# name of the file that contains the anonymous namespace. By default
+# anonymous namespaces are hidden.
+
+EXTRACT_ANON_NSPACES   = NO
+
+# If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all
+# undocumented members of documented classes, files or namespaces.
+# If set to NO (the default) these members will be included in the
+# various overviews, but no documentation section is generated.
+# This option has no effect if EXTRACT_ALL is enabled.
+
+HIDE_UNDOC_MEMBERS     = NO
+
+# If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all
+# undocumented classes that are normally visible in the class hierarchy.
+# If set to NO (the default) these classes will be included in the various
+# overviews. This option has no effect if EXTRACT_ALL is enabled.
+
+HIDE_UNDOC_CLASSES     = NO
+
+# If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all
+# friend (class|struct|union) declarations.
+# If set to NO (the default) these declarations will be included in the
+# documentation.
+
+HIDE_FRIEND_COMPOUNDS  = NO
+
+# If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any
+# documentation blocks found inside the body of a function.
+# If set to NO (the default) these blocks will be appended to the
+# function's detailed documentation block.
+
+HIDE_IN_BODY_DOCS      = NO
+
+# The INTERNAL_DOCS tag determines if documentation
+# that is typed after a \internal command is included. If the tag is set
+# to NO (the default) then the documentation will be excluded.
+# Set it to YES to include the internal documentation.
+
+INTERNAL_DOCS          = NO
+
+# If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate
+# file names in lower-case letters. If set to YES upper-case letters are also
+# allowed. This is useful if you have classes or files whose names only differ
+# in case and if your file system supports case sensitive file names. Windows
+# and Mac users are advised to set this option to NO.
+
+CASE_SENSE_NAMES       = YES
+
+# If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen
+# will show members with their full class and namespace scopes in the
+# documentation. If set to YES the scope will be hidden.
+
+HIDE_SCOPE_NAMES       = NO
+
+# If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen
+# will put a list of the files that are included by a file in the documentation
+# of that file.
+
+SHOW_INCLUDE_FILES     = YES
+
+# If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen
+# will list include files with double quotes in the documentation
+# rather than with sharp brackets.
+
+FORCE_LOCAL_INCLUDES   = NO
+
+# If the INLINE_INFO tag is set to YES (the default) then a tag [inline]
+# is inserted in the documentation for inline members.
+
+INLINE_INFO            = YES
+
+# If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen
+# will sort the (detailed) documentation of file and class members
+# alphabetically by member name. If set to NO the members will appear in
+# declaration order.
+
+SORT_MEMBER_DOCS       = YES
+
+# If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the
+# brief documentation of file, namespace and class members alphabetically
+# by member name. If set to NO (the default) the members will appear in
+# declaration order.
+
+SORT_BRIEF_DOCS        = NO
+
+# If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen
+# will sort the (brief and detailed) documentation of class members so that
+# constructors and destructors are listed first. If set to NO (the default)
+# the constructors will appear in the respective orders defined by
+# SORT_MEMBER_DOCS and SORT_BRIEF_DOCS.
+# This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO
+# and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.
+
+SORT_MEMBERS_CTORS_1ST = NO
+
+# If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the
+# hierarchy of group names into alphabetical order. If set to NO (the default)
+# the group names will appear in their defined order.
+
+SORT_GROUP_NAMES       = NO
+
+# If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be
+# sorted by fully-qualified names, including namespaces. If set to
+# NO (the default), the class list will be sorted only by class name,
+# not including the namespace part.
+# Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES.
+# Note: This option applies only to the class list, not to the
+# alphabetical list.
+
+SORT_BY_SCOPE_NAME     = NO
+
+# If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to
+# do proper type resolution of all parameters of a function it will reject a
+# match between the prototype and the implementation of a member function even
+# if there is only one candidate or it is obvious which candidate to choose
+# by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen
+# will still accept a match between prototype and implementation in such cases.
+
+STRICT_PROTO_MATCHING  = NO
+
+# The GENERATE_TODOLIST tag can be used to enable (YES) or
+# disable (NO) the todo list. This list is created by putting \todo
+# commands in the documentation.
+
+GENERATE_TODOLIST      = YES
+
+# The GENERATE_TESTLIST tag can be used to enable (YES) or
+# disable (NO) the test list. This list is created by putting \test
+# commands in the documentation.
+
+GENERATE_TESTLIST      = YES
+
+# The GENERATE_BUGLIST tag can be used to enable (YES) or
+# disable (NO) the bug list. This list is created by putting \bug
+# commands in the documentation.
+
+GENERATE_BUGLIST       = YES
+
+# The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or
+# disable (NO) the deprecated list. This list is created by putting
+# \deprecated commands in the documentation.
+
+GENERATE_DEPRECATEDLIST= YES
+
+# The ENABLED_SECTIONS tag can be used to enable conditional
+# documentation sections, marked by \if sectionname ... \endif.
+
+ENABLED_SECTIONS       =
+
+# The MAX_INITIALIZER_LINES tag determines the maximum number of lines
+# the initial value of a variable or macro consists of for it to appear in
+# the documentation. If the initializer consists of more lines than specified
+# here it will be hidden. Use a value of 0 to hide initializers completely.
+# The appearance of the initializer of individual variables and macros in the
+# documentation can be controlled using \showinitializer or \hideinitializer
+# command in the documentation regardless of this setting.
+
+MAX_INITIALIZER_LINES  = 30
+
+# Set the SHOW_USED_FILES tag to NO to disable the list of files generated
+# at the bottom of the documentation of classes and structs. If set to YES the
+# list will mention the files that were used to generate the documentation.
+
+SHOW_USED_FILES        = YES
+
+# Set the SHOW_FILES tag to NO to disable the generation of the Files page.
+# This will remove the Files entry from the Quick Index and from the
+# Folder Tree View (if specified). The default is YES.
+
+SHOW_FILES             = YES
+
+# Set the SHOW_NAMESPACES tag to NO to disable the generation of the
+# Namespaces page.
+# This will remove the Namespaces entry from the Quick Index
+# and from the Folder Tree View (if specified). The default is YES.
+
+SHOW_NAMESPACES        = YES
+
+# The FILE_VERSION_FILTER tag can be used to specify a program or script that
+# doxygen should invoke to get the current version for each file (typically from
+# the version control system). Doxygen will invoke the program by executing (via
+# popen()) the command <command> <input-file>, where <command> is the value of
+# the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file
+# provided by doxygen. Whatever the program writes to standard output
+# is used as the file version. See the manual for examples.
+
+FILE_VERSION_FILTER    =
+
+# The LAYOUT_FILE tag can be used to specify a layout file which will be parsed
+# by doxygen. The layout file controls the global structure of the generated
+# output files in an output format independent way. To create the layout file
+# that represents doxygen's defaults, run doxygen with the -l option.
+# You can optionally specify a file name after the option, if omitted
+# DoxygenLayout.xml will be used as the name of the layout file.
+
+LAYOUT_FILE            =
+
+# The CITE_BIB_FILES tag can be used to specify one or more bib files
+# containing the references data. This must be a list of .bib files. The
+# .bib extension is automatically appended if omitted. Using this command
+# requires the bibtex tool to be installed. See also
+# http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style
+# of the bibliography can be controlled using LATEX_BIB_STYLE. To use this
+# feature you need bibtex and perl available in the search path.
+
+CITE_BIB_FILES         =
+
+#---------------------------------------------------------------------------
+# configuration options related to warning and progress messages
+#---------------------------------------------------------------------------
+
+# The QUIET tag can be used to turn on/off the messages that are generated
+# by doxygen. Possible values are YES and NO. If left blank NO is used.
+
+QUIET                  = NO
+
+# The WARNINGS tag can be used to turn on/off the warning messages that are
+# generated by doxygen. Possible values are YES and NO. If left blank
+# NO is used.
+
+WARNINGS               = YES
+
+# If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings
+# for undocumented members. If EXTRACT_ALL is set to YES then this flag will
+# automatically be disabled.
+
+WARN_IF_UNDOCUMENTED   = YES
+
+# If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for
+# potential errors in the documentation, such as not documenting some
+# parameters in a documented function, or documenting parameters that
+# don't exist or using markup commands wrongly.
+
+WARN_IF_DOC_ERROR      = YES
+
+# The WARN_NO_PARAMDOC option can be enabled to get warnings for
+# functions that are documented, but have no documentation for their parameters
+# or return value. If set to NO (the default) doxygen will only warn about
+# wrong or incomplete parameter documentation, but not about the absence of
+# documentation.
+
+WARN_NO_PARAMDOC       = NO
+
+# The WARN_FORMAT tag determines the format of the warning messages that
+# doxygen can produce. The string should contain the $file, $line, and $text
+# tags, which will be replaced by the file and line number from which the
+# warning originated and the warning text. Optionally the format may contain
+# $version, which will be replaced by the version of the file (if it could
+# be obtained via FILE_VERSION_FILTER)
+
+WARN_FORMAT            = "$file:$line: $text"
+
+# The WARN_LOGFILE tag can be used to specify a file to which warning
+# and error messages should be written. If left blank the output is written
+# to stderr.
+
+WARN_LOGFILE           =
+
+#---------------------------------------------------------------------------
+# configuration options related to the input files
+#---------------------------------------------------------------------------
+
+# The INPUT tag can be used to specify the files and/or directories that contain
+# documented source files. You may enter file names like "myfile.cpp" or
+# directories like "/usr/src/myproject". Separate the files or directories
+# with spaces.
+
+INPUT                  = @PROJECT_SOURCE_DIR@/art
+
+# This tag can be used to specify the character encoding of the source files
+# that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is
+# also the default input encoding. Doxygen uses libiconv (or the iconv built
+# into libc) for the transcoding. See http://www.gnu.org/software/libiconv for
+# the list of possible encodings.
+
+INPUT_ENCODING         = UTF-8
+
+# If the value of the INPUT tag contains directories, you can use the
+# FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp
+# and *.h) to filter out the source-files in the directories. If left
+# blank the following patterns are tested:
+# *.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh
+# *.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py
+# *.f90 *.f *.for *.vhd *.vhdl
+
+FILE_PATTERNS          =
+
+# The RECURSIVE tag can be used to turn specify whether or not subdirectories
+# should be searched for input files as well. Possible values are YES and NO.
+# If left blank NO is used.
+
+RECURSIVE              = YES
+
+# The EXCLUDE tag can be used to specify files and/or directories that should be
+# excluded from the INPUT source files. This way you can easily exclude a
+# subdirectory from a directory tree whose root is specified with the INPUT tag.
+# Note that relative paths are relative to the directory from which doxygen is
+# run.
+
+EXCLUDE                =
+
+# The EXCLUDE_SYMLINKS tag can be used to select whether or not files or
+# directories that are symbolic links (a Unix file system feature) are excluded
+# from the input.
+
+EXCLUDE_SYMLINKS       = NO
+
+# If the value of the INPUT tag contains directories, you can use the
+# EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude
+# certain files from those directories. Note that the wildcards are matched
+# against the file with absolute path, so to exclude all test directories
+# for example use the pattern */test/*
+
+EXCLUDE_PATTERNS       =
+
+# The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names
+# (namespaces, classes, functions, etc.) that should be excluded from the
+# output. The symbol name can be a fully qualified name, a word, or if the
+# wildcard * is used, a substring. Examples: ANamespace, AClass,
+# AClass::ANamespace, ANamespace::*Test
+
+EXCLUDE_SYMBOLS        =
+
+# The EXAMPLE_PATH tag can be used to specify one or more files or
+# directories that contain example code fragments that are included (see
+# the \include command).
+
+EXAMPLE_PATH           =
+
+# If the value of the EXAMPLE_PATH tag contains directories, you can use the
+# EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp
+# and *.h) to filter out the source-files in the directories. If left
+# blank all files are included.
+
+EXAMPLE_PATTERNS       =
+
+# If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be
+# searched for input files to be used with the \include or \dontinclude
+# commands irrespective of the value of the RECURSIVE tag.
+# Possible values are YES and NO. If left blank NO is used.
+
+EXAMPLE_RECURSIVE      = NO
+
+# The IMAGE_PATH tag can be used to specify one or more files or
+# directories that contain image that are included in the documentation (see
+# the \image command).
+
+IMAGE_PATH             =
+
+# The INPUT_FILTER tag can be used to specify a program that doxygen should
+# invoke to filter for each input file. Doxygen will invoke the filter program
+# by executing (via popen()) the command <filter> <input-file>, where <filter>
+# is the value of the INPUT_FILTER tag, and <input-file> is the name of an
+# input file. Doxygen will then use the output that the filter program writes
+# to standard output.
+# If FILTER_PATTERNS is specified, this tag will be
+# ignored.
+
+INPUT_FILTER           =
+
+# The FILTER_PATTERNS tag can be used to specify filters on a per file pattern
+# basis.
+# Doxygen will compare the file name with each pattern and apply the
+# filter if there is a match.
+# The filters are a list of the form:
+# pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further
+# info on how filters are used. If FILTER_PATTERNS is empty or if
+# non of the patterns match the file name, INPUT_FILTER is applied.
+
+FILTER_PATTERNS        =
+
+# If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using
+# INPUT_FILTER) will be used to filter the input files when producing source
+# files to browse (i.e. when SOURCE_BROWSER is set to YES).
+
+FILTER_SOURCE_FILES    = NO
+
+# The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file
+# pattern. A pattern will override the setting for FILTER_PATTERN (if any)
+# and it is also possible to disable source filtering for a specific pattern
+# using *.ext= (so without naming a filter). This option only has effect when
+# FILTER_SOURCE_FILES is enabled.
+
+FILTER_SOURCE_PATTERNS =
+
+#---------------------------------------------------------------------------
+# configuration options related to source browsing
+#---------------------------------------------------------------------------
+
+# If the SOURCE_BROWSER tag is set to YES then a list of source files will
+# be generated. Documented entities will be cross-referenced with these sources.
+# Note: To get rid of all source code in the generated output, make sure also
+# VERBATIM_HEADERS is set to NO.
+
+SOURCE_BROWSER         = YES
+
+# Setting the INLINE_SOURCES tag to YES will include the body
+# of functions and classes directly in the documentation.
+
+INLINE_SOURCES         = NO
+
+# Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct
+# doxygen to hide any special comment blocks from generated source code
+# fragments. Normal C, C++ and Fortran comments will always remain visible.
+
+STRIP_CODE_COMMENTS    = YES
+
+# If the REFERENCED_BY_RELATION tag is set to YES
+# then for each documented function all documented
+# functions referencing it will be listed.
+
+REFERENCED_BY_RELATION = NO
+
+# If the REFERENCES_RELATION tag is set to YES
+# then for each documented function all documented entities
+# called/used by that function will be listed.
+
+REFERENCES_RELATION    = NO
+
+# If the REFERENCES_LINK_SOURCE tag is set to YES (the default)
+# and SOURCE_BROWSER tag is set to YES, then the hyperlinks from
+# functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will
+# link to the source code.
+# Otherwise they will link to the documentation.
+
+REFERENCES_LINK_SOURCE = YES
+
+# If the USE_HTAGS tag is set to YES then the references to source code
+# will point to the HTML generated by the htags(1) tool instead of doxygen
+# built-in source browser. The htags tool is part of GNU's global source
+# tagging system (see http://www.gnu.org/software/global/global.html). You
+# will need version 4.8.6 or higher.
+
+USE_HTAGS              = NO
+
+# If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen
+# will generate a verbatim copy of the header file for each class for
+# which an include is specified. Set to NO to disable this.
+
+VERBATIM_HEADERS       = YES
+
+#---------------------------------------------------------------------------
+# configuration options related to the alphabetical class index
+#---------------------------------------------------------------------------
+
+# If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index
+# of all compounds will be generated. Enable this if the project
+# contains a lot of classes, structs, unions or interfaces.
+
+ALPHABETICAL_INDEX     = YES
+
+# If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then
+# the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns
+# in which this list will be split (can be a number in the range [1..20])
+
+COLS_IN_ALPHA_INDEX    = 5
+
+# In case all classes in a project start with a common prefix, all
+# classes will be put under the same header in the alphabetical index.
+# The IGNORE_PREFIX tag can be used to specify one or more prefixes that
+# should be ignored while generating the index headers.
+
+IGNORE_PREFIX          =
+
+#---------------------------------------------------------------------------
+# configuration options related to the HTML output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_HTML tag is set to YES (the default) Doxygen will
+# generate HTML output.
+
+GENERATE_HTML          = YES
+
+# The HTML_OUTPUT tag is used to specify where the HTML docs will be put.
+# If a relative path is entered the value of OUTPUT_DIRECTORY will be
+# put in front of it. If left blank `html' will be used as the default path.
+
+HTML_OUTPUT            = html
+
+# The HTML_FILE_EXTENSION tag can be used to specify the file extension for
+# each generated HTML page (for example: .htm,.php,.asp). If it is left blank
+# doxygen will generate files with .html extension.
+
+HTML_FILE_EXTENSION    = .html
+
+# The HTML_HEADER tag can be used to specify a personal HTML header for
+# each generated HTML page. If it is left blank doxygen will generate a
+# standard header. Note that when using a custom header you are responsible
+#  for the proper inclusion of any scripts and style sheets that doxygen
+# needs, which is dependent on the configuration options used.
+# It is advised to generate a default header using "doxygen -w html
+# header.html footer.html stylesheet.css YourConfigFile" and then modify
+# that header. Note that the header is subject to change so you typically
+# have to redo this when upgrading to a newer version of doxygen or when
+# changing the value of configuration settings such as GENERATE_TREEVIEW!
+
+HTML_HEADER            =
+
+# The HTML_FOOTER tag can be used to specify a personal HTML footer for
+# each generated HTML page. If it is left blank doxygen will generate a
+# standard footer.
+
+HTML_FOOTER            =
+
+# The HTML_STYLESHEET tag can be used to specify a user-defined cascading
+# style sheet that is used by each HTML page. It can be used to
+# fine-tune the look of the HTML output. If the tag is left blank doxygen
+# will generate a default style sheet. Note that doxygen will try to copy
+# the style sheet file to the HTML output directory, so don't put your own
+# style sheet in the HTML output directory as well, or it will be erased!
+
+HTML_STYLESHEET        =
+
+# The HTML_EXTRA_FILES tag can be used to specify one or more extra images or
+# other source files which should be copied to the HTML output directory. Note
+# that these files will be copied to the base HTML output directory. Use the
+# $relpath$ marker in the HTML_HEADER and/or HTML_FOOTER files to load these
+# files. In the HTML_STYLESHEET file, use the file name only. Also note that
+# the files will be copied as-is; there are no commands or markers available.
+
+HTML_EXTRA_FILES       =
+
+# The HTML_COLORSTYLE_HUE tag controls the color of the HTML output.
+# Doxygen will adjust the colors in the style sheet and background images
+# according to this color. Hue is specified as an angle on a colorwheel,
+# see http://en.wikipedia.org/wiki/Hue for more information.
+# For instance the value 0 represents red, 60 is yellow, 120 is green,
+# 180 is cyan, 240 is blue, 300 purple, and 360 is red again.
+# The allowed range is 0 to 359.
+
+HTML_COLORSTYLE_HUE    = 220
+
+# The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of
+# the colors in the HTML output. For a value of 0 the output will use
+# grayscales only. A value of 255 will produce the most vivid colors.
+
+HTML_COLORSTYLE_SAT    = 100
+
+# The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to
+# the luminance component of the colors in the HTML output. Values below
+# 100 gradually make the output lighter, whereas values above 100 make
+# the output darker. The value divided by 100 is the actual gamma applied,
+# so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2,
+# and 100 does not change the gamma.
+
+HTML_COLORSTYLE_GAMMA  = 80
+
+# If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML
+# page will contain the date and time when the page was generated. Setting
+# this to NO can help when comparing the output of multiple runs.
+
+HTML_TIMESTAMP         = NO
+
+# If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML
+# documentation will contain sections that can be hidden and shown after the
+# page has loaded.
+
+HTML_DYNAMIC_SECTIONS  = NO
+
+# With HTML_INDEX_NUM_ENTRIES one can control the preferred number of
+# entries shown in the various tree structured indices initially; the user
+# can expand and collapse entries dynamically later on. Doxygen will expand
+# the tree to such a level that at most the specified number of entries are
+# visible (unless a fully collapsed tree already exceeds this amount).
+# So setting the number of entries 1 will produce a full collapsed tree by
+# default. 0 is a special value representing an infinite number of entries
+# and will result in a full expanded tree by default.
+
+HTML_INDEX_NUM_ENTRIES = 100
+
+# If the GENERATE_DOCSET tag is set to YES, additional index files
+# will be generated that can be used as input for Apple's Xcode 3
+# integrated development environment, introduced with OSX 10.5 (Leopard).
+# To create a documentation set, doxygen will generate a Makefile in the
+# HTML output directory. Running make will produce the docset in that
+# directory and running "make install" will install the docset in
+# ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find
+# it at startup.
+# See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html
+# for more information.
+
+GENERATE_DOCSET        = NO
+
+# When GENERATE_DOCSET tag is set to YES, this tag determines the name of the
+# feed. A documentation feed provides an umbrella under which multiple
+# documentation sets from a single provider (such as a company or product suite)
+# can be grouped.
+
+DOCSET_FEEDNAME        = "Doxygen generated docs"
+
+# When GENERATE_DOCSET tag is set to YES, this tag specifies a string that
+# should uniquely identify the documentation set bundle. This should be a
+# reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen
+# will append .docset to the name.
+
+DOCSET_BUNDLE_ID       = org.doxygen.Project
+
+# When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely identify
+# the documentation publisher. This should be a reverse domain-name style
+# string, e.g. com.mycompany.MyDocSet.documentation.
+
+DOCSET_PUBLISHER_ID    = org.doxygen.Publisher
+
+# The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.
+
+DOCSET_PUBLISHER_NAME  = Publisher
+
+# If the GENERATE_HTMLHELP tag is set to YES, additional index files
+# will be generated that can be used as input for tools like the
+# Microsoft HTML help workshop to generate a compiled HTML help file (.chm)
+# of the generated HTML documentation.
+
+GENERATE_HTMLHELP      = NO
+
+# If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can
+# be used to specify the file name of the resulting .chm file. You
+# can add a path in front of the file if the result should not be
+# written to the html output directory.
+
+CHM_FILE               =
+
+# If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can
+# be used to specify the location (absolute path including file name) of
+# the HTML help compiler (hhc.exe). If non-empty doxygen will try to run
+# the HTML help compiler on the generated index.hhp.
+
+HHC_LOCATION           =
+
+# If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag
+# controls if a separate .chi index file is generated (YES) or that
+# it should be included in the master .chm file (NO).
+
+GENERATE_CHI           = NO
+
+# If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING
+# is used to encode HtmlHelp index (hhk), content (hhc) and project file
+# content.
+
+CHM_INDEX_ENCODING     =
+
+# If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag
+# controls whether a binary table of contents is generated (YES) or a
+# normal table of contents (NO) in the .chm file.
+
+BINARY_TOC             = NO
+
+# The TOC_EXPAND flag can be set to YES to add extra items for group members
+# to the contents of the HTML help documentation and to the tree view.
+
+TOC_EXPAND             = NO
+
+# If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and
+# QHP_VIRTUAL_FOLDER are set, an additional index file will be generated
+# that can be used as input for Qt's qhelpgenerator to generate a
+# Qt Compressed Help (.qch) of the generated HTML documentation.
+
+GENERATE_QHP           = NO
+
+# If the QHG_LOCATION tag is specified, the QCH_FILE tag can
+# be used to specify the file name of the resulting .qch file.
+# The path specified is relative to the HTML output folder.
+
+QCH_FILE               =
+
+# The QHP_NAMESPACE tag specifies the namespace to use when generating
+# Qt Help Project output. For more information please see
+# http://doc.trolltech.com/qthelpproject.html#namespace
+
+QHP_NAMESPACE          = org.doxygen.Project
+
+# The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating
+# Qt Help Project output. For more information please see
+# http://doc.trolltech.com/qthelpproject.html#virtual-folders
+
+QHP_VIRTUAL_FOLDER     = doc
+
+# If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to
+# add. For more information please see
+# http://doc.trolltech.com/qthelpproject.html#custom-filters
+
+QHP_CUST_FILTER_NAME   =
+
+# The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the
+# custom filter to add. For more information please see
+# <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters">
+# Qt Help Project / Custom Filters</a>.
+
+QHP_CUST_FILTER_ATTRS  =
+
+# The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this
+# project's
+# filter section matches.
+# <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes">
+# Qt Help Project / Filter Attributes</a>.
+
+QHP_SECT_FILTER_ATTRS  =
+
+# If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can
+# be used to specify the location of Qt's qhelpgenerator.
+# If non-empty doxygen will try to run qhelpgenerator on the generated
+# .qhp file.
+
+QHG_LOCATION           =
+
+# If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files
+#  will be generated, which together with the HTML files, form an Eclipse help
+# plugin. To install this plugin and make it available under the help contents
+# menu in Eclipse, the contents of the directory containing the HTML and XML
+# files needs to be copied into the plugins directory of eclipse. The name of
+# the directory within the plugins directory should be the same as
+# the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before
+# the help appears.
+
+GENERATE_ECLIPSEHELP   = NO
+
+# A unique identifier for the eclipse help plugin. When installing the plugin
+# the directory name containing the HTML and XML files should also have
+# this name.
+
+ECLIPSE_DOC_ID         = org.doxygen.Project
+
+# The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs)
+# at top of each HTML page. The value NO (the default) enables the index and
+# the value YES disables it. Since the tabs have the same information as the
+# navigation tree you can set this option to NO if you already set
+# GENERATE_TREEVIEW to YES.
+
+DISABLE_INDEX          = NO
+
+# The GENERATE_TREEVIEW tag is used to specify whether a tree-like index
+# structure should be generated to display hierarchical information.
+# If the tag value is set to YES, a side panel will be generated
+# containing a tree-like index structure (just like the one that
+# is generated for HTML Help). For this to work a browser that supports
+# JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).
+# Windows users are probably better off using the HTML help feature.
+# Since the tree basically has the same information as the tab index you
+# could consider to set DISABLE_INDEX to NO when enabling this option.
+
+GENERATE_TREEVIEW      = NO
+
+# The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values
+# (range [0,1..20]) that doxygen will group on one line in the generated HTML
+# documentation. Note that a value of 0 will completely suppress the enum
+# values from appearing in the overview section.
+
+ENUM_VALUES_PER_LINE   = 4
+
+# If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be
+# used to set the initial width (in pixels) of the frame in which the tree
+# is shown.
+
+TREEVIEW_WIDTH         = 250
+
+# When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open
+# links to external symbols imported via tag files in a separate window.
+
+EXT_LINKS_IN_WINDOW    = NO
+
+# Use this tag to change the font size of Latex formulas included
+# as images in the HTML documentation. The default is 10. Note that
+# when you change the font size after a successful doxygen run you need
+# to manually remove any form_*.png images from the HTML output directory
+# to force them to be regenerated.
+
+FORMULA_FONTSIZE       = 10
+
+# Use the FORMULA_TRANPARENT tag to determine whether or not the images
+# generated for formulas are transparent PNGs. Transparent PNGs are
+# not supported properly for IE 6.0, but are supported on all modern browsers.
+# Note that when changing this option you need to delete any form_*.png files
+# in the HTML output before the changes have effect.
+
+FORMULA_TRANSPARENT    = YES
+
+# Enable the USE_MATHJAX option to render LaTeX formulas using MathJax
+# (see http://www.mathjax.org) which uses client side Javascript for the
+# rendering instead of using prerendered bitmaps. Use this if you do not
+# have LaTeX installed or if you want to formulas look prettier in the HTML
+# output. When enabled you may also need to install MathJax separately and
+# configure the path to it using the MATHJAX_RELPATH option.
+
+USE_MATHJAX            = NO
+
+# When MathJax is enabled you need to specify the location relative to the
+# HTML output directory using the MATHJAX_RELPATH option. The destination
+# directory should contain the MathJax.js script. For instance, if the mathjax
+# directory is located at the same level as the HTML output directory, then
+# MATHJAX_RELPATH should be ../mathjax. The default value points to
+# the MathJax Content Delivery Network so you can quickly see the result without
+# installing MathJax.
+# However, it is strongly recommended to install a local
+# copy of MathJax from http://www.mathjax.org before deployment.
+
+MATHJAX_RELPATH        = http://cdn.mathjax.org/mathjax/latest
+
+# The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension
+# names that should be enabled during MathJax rendering.
+
+MATHJAX_EXTENSIONS     =
+
+# When the SEARCHENGINE tag is enabled doxygen will generate a search box
+# for the HTML output. The underlying search engine uses javascript
+# and DHTML and should work on any modern browser. Note that when using
+# HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets
+# (GENERATE_DOCSET) there is already a search function so this one should
+# typically be disabled. For large projects the javascript based search engine
+# can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.
+
+SEARCHENGINE           = YES
+
+# When the SERVER_BASED_SEARCH tag is enabled the search engine will be
+# implemented using a PHP enabled web server instead of at the web client
+# using Javascript. Doxygen will generate the search PHP script and index
+# file to put on the web server. The advantage of the server
+# based approach is that it scales better to large projects and allows
+# full text search. The disadvantages are that it is more difficult to setup
+# and does not have live searching capabilities.
+
+SERVER_BASED_SEARCH    = NO
+
+#---------------------------------------------------------------------------
+# configuration options related to the LaTeX output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_LATEX tag is set to YES (the default) Doxygen will
+# generate Latex output.
+
+GENERATE_LATEX         = YES
+
+# The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put.
+# If a relative path is entered the value of OUTPUT_DIRECTORY will be
+# put in front of it. If left blank `latex' will be used as the default path.
+
+LATEX_OUTPUT           = latex
+
+# The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be
+# invoked. If left blank `latex' will be used as the default command name.
+# Note that when enabling USE_PDFLATEX this option is only used for
+# generating bitmaps for formulas in the HTML output, but not in the
+# Makefile that is written to the output directory.
+
+LATEX_CMD_NAME         = latex
+
+# The MAKEINDEX_CMD_NAME tag can be used to specify the command name to
+# generate index for LaTeX. If left blank `makeindex' will be used as the
+# default command name.
+
+MAKEINDEX_CMD_NAME     = makeindex
+
+# If the COMPACT_LATEX tag is set to YES Doxygen generates more compact
+# LaTeX documents. This may be useful for small projects and may help to
+# save some trees in general.
+
+COMPACT_LATEX          = NO
+
+# The PAPER_TYPE tag can be used to set the paper type that is used
+# by the printer. Possible values are: a4, letter, legal and
+# executive. If left blank a4wide will be used.
+
+PAPER_TYPE             = a4
+
+# The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX
+# packages that should be included in the LaTeX output.
+
+EXTRA_PACKAGES         =
+
+# The LATEX_HEADER tag can be used to specify a personal LaTeX header for
+# the generated latex document. The header should contain everything until
+# the first chapter. If it is left blank doxygen will generate a
+# standard header. Notice: only use this tag if you know what you are doing!
+
+LATEX_HEADER           =
+
+# The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for
+# the generated latex document. The footer should contain everything after
+# the last chapter. If it is left blank doxygen will generate a
+# standard footer. Notice: only use this tag if you know what you are doing!
+
+LATEX_FOOTER           =
+
+# If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated
+# is prepared for conversion to pdf (using ps2pdf). The pdf file will
+# contain links (just like the HTML output) instead of page references
+# This makes the output suitable for online browsing using a pdf viewer.
+
+PDF_HYPERLINKS         = YES
+
+# If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of
+# plain latex in the generated Makefile. Set this option to YES to get a
+# higher quality PDF documentation.
+
+USE_PDFLATEX           = YES
+
+# If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode.
+# command to the generated LaTeX files. This will instruct LaTeX to keep
+# running if errors occur, instead of asking the user for help.
+# This option is also used when generating formulas in HTML.
+
+LATEX_BATCHMODE        = NO
+
+# If LATEX_HIDE_INDICES is set to YES then doxygen will not
+# include the index chapters (such as File Index, Compound Index, etc.)
+# in the output.
+
+LATEX_HIDE_INDICES     = NO
+
+# If LATEX_SOURCE_CODE is set to YES then doxygen will include
+# source code with syntax highlighting in the LaTeX output.
+# Note that which sources are shown also depends on other settings
+# such as SOURCE_BROWSER.
+
+LATEX_SOURCE_CODE      = NO
+
+# The LATEX_BIB_STYLE tag can be used to specify the style to use for the
+# bibliography, e.g. plainnat, or ieeetr. The default style is "plain". See
+# http://en.wikipedia.org/wiki/BibTeX for more info.
+
+LATEX_BIB_STYLE        = plain
+
+#---------------------------------------------------------------------------
+# configuration options related to the RTF output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output
+# The RTF output is optimized for Word 97 and may not look very pretty with
+# other RTF readers or editors.
+
+GENERATE_RTF           = NO
+
+# The RTF_OUTPUT tag is used to specify where the RTF docs will be put.
+# If a relative path is entered the value of OUTPUT_DIRECTORY will be
+# put in front of it. If left blank `rtf' will be used as the default path.
+
+RTF_OUTPUT             = rtf
+
+# If the COMPACT_RTF tag is set to YES Doxygen generates more compact
+# RTF documents. This may be useful for small projects and may help to
+# save some trees in general.
+
+COMPACT_RTF            = NO
+
+# If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated
+# will contain hyperlink fields. The RTF file will
+# contain links (just like the HTML output) instead of page references.
+# This makes the output suitable for online browsing using WORD or other
+# programs which support those fields.
+# Note: wordpad (write) and others do not support links.
+
+RTF_HYPERLINKS         = NO
+
+# Load style sheet definitions from file. Syntax is similar to doxygen's
+# config file, i.e. a series of assignments. You only have to provide
+# replacements, missing definitions are set to their default value.
+
+RTF_STYLESHEET_FILE    =
+
+# Set optional variables used in the generation of an rtf document.
+# Syntax is similar to doxygen's config file.
+
+RTF_EXTENSIONS_FILE    =
+
+#---------------------------------------------------------------------------
+# configuration options related to the man page output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_MAN tag is set to YES (the default) Doxygen will
+# generate man pages
+
+GENERATE_MAN           = NO
+
+# The MAN_OUTPUT tag is used to specify where the man pages will be put.
+# If a relative path is entered the value of OUTPUT_DIRECTORY will be
+# put in front of it. If left blank `man' will be used as the default path.
+
+MAN_OUTPUT             = man
+
+# The MAN_EXTENSION tag determines the extension that is added to
+# the generated man pages (default is the subroutine's section .3)
+
+MAN_EXTENSION          = .3
+
+# If the MAN_LINKS tag is set to YES and Doxygen generates man output,
+# then it will generate one additional man file for each entity
+# documented in the real man page(s). These additional files
+# only source the real man page, but without them the man command
+# would be unable to find the correct page. The default is NO.
+
+MAN_LINKS              = NO
+
+#---------------------------------------------------------------------------
+# configuration options related to the XML output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_XML tag is set to YES Doxygen will
+# generate an XML file that captures the structure of
+# the code including all documentation.
+
+GENERATE_XML           = NO
+
+# The XML_OUTPUT tag is used to specify where the XML pages will be put.
+# If a relative path is entered the value of OUTPUT_DIRECTORY will be
+# put in front of it. If left blank `xml' will be used as the default path.
+
+XML_OUTPUT             = xml
+
+# The XML_SCHEMA tag can be used to specify an XML schema,
+# which can be used by a validating XML parser to check the
+# syntax of the XML files.
+
+XML_SCHEMA             =
+
+# The XML_DTD tag can be used to specify an XML DTD,
+# which can be used by a validating XML parser to check the
+# syntax of the XML files.
+
+XML_DTD                =
+
+# If the XML_PROGRAMLISTING tag is set to YES Doxygen will
+# dump the program listings (including syntax highlighting
+# and cross-referencing information) to the XML output. Note that
+# enabling this will significantly increase the size of the XML output.
+
+XML_PROGRAMLISTING     = YES
+
+#---------------------------------------------------------------------------
+# configuration options for the AutoGen Definitions output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will
+# generate an AutoGen Definitions (see autogen.sf.net) file
+# that captures the structure of the code including all
+# documentation. Note that this feature is still experimental
+# and incomplete at the moment.
+
+GENERATE_AUTOGEN_DEF   = NO
+
+#---------------------------------------------------------------------------
+# configuration options related to the Perl module output
+#---------------------------------------------------------------------------
+
+# If the GENERATE_PERLMOD tag is set to YES Doxygen will
+# generate a Perl module file that captures the structure of
+# the code including all documentation. Note that this
+# feature is still experimental and incomplete at the
+# moment.
+
+GENERATE_PERLMOD       = NO
+
+# If the PERLMOD_LATEX tag is set to YES Doxygen will generate
+# the necessary Makefile rules, Perl scripts and LaTeX code to be able
+# to generate PDF and DVI output from the Perl module output.
+
+PERLMOD_LATEX          = NO
+
+# If the PERLMOD_PRETTY tag is set to YES the Perl module output will be
+# nicely formatted so it can be parsed by a human reader.
+# This is useful
+# if you want to understand what is going on.
+# On the other hand, if this
+# tag is set to NO the size of the Perl module output will be much smaller
+# and Perl will parse it just the same.
+
+PERLMOD_PRETTY         = YES
+
+# The names of the make variables in the generated doxyrules.make file
+# are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX.
+# This is useful so different doxyrules.make files included by the same
+# Makefile don't overwrite each other's variables.
+
+PERLMOD_MAKEVAR_PREFIX =
+
+#---------------------------------------------------------------------------
+# Configuration options related to the preprocessor
+#---------------------------------------------------------------------------
+
+# If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will
+# evaluate all C-preprocessor directives found in the sources and include
+# files.
+
+ENABLE_PREPROCESSING   = YES
+
+# If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro
+# names in the source code. If set to NO (the default) only conditional
+# compilation will be performed. Macro expansion can be done in a controlled
+# way by setting EXPAND_ONLY_PREDEF to YES.
+
+MACRO_EXPANSION        = NO
+
+# If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES
+# then the macro expansion is limited to the macros specified with the
+# PREDEFINED and EXPAND_AS_DEFINED tags.
+
+EXPAND_ONLY_PREDEF     = NO
+
+# If the SEARCH_INCLUDES tag is set to YES (the default) the includes files
+# pointed to by INCLUDE_PATH will be searched when a #include is found.
+
+SEARCH_INCLUDES        = YES
+
+# The INCLUDE_PATH tag can be used to specify one or more directories that
+# contain include files that are not input files but should be processed by
+# the preprocessor.
+
+INCLUDE_PATH           =
+
+# You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard
+# patterns (like *.h and *.hpp) to filter out the header-files in the
+# directories. If left blank, the patterns specified with FILE_PATTERNS will
+# be used.
+
+INCLUDE_FILE_PATTERNS  =
+
+# The PREDEFINED tag can be used to specify one or more macro names that
+# are defined before the preprocessor is started (similar to the -D option of
+# gcc). The argument of the tag is a list of macros of the form: name
+# or name=definition (no spaces). If the definition and the = are
+# omitted =1 is assumed. To prevent a macro definition from being
+# undefined via #undef or recursively expanded use the := operator
+# instead of the = operator.
+
+PREDEFINED             =
+
+# If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then
+# this tag can be used to specify a list of macro names that should be expanded.
+# The macro definition that is found in the sources will be used.
+# Use the PREDEFINED tag if you want to use a different macro definition that
+# overrules the definition found in the source code.
+
+EXPAND_AS_DEFINED      =
+
+# If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then
+# doxygen's preprocessor will remove all references to function-like macros
+# that are alone on a line, have an all uppercase name, and do not end with a
+# semicolon, because these will confuse the parser if not removed.
+
+SKIP_FUNCTION_MACROS   = YES
+
+#---------------------------------------------------------------------------
+# Configuration::additions related to external references
+#---------------------------------------------------------------------------
+
+# The TAGFILES option can be used to specify one or more tagfiles. For each
+# tag file the location of the external documentation should be added. The
+# format of a tag file without this location is as follows:
+#
+# TAGFILES = file1 file2 ...
+# Adding location for the tag files is done as follows:
+#
+# TAGFILES = file1=loc1 "file2 = loc2" ...
+# where "loc1" and "loc2" can be relative or absolute paths
+# or URLs. Note that each tag file must have a unique name (where the name does
+# NOT include the path). If a tag file is not located in the directory in which
+# doxygen is run, you must also specify the path to the tagfile here.
+
+TAGFILES               =
+
+# When a file name is specified after GENERATE_TAGFILE, doxygen will create
+# a tag file that is based on the input files it reads.
+
+GENERATE_TAGFILE       = @Art_DOXYGEN_TAGFILE@
+
+# If the ALLEXTERNALS tag is set to YES all external classes will be listed
+# in the class index. If set to NO only the inherited external classes
+# will be listed.
+
+ALLEXTERNALS           = NO
+
+# If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed
+# in the modules index. If set to NO, only the current project's groups will
+# be listed.
+
+EXTERNAL_GROUPS        = YES
+
+# The PERL_PATH should be the absolute path and name of the perl script
+# interpreter (i.e. the result of `which perl').
+
+PERL_PATH              = /usr/bin/perl
+
+#---------------------------------------------------------------------------
+# Configuration options related to the dot tool
+#---------------------------------------------------------------------------
+
+# If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will
+# generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base
+# or super classes. Setting the tag to NO turns the diagrams off. Note that
+# this option also works with HAVE_DOT disabled, but it is recommended to
+# install and use dot, since it yields more powerful graphs.
+
+CLASS_DIAGRAMS         = YES
+
+# You can define message sequence charts within doxygen comments using the \msc
+# command. Doxygen will then run the mscgen tool (see
+# http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the
+# documentation. The MSCGEN_PATH tag allows you to specify the directory where
+# the mscgen tool resides. If left empty the tool is assumed to be found in the
+# default search path.
+
+MSCGEN_PATH            =
+
+# If set to YES, the inheritance and collaboration graphs will hide
+# inheritance and usage relations if the target is undocumented
+# or is not a class.
+
+HIDE_UNDOC_RELATIONS   = YES
+
+# If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is
+# available from the path. This tool is part of Graphviz, a graph visualization
+# toolkit from AT&T and Lucent Bell Labs. The other options in this section
+# have no effect if this option is set to NO (the default)
+
+HAVE_DOT               = NO
+
+# The DOT_NUM_THREADS specifies the number of dot invocations doxygen is
+# allowed to run in parallel. When set to 0 (the default) doxygen will
+# base this on the number of processors available in the system. You can set it
+# explicitly to a value larger than 0 to get control over the balance
+# between CPU load and processing speed.
+
+DOT_NUM_THREADS        = 0
+
+# By default doxygen will use the Helvetica font for all dot files that
+# doxygen generates. When you want a differently looking font you can specify
+# the font name using DOT_FONTNAME. You need to make sure dot is able to find
+# the font, which can be done by putting it in a standard location or by setting
+# the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the
+# directory containing the font.
+
+DOT_FONTNAME           = Helvetica
+
+# The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs.
+# The default size is 10pt.
+
+DOT_FONTSIZE           = 10
+
+# By default doxygen will tell dot to use the Helvetica font.
+# If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to
+# set the path where dot can find it.
+
+DOT_FONTPATH           =
+
+# If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen
+# will generate a graph for each documented class showing the direct and
+# indirect inheritance relations. Setting this tag to YES will force the
+# CLASS_DIAGRAMS tag to NO.
+
+CLASS_GRAPH            = YES
+
+# If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen
+# will generate a graph for each documented class showing the direct and
+# indirect implementation dependencies (inheritance, containment, and
+# class references variables) of the class with other documented classes.
+
+COLLABORATION_GRAPH    = YES
+
+# If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen
+# will generate a graph for groups, showing the direct groups dependencies
+
+GROUP_GRAPHS           = YES
+
+# If the UML_LOOK tag is set to YES doxygen will generate inheritance and
+# collaboration diagrams in a style similar to the OMG's Unified Modeling
+# Language.
+
+UML_LOOK               = NO
+
+# If the UML_LOOK tag is enabled, the fields and methods are shown inside
+# the class node. If there are many fields or methods and many nodes the
+# graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS
+# threshold limits the number of items for each type to make the size more
+# managable. Set this to 0 for no limit. Note that the threshold may be
+# exceeded by 50% before the limit is enforced.
+
+UML_LIMIT_NUM_FIELDS   = 10
+
+# If set to YES, the inheritance and collaboration graphs will show the
+# relations between templates and their instances.
+
+TEMPLATE_RELATIONS     = NO
+
+# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT
+# tags are set to YES then doxygen will generate a graph for each documented
+# file showing the direct and indirect include dependencies of the file with
+# other documented files.
+
+INCLUDE_GRAPH          = YES
+
+# If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and
+# HAVE_DOT tags are set to YES then doxygen will generate a graph for each
+# documented header file showing the documented files that directly or
+# indirectly include this file.
+
+INCLUDED_BY_GRAPH      = YES
+
+# If the CALL_GRAPH and HAVE_DOT options are set to YES then
+# doxygen will generate a call dependency graph for every global function
+# or class method. Note that enabling this option will significantly increase
+# the time of a run. So in most cases it will be better to enable call graphs
+# for selected functions only using the \callgraph command.
+
+CALL_GRAPH             = NO
+
+# If the CALLER_GRAPH and HAVE_DOT tags are set to YES then
+# doxygen will generate a caller dependency graph for every global function
+# or class method. Note that enabling this option will significantly increase
+# the time of a run. So in most cases it will be better to enable caller
+# graphs for selected functions only using the \callergraph command.
+
+CALLER_GRAPH           = NO
+
+# If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen
+# will generate a graphical hierarchy of all classes instead of a textual one.
+
+GRAPHICAL_HIERARCHY    = YES
+
+# If the DIRECTORY_GRAPH and HAVE_DOT tags are set to YES
+# then doxygen will show the dependencies a directory has on other directories
+# in a graphical way. The dependency relations are determined by the #include
+# relations between the files in the directories.
+
+DIRECTORY_GRAPH        = YES
+
+# The DOT_IMAGE_FORMAT tag can be used to set the image format of the images
+# generated by dot. Possible values are svg, png, jpg, or gif.
+# If left blank png will be used. If you choose svg you need to set
+# HTML_FILE_EXTENSION to xhtml in order to make the SVG files
+# visible in IE 9+ (other browsers do not have this requirement).
+
+DOT_IMAGE_FORMAT       = png
+
+# If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to
+# enable generation of interactive SVG images that allow zooming and panning.
+# Note that this requires a modern browser other than Internet Explorer.
+# Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you
+# need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files
+# visible. Older versions of IE do not have SVG support.
+
+INTERACTIVE_SVG        = NO
+
+# The tag DOT_PATH can be used to specify the path where the dot tool can be
+# found. If left blank, it is assumed the dot tool can be found in the path.
+
+DOT_PATH               =
+
+# The DOTFILE_DIRS tag can be used to specify one or more directories that
+# contain dot files that are included in the documentation (see the
+# \dotfile command).
+
+DOTFILE_DIRS           =
+
+# The MSCFILE_DIRS tag can be used to specify one or more directories that
+# contain msc files that are included in the documentation (see the
+# \mscfile command).
+
+MSCFILE_DIRS           =
+
+# The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of
+# nodes that will be shown in the graph. If the number of nodes in a graph
+# becomes larger than this value, doxygen will truncate the graph, which is
+# visualized by representing a node as a red box. Note that doxygen if the
+# number of direct children of the root node in a graph is already larger than
+# DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note
+# that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.
+
+DOT_GRAPH_MAX_NODES    = 50
+
+# The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the
+# graphs generated by dot. A depth value of 3 means that only nodes reachable
+# from the root by following a path via at most 3 edges will be shown. Nodes
+# that lay further from the root node will be omitted. Note that setting this
+# option to 1 or 2 may greatly reduce the computation time needed for large
+# code bases. Also note that the size of a graph can be further restricted by
+# DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.
+
+MAX_DOT_GRAPH_DEPTH    = 0
+
+# Set the DOT_TRANSPARENT tag to YES to generate images with a transparent
+# background. This is disabled by default, because dot on Windows does not
+# seem to support this out of the box. Warning: Depending on the platform used,
+# enabling this option may lead to badly anti-aliased labels on the edges of
+# a graph (i.e. they become hard to read).
+
+DOT_TRANSPARENT        = NO
+
+# Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output
+# files in one run (i.e. multiple -o and -T options on the command line). This
+# makes dot run faster, but since only newer versions of dot (>1.8.10)
+# support this, this feature is disabled by default.
+
+DOT_MULTI_TARGETS      = NO
+
+# If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will
+# generate a legend page explaining the meaning of the various boxes and
+# arrows in the dot generated graphs.
+
+GENERATE_LEGEND        = YES
+
+# If the DOT_CLEANUP tag is set to YES (the default) Doxygen will
+# remove the intermediate dot files that are used to generate
+# the various graphs.
+
+DOT_CLEANUP            = YES
diff --git a/doc/CMakeLists.txt b/doc/CMakeLists.txt
new file mode 100644
index 0000000..b5054cc
--- /dev/null
+++ b/doc/CMakeLists.txt
@@ -0,0 +1,35 @@
+# - Build documentation as required
+
+#-----------------------------------------------------------------------
+# Doxygen
+find_package(Doxygen 1.8 REQUIRED)
+
+# - Configure
+# We create and install a tags file so that clients can cross link to
+# or documents.
+# TODO: provide path to tag file as a component in the cmake project
+# config file.
+set(Art_DOXYGEN_TAGFILE "Art.doxytags")
+configure_file(Art.doxyfile.in Art.doxyfile @ONLY)
+
+add_custom_command(OUTPUT html/index.html
+  COMMAND ${DOXYGEN_EXECUTABLE} Art.doxyfile
+  MAIN_DEPENDENCY Art.doxyfile
+  #DEPENDS <target list>
+  WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
+  COMMENT "Doxygenating Art"
+  )
+add_custom_target(doc ALL DEPENDS html/index.html)
+
+# - HTML docs
+install(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/html
+  DESTINATION ${CMAKE_INSTALL_DOCDIR}/doxygen
+  COMPONENT Documentation
+  )
+
+# - Doxygen tag file
+install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${Art_DOXYGEN_TAGFILE}
+  DESTINATION ${CMAKE_INSTALL_DOCDIR}/doxygen
+  COMPONENT Documentation
+  )
+
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index c04c7bf..f921e7c 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -1,4 +1,4 @@
-cet_enable_asserts()
+#cet_enable_asserts()
 
 # add_definitions(-DART_NO_MIX_PTRVECTOR)
 
@@ -8,21 +8,29 @@ include(CetTest)
 # re-initialize the test environment.
 cet_test_env("FHICL_FILE_PATH=.")
 
+# - Need these cause art doesn't know about itself
+cet_test_env("PATH=${CMAKE_RUNTIME_OUTPUT_DIRECTORY}:$ENV{PATH}")
+if(APPLE)
+  cet_test_env("DYLD_LIBRARY_PATH=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
+elseif(UNIX)
+  cet_test_env("LD_LIBRARY_PATH=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
+endif()
+
 # build Persistency libraries
-add_subdirectory (Framework/Art)
-add_subdirectory (Framework/Core)
-add_subdirectory (Framework/EventProcessor)
-add_subdirectory (Framework/IO)
-add_subdirectory (Framework/IO/Root)
-add_subdirectory (Framework/Principal)
-add_subdirectory (Framework/Services/Optional)
-add_subdirectory (Framework/Services/Registry)
-add_subdirectory (Framework/Services/System)
-add_subdirectory (Integration)
-add_subdirectory (Persistency/Provenance)
-add_subdirectory (Persistency/RootDB)
-add_subdirectory (TestObjects)
-add_subdirectory (Version)
-add_subdirectory (Utilities)
+add_subdirectory(Framework/Art)
+add_subdirectory(Framework/Core)
+add_subdirectory(Framework/EventProcessor)
+add_subdirectory(Framework/IO)
+#add_subdirectory(Framework/IO/Root)
+#add_subdirectory(Framework/Principal)
+add_subdirectory(Framework/Services/Optional)
+add_subdirectory(Framework/Services/Registry)
+add_subdirectory(Framework/Services/System)
+#add_subdirectory(Integration)
+add_subdirectory(Persistency/Provenance)
+add_subdirectory(Persistency/RootDB)
+add_subdirectory(TestObjects)
+add_subdirectory(Version)
+add_subdirectory(Utilities)
 add_subdirectory(tbb)
 add_subdirectory(Ntuple)
diff --git a/test/Framework/Art/CMakeLists.txt b/test/Framework/Art/CMakeLists.txt
index fc58b14..b114f1e 100644
--- a/test/Framework/Art/CMakeLists.txt
+++ b/test/Framework/Art/CMakeLists.txt
@@ -23,7 +23,7 @@ cet_test(artapp_t USE_BOOST_UNIT
   art_Framework_Art
   ${Boost_PROGRAM_OPTIONS_LIBRARY}
   DATAFILES
-  fcl/opt-empty.fcl
+  fcl/empty_config.fcl
 )
 
 ########################################################################
@@ -91,116 +91,12 @@ cet_test(BasicOutputOptions_01_w HANDBUILT
   TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
   DATAFILES fcl/opt-empty.fcl
   )
-config_test_pass(BasicOutputOptions_01_w)
-config_ref_test(BasicOutputOptions_01)
-
-# Detect ambiguity and exit with error.
-cet_test(BasicOutputOptions_02_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS --no-output -o f.root
-  -c opt-empty.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  PASS_REGULAR_EXPRESSION "\n  Output configuration is ambiguous: command-line specifies--output and --no-output simultaneously\\."
-  DATAFILES fcl/opt-empty.fcl
-)
-
-# Should pass -- NOP
-cet_test(BasicOutputOptions_03_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS --no-output
-  -c opt-empty.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  DATAFILES fcl/opt-empty.fcl
-)
-config_test_pass(BasicOutputOptions_03_w)
-config_ref_test(BasicOutputOptions_03)
-
-# Should pass -- NOP
-cet_test(BasicOutputOptions_04_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS -o /dev/null
-  -c opt-empty.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  DATAFILES fcl/opt-empty.fcl
-)
-config_test_pass(BasicOutputOptions_04_w)
-config_ref_test(BasicOutputOptions_04)
 
-# Should pass -- simple.
-cet_test(BasicOutputOptions_05_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS -o /dev/null
-  -c opt-simple-out.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  DATAFILES fcl/opt-simple-out.fcl
-)
-config_test_pass(BasicOutputOptions_05_w)
-config_ref_test(BasicOutputOptions_05)
-
-# Should pass -- simple.
-cet_test(BasicOutputOptions_06_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS --no-output
-  -c opt-simple-out.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  DATAFILES fcl/opt-simple-out.fcl
-)
-config_test_pass(BasicOutputOptions_06_w)
-config_ref_test(BasicOutputOptions_06)
-
-# Should pass -- multi-path.
-cet_test(BasicOutputOptions_07_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS -o /dev/null
-  -c opt-multipath-out.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  DATAFILES fcl/opt-multipath-out.fcl
-)
-config_test_pass(BasicOutputOptions_07_w)
-config_ref_test(BasicOutputOptions_07)
-
-# Should pass -- multi-path.
-cet_test(BasicOutputOptions_08_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS --no-output
-  -c opt-multipath-out.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  DATAFILES fcl/opt-multipath-out.fcl
-)
-config_test_pass(BasicOutputOptions_08_w)
-config_ref_test(BasicOutputOptions_08)
-
-# Should detect ambiguity -- multi-out.
-cet_test(BasicOutputOptions_09_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS -o /dev/null
-  -c opt-multiout.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  PASS_REGULAR_EXPRESSION "\n  Output configuration is ambiguous: configuration has multiple output modules\\. Cannot decide where to add specified output filename /dev/null\\."
-  DATAFILES fcl/opt-multiout.fcl
-)
+config_test_pass(BasicOutputOptions_01_w)
 
-# Should pass -- multi-out.
-cet_test(BasicOutputOptions_10_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS --no-output
-  -c opt-multiout.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  DATAFILES fcl/opt-multiout.fcl
-)
-config_test_pass(BasicOutputOptions_10_w)
-config_ref_test(BasicOutputOptions_10)
+# Compare output from BasicOutputOptions_01_w against reference.
+config_ref_test(BasicOutputOptions_01)
 
-# Should pass -- multi-out.
-cet_test(BasicOutputOptions_11_w HANDBUILT
-  TEST_EXEC art
-  TEST_ARGS --no-output
-  -c opt-no-end_paths-multiout.fcl
-  TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  DATAFILES fcl/opt-no-end_paths-multiout.fcl
-)
-config_test_pass(BasicOutputOptions_11_w)
-config_ref_test(BasicOutputOptions_11)
 
 ####################################
 # BasicSourceOptionsHandler.
@@ -210,10 +106,10 @@ config_ref_test(BasicOutputOptions_11)
 cet_test(BasicSourceOptions_01_w HANDBUILT
   TEST_EXEC art
   TEST_ARGS --estart 5 --nevts 4 --nskip 2
-  -c opt-empty.fcl
+  -c empty_config.fcl
   -s f0.txt
   TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
-  DATAFILES fcl/opt-empty.fcl
+  DATAFILES fcl/empty_config.fcl
   )
 
 config_test_pass(BasicSourceOptions_01_w)
@@ -234,13 +130,13 @@ cet_test(BasicSourceOptions_02 HANDBUILT
 cet_test(BasicSourceOptions_03 HANDBUILT
   TEST_EXEC art
   TEST_ARGS --estart 5 --nevts 4 --nskip 2
-  -c opt-empty.fcl
+  -c empty_config.fcl
   -s f0.txt
   -S BasicSourceOptions-srclist.txt
   TEST_PROPERTIES ENVIRONMENT ART_DEBUG_CONFIG=config.out
   PASS_REGULAR_EXPRESSION
   "--source-list \\(-S\\) and --source \\(-s\\) or non-option arguments are incompatible due to ordering ambiguities\\."
-  DATAFILES fcl/opt-empty.fcl
+  DATAFILES fcl/empty_config.fcl
   BasicSourceOptions-srclist.txt
   )
 
diff --git a/test/Framework/Core/CMakeLists.txt b/test/Framework/Core/CMakeLists.txt
index c0ba1c6..69f4d34 100644
--- a/test/Framework/Core/CMakeLists.txt
+++ b/test/Framework/Core/CMakeLists.txt
@@ -1,4 +1,5 @@
-art_dictionary(NO_INSTALL)
+# - There can be only one...
+art_add_dictionary()
 
 # Library link requirements for tests here
 set(default_test_libraries
@@ -18,8 +19,8 @@ set(default_test_libraries
 	${ROOT_CORE}
   ${ROOT_CINT}
 	${ROOT_REFLEX}
-  ${CPPUNIT}
-  -ldl
+  ${CPPUNIT_LIBRARY}
+  ${CMAKE_DL_LIBS}
  )
 
 #########################################################################
@@ -36,27 +37,28 @@ foreach (type Analyzer Filter Output Producer)
     PROPERTIES
     COMPILE_FLAGS "-Wno-unused-parameter -Wno-return-type"
     )
-  simple_plugin(PMTest${type} "module" NO_INSTALL)
+  art_add_module(PMTest${type}_module PMTest${type}_module.cc)
 endforeach()
 
 cet_test(PathManager_t USE_BOOST_UNIT
   LIBRARIES
   art_Framework_Core
-  ${FHICLCPP}
-  ${CETLIB}
+  FNALCore::FNALCore
   )
 
 #########################################################################
 # Old (pre-ART fork) tests.
+art_add_module(TestMod_module TestMod_module.cc)
+target_link_libraries(TestMod_module ${CPPUNIT_LIBRARY})
+
 
-simple_plugin(TestMod module NO_INSTALL ${CPPUNIT})
 
 # cppunit tests en masse.
 file(GLOB cppunit_files *.cppunit.cc)
 foreach(cppunit_source ${cppunit_files})
   get_filename_component(test_name ${cppunit_source} NAME_WE )
   cet_test(${test_name} SOURCES testRunner.cpp ${cppunit_source}
-    LIBRARIES ${default_test_libraries} ${CPPUNIT}
+    LIBRARIES ${default_test_libraries} ${CPPUNIT_LIBRARY}
     )
 endforeach()
 
diff --git a/test/Framework/EventProcessor/CMakeLists.txt b/test/Framework/EventProcessor/CMakeLists.txt
index 123bcbe..3e7851e 100644
--- a/test/Framework/EventProcessor/CMakeLists.txt
+++ b/test/Framework/EventProcessor/CMakeLists.txt
@@ -9,12 +9,12 @@ cet_test(Statemachine_t NO_AUTO
   art_Framework_Core
   )
 
-cet_script(Statemachine_t.sh NO_INSTALL)
+#cet_script(Statemachine_t.sh NO_INSTALL)
 
 # Shorthand to avoid writing almost the same thing three times.
 macro(statemachine_test i)
   cet_test(Statemachine_t_${i} HANDBUILT
-    TEST_EXEC Statemachine_t.sh
+    TEST_EXEC ${CMAKE_CURRENT_SOURCE_DIR}/Statemachine_t.sh
     DEPENDENCIES Statemachine_t
     DATAFILES
     unit_test_outputs/statemachine_${i}.txt
diff --git a/test/Framework/Services/Optional/CMakeLists.txt b/test/Framework/Services/Optional/CMakeLists.txt
index 1c5894e..f865641 100644
--- a/test/Framework/Services/Optional/CMakeLists.txt
+++ b/test/Framework/Services/Optional/CMakeLists.txt
@@ -1,9 +1,14 @@
-simple_plugin(MyService "service" NO_INSTALL)
+art_add_service(MyService_service
+  MyService.h
+  MyService_service.cc
+  )
 
-simple_plugin(MyServiceUsingIface "service" NO_INSTALL
-  art_Framework_Services_Optional_TrivialFileDelivery_service)
+art_add_service(MyServiceUsingIface_service MyServiceUsingIface_service.cc)
+target_link_libraries(MyServiceUsingIface_service
+  art_Framework_Services_Optional_TrivialFileDelivery_service
+  )
 
-simple_plugin(MyServiceUser "module" NO_INSTALL)
+art_add_module(MyServiceUser_module MyServiceUser_module.cc)
 
 cet_test(MyService_t HANDBUILT
   TEST_EXEC art
@@ -17,11 +22,15 @@ cet_test(MyServiceUsingIface_t HANDBUILT
   DATAFILES fcl/MyServiceUsingIface_t.fcl
   )
 
-simple_plugin(PSTest "service" NO_INSTALL)
-simple_plugin(PSTestAnalyzer "module" NO_INSTALL
-  test_Framework_Services_Optional_PSTest_service)
+art_add_service(PSTest_service PSTest_service.cc)
+art_add_module(PSTestAnalyzer_module PSTestAnalyzer_module.cc)
+target_link_libraries(PSTestAnalyzer_module PSTest_service)
 
-simple_plugin(PSTestInterfaceImpl "service" NO_INSTALL)
+
+art_add_service(PSTestInterfaceImpl_service
+  PSTestInterfaceImpl.h
+  PSTestInterfaceImpl_service.cc
+  )
 
 cet_test(PSTest_t HANDBUILT
   TEST_EXEC art
diff --git a/test/Framework/Services/Registry/CMakeLists.txt b/test/Framework/Services/Registry/CMakeLists.txt
index 2682c93..e18fee1 100644
--- a/test/Framework/Services/Registry/CMakeLists.txt
+++ b/test/Framework/Services/Registry/CMakeLists.txt
@@ -1,8 +1,2 @@
-include(CetTest)
-
-link_libraries(
-  -ldl
-)
-
-cet_test(GlobalSignal_t USE_BOOST_UNIT)
-cet_test(LocalSignal_t USE_BOOST_UNIT)
+cet_test(GlobalSignal_t USE_BOOST_UNIT LIBRARIES FNALCore::FNALCore)
+cet_test(LocalSignal_t USE_BOOST_UNIT LIBRARIES FNALCore::FNALCore)
diff --git a/test/Framework/Services/System/CMakeLists.txt b/test/Framework/Services/System/CMakeLists.txt
index a11c215..c1b3efe 100644
--- a/test/Framework/Services/System/CMakeLists.txt
+++ b/test/Framework/Services/System/CMakeLists.txt
@@ -3,5 +3,5 @@ cet_test(ScheduleContext_t
   art_Framework_Services_System_ScheduleContext_service
   art_Framework_Services_Registry
   art_Utilities
-  ${TBB}
+  ${TBB_LIBRARIES}
   )
diff --git a/test/Integration/CMakeLists.txt b/test/Integration/CMakeLists.txt
index 4e19d27..4972626 100644
--- a/test/Integration/CMakeLists.txt
+++ b/test/Integration/CMakeLists.txt
@@ -551,18 +551,6 @@ cet_test(ProductMix_r1f1 HANDBUILT
   TEST_PROPERTIES DEPENDS ProductMix_w
 )
 
-# Mix the events from ProductMix_w, testing that things behave properly
-# with the compactMissingProducts option selected.
-cet_test(ProductMix_r1g HANDBUILT
-  TEST_EXEC art_ut
-  TEST_ARGS --rethrow-all -c "ProductMix_r1g.fcl"
-  DATAFILES
-  fcl/ProductMix_r1.fcl
-  fcl/ProductMix_r1g.fcl
-  TEST_PROPERTIES DEPENDS ProductMix_w
-)
-
-
 SET_TESTS_PROPERTIES(
   ProductMix_r1c2
   ProductMix_r1c3
@@ -872,7 +860,7 @@ cet_test(SAM_metadata_verify_hr HANDBUILT
   TEST_ARGS -H -s ../SAM_metadata.d/out.root
   TEST_PROPERTIES DEPENDS SAM_metadata
   PASS_REGULAR_EXPRESSION
-  "^\nFile catalog metadata from file \\.\\./SAM_metadata\\.d/out\\.root:\n\n 1: applicationFamily   \"Ethel\"\n 2: applicationVersion  \"v0\\.00\\.01a\"\n 3: fileType            \"MC\"\n 4: run_type            \"MCChallenge\"\n 5: group               \"MyGang\"\n 6: process_name        \"SAMMetadataW\"\n 7: testMetadata        \"success!\"\n 8: dataTier            \"The one with the thickest frosting\"\n 9: streamName          \"o1\"\n10: file_format         \"artroot\"\n11: file_format_era     \"ART_2011a\"\n12: file_format_version 6\n13: start_time          \"${date_regex}\"\n14: end_time            \"${date_regex}\"\n15: runs                \\[ \\[ 1, 0, \"MCChallenge\" \\] \\]\n16: event_count         1\n17: first_event         \\[ 1, 0, 1 \\]\n18: last_event          \\[ 1, 0, 1 \\]\n-------------------------------\n$"
+  "^\nFile catalog metadata from file \\.\\./SAM_metadata\\.d/out\\.root:\n\n 1: applicationFamily   Ethel\n 2: applicationVersion  v0\\.00\\.01a\n 3: fileType            MC\n 4: run_type            MCChallenge\n 5: group               MyGang\n 6: process_name        SAMMetadataW\n 7: testMetadata        success!\n 8: dataTier            The one with the thickest frosting\n 9: streamName          o1\n10: file_format         artroot\n11: file_format_era     ART_2011a\n12: file_format_version 6\n13: start_time          ${date_regex}\n14: end_time            ${date_regex}\n15: runs                \\[ \\[ 1, 0, \"MCChallenge\" \\] \\]\n16: event_count         1\n17: first_event         \\[ 1, 0, 1 \\]\n18: last_event          \\[ 1, 0, 1 \\]\n-------------------------------\n$"
   )
 
 cet_test(SAM_metadata_verify_JSON HANDBUILT
@@ -1041,7 +1029,7 @@ cet_test(TestMetadata_verify_hr HANDBUILT
   TEST_ARGS -H -s ../TestMetadata_plugin_t.d/out.root
   TEST_PROPERTIES DEPENDS TestMetadata_plugin_t
   PASS_REGULAR_EXPRESSION
-  "^\nFile catalog metadata from file \\.\\./TestMetadata_plugin_t\\.d/out\\.root:\n\n 1: fileType            \"unknown\"\n 2: process_name        \"DEVEL\"\n 3: file_format         \"artroot\"\n 4: file_format_era     \"ART_2011a\"\n 5: file_format_version 6\n 6: start_time          \"${date_regex}\"\n 7: end_time            \"${date_regex}\"\n 8: event_count         1\n 9: first_event         \\[ 1, 0, 1 \\]\n10: last_event          \\[ 1, 0, 1 \\]\n11: key1                \"value1\"\n12: key2                \"value2\"\n-------------------------------\n$"
+  "^\nFile catalog metadata from file \\.\\./TestMetadata_plugin_t\\.d/out\\.root:\n\n 1: fileType            unknown\n 2: process_name        DEVEL\n 3: file_format         artroot\n 4: file_format_era     ART_2011a\n 5: file_format_version 6\n 6: start_time          ${date_regex}\n 7: end_time            ${date_regex}\n 8: event_count         1\n 9: first_event         \\[ 1, 0, 1 \\]\n10: last_event          \\[ 1, 0, 1 \\]\n11: key1                value1\n12: key2                value2\n-------------------------------\n$"
   )
 
 cet_test(TestMetadata_verify_JSON HANDBUILT
diff --git a/test/Ntuple/CMakeLists.txt b/test/Ntuple/CMakeLists.txt
index 720eb5a..a57b6a3 100644
--- a/test/Ntuple/CMakeLists.txt
+++ b/test/Ntuple/CMakeLists.txt
@@ -1,4 +1,4 @@
 
 cet_test(ntuple_t
-         LIBRARIES art_Ntuple ${SQLITE3}
+         LIBRARIES art_Ntuple ${SQLite3_LIBRARIES}
          )
diff --git a/test/Persistency/Provenance/CMakeLists.txt b/test/Persistency/Provenance/CMakeLists.txt
index a7dce0a..05fb5fa 100644
--- a/test/Persistency/Provenance/CMakeLists.txt
+++ b/test/Persistency/Provenance/CMakeLists.txt
@@ -1,5 +1,5 @@
 
-art_dictionary(NO_INSTALL)
+art_add_dictionary()
 
 set(standard_libraries
   art_Persistency_Provenance
@@ -10,7 +10,7 @@ set(standard_libraries
   ${ROOT_CORE}
   ${ROOT_CINT}
 	${ROOT_REFLEX}
-  -ldl
+  ${CMAKE_DL_LIBS}
   )
 
 cet_test(EventID_t USE_BOOST_UNIT
@@ -21,7 +21,7 @@ file(GLOB cppunit_files *.cppunit.cc)
 foreach(cppunit_source ${cppunit_files})
   get_filename_component(test_name ${cppunit_source} NAME_WE )
   cet_test(${test_name} SOURCES testRunner.cpp ${cppunit_source}
-    LIBRARIES ${CPPUNIT} ${standard_libraries}
+    LIBRARIES ${CPPUNIT_LIBRARY} ${standard_libraries}
     )
 endforeach()
 
@@ -34,7 +34,7 @@ cet_test(RootClassMapping_t USE_BOOST_UNIT
   LIBRARIES
   test_Persistency_Provenance_dict
   ${ROOT_CINTEX}
-  ${ROOT_TREE}
+  ${ROOT_Tree_LIBRARY}
   ${ROOT_NET}
   ${ROOT_MATHCORE}
   ${ROOT_RIO}
@@ -42,7 +42,7 @@ cet_test(RootClassMapping_t USE_BOOST_UNIT
   ${ROOT_CORE}
   ${ROOT_CINT}
 	${ROOT_REFLEX}
-  -ldl
+  ${CMAKE_DL_LIBS}
   # When ROOT is fixed WILL_FAIL should be removed and the code in ASSNS
   # (and associated ioread rules) should be fixed accordingly.
   TEST_PROPERTIES WILL_FAIL true
diff --git a/test/Persistency/RootDB/CMakeLists.txt b/test/Persistency/RootDB/CMakeLists.txt
index 49a33cf..de315fb 100644
--- a/test/Persistency/RootDB/CMakeLists.txt
+++ b/test/Persistency/RootDB/CMakeLists.txt
@@ -1,3 +1,5 @@
+include_directories(${SQLite3_INCLUDE_DIRS})
+
 set_source_files_properties(
   test3.cc
   tkeyvfs_noroot.cc
@@ -5,15 +7,16 @@ set_source_files_properties(
   COMPILE_DEFINITIONS TKEYVFS_NO_ROOT
   )
 
-cet_script(dbtest_wrap_sql NO_INSTALL)
+#cet_script(dbtest_wrap_sql NO_INSTALL)
+set(dbtest_wrap_sql "${CMAKE_CURRENT_SOURCE_DIR}/dbtest_wrap_sql")
 
 cet_test(tkeyvfs_t_01 NO_AUTO
   SOURCES test1.c myvfs.c
-  LIBRARIES ${SQLITE3} -ldl
+  LIBRARIES ${SQLite3_LIBRARY} ${CMAKE_DL_LIBS}
   )
 
 cet_test(tkeyvfs_t_01w HANDBUILT
-  TEST_EXEC dbtest_wrap_sql
+  TEST_EXEC ${dbtest_wrap_sql}
   TEST_ARGS -c test.db tkeyvfs_t.txt tkeyvfs_t_01 test.db
   DATAFILES tkeyvfs_t.txt
 )
@@ -36,7 +39,7 @@ cet_test(tkeyvfs_t_02 NO_AUTO
   )
 
 cet_test(tkeyvfs_t_02w HANDBUILT
-  TEST_EXEC dbtest_wrap_sql
+  TEST_EXEC ${dbtest_wrap_sql}
   TEST_ARGS -c test.db tkeyvfs_t.txt tkeyvfs_t_02 w test.db test_02
   DATAFILES tkeyvfs_t.txt
 )
@@ -55,11 +58,11 @@ endif()
 
 cet_test(tkeyvfs_t_03 NO_AUTO
   SOURCES test3.cc tkeyvfs_noroot.cc
-  LIBRARIES ${SQLITE3} -ldl
+  LIBRARIES ${SQLite3_LIBRARY} ${CMAKE_DL_LIBS}
   )
 
 cet_test(tkeyvfs_t_03w HANDBUILT
-  TEST_EXEC dbtest_wrap_sql
+  TEST_EXEC ${dbtest_wrap_sql}
   TEST_ARGS -c test.db tkeyvfs_t.txt tkeyvfs_t_03 w test.db test_03
   DATAFILES tkeyvfs_t.txt
 )
diff --git a/test/TestObjects/CMakeLists.txt b/test/TestObjects/CMakeLists.txt
index a1c3832..5706689 100644
--- a/test/TestObjects/CMakeLists.txt
+++ b/test/TestObjects/CMakeLists.txt
@@ -1,9 +1,11 @@
-art_make_library(SOURCE TH1Data.cc
-  LIBRARIES ${ROOT_HIST} ${ROOT_CORE} NO_INSTALL
+include_directories(${ROOT_INCLUDE_DIRS})
+add_library(test_TestObjects SHARED TH1Data.cc)
+target_link_libraries(test_TestObjects
+  ${ROOT_Hist_LIBRARY}
+  ${ROOT_Core_Library}
   )
 
-art_dictionary(DICTIONARY_LIBRARIES
+art_add_dictionary(DICTIONARY_LIBRARIES
   test_TestObjects
   art_Persistency_Common_dict
-  NO_INSTALL
   )
diff --git a/test/Utilities/CMakeLists.txt b/test/Utilities/CMakeLists.txt
index 1b31133..fcc0154 100644
--- a/test/Utilities/CMakeLists.txt
+++ b/test/Utilities/CMakeLists.txt
@@ -1,11 +1,10 @@
 # cet_test macro
-
-art_dictionary(NO_INSTALL)
+art_add_dictionary()
 
 set(default_test_libraries
   art_Utilities
   test_Utilities_dict
-  ${MF_MESSAGELOGGER}
+  FNALCore::FNALCore
   ${ROOT_CINT}
   ${ROOT_REFLEX}
   )
@@ -48,7 +47,9 @@ foreach(cppunit_test HRTime_t.cpp)
   get_filename_component(tname ${cppunit_test} NAME_WE )
   cet_test(${tname}
     SOURCES ${cppunit_test}
-    LIBRARIES ${default_test_libraries} ${CPPUNIT}
+    LIBRARIES ${default_test_libraries}
+    ${CPPUNIT_LIBRARY}
+    ${CMAKE_DL_LIBS}
     )
 endforeach()
 
diff --git a/test/tbb/CMakeLists.txt b/test/tbb/CMakeLists.txt
index 966b01f..6d86310 100644
--- a/test/tbb/CMakeLists.txt
+++ b/test/tbb/CMakeLists.txt
@@ -6,6 +6,6 @@ set(simple_tbb_tests
 
 foreach(tbb_test ${simple_tbb_tests})
   cet_test(${tbb_test}
-    LIBRARIES ${TBB}
+    LIBRARIES ${TBB_LIBRARIES}
     )
 endforeach()
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index 69985ed..c93f222 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -1,36 +1,39 @@
-cet_script(checkClassVersion)
+#cet_script(checkClassVersion)
+install(PROGRAMS checkClassVersion
+  DESTINATION ${CMAKE_INSTALL_BINDIR}
+  )
 
 # artmod is now in cetpkgsupport, but code generation is tested here.
-foreach(type Analyzer Producer Filter)
-  ADD_CUSTOM_COMMAND(OUTPUT ToolsTest${type}_module.cc
-    COMMAND artmod
-    ARGS -A ${type} arttest::ToolsTest${type}
-    COMMENT "Generating ToolsTest${type}_module.cc"
-    VERBATIM
-    )
+#foreach(type Analyzer Producer Filter)
+#  ADD_CUSTOM_COMMAND(OUTPUT ToolsTest${type}_module.cc
+#    COMMAND artmod
+#    ARGS -A ${type} arttest::ToolsTest${type}
+#    COMMENT "Generating ToolsTest${type}_module.cc"
+#    VERBATIM
+#    )
   # We knowingly generate code with unused parameters and missing
   # returns: user is supposed to fill those in when xe implements the module
   # methods.
-  SET_SOURCE_FILES_PROPERTIES(ToolsTest${type}_module.cc
-    PROPERTIES
-    COMPILE_FLAGS "-Wno-unused-parameter -Wno-return-type"
-    )
-  simple_plugin(ToolsTest${type} "module" NO_INSTALL)
-endforeach()
+  #  SET_SOURCE_FILES_PROPERTIES(ToolsTest${type}_module.cc
+  #  PROPERTIES
+  # COMPILE_FLAGS "-Wno-unused-parameter -Wno-return-type"
+  #  )
+  #simple_plugin(ToolsTest${type} "module" NO_INSTALL)
+  #endforeach()
 
-foreach(type FileCatalogMetadataPlugin EmptyEventTimestampPlugin)
-  ADD_CUSTOM_COMMAND(OUTPUT ToolsTest${type}_plugin.cc
-    COMMAND artmod
-    ARGS -A ${type} arttest::ToolsTest${type}
-    COMMENT "Generating ToolsTest${type}_plugin.cc"
-    VERBATIM
-    )
+  #foreach(type FileCatalogMetadataPlugin EmptyEventTimestampPlugin)
+  #  ADD_CUSTOM_COMMAND(OUTPUT ToolsTest${type}_plugin.cc
+  #    COMMAND artmod
+  #  ARGS -A ${type} arttest::ToolsTest${type}
+    #   COMMENT "Generating ToolsTest${type}_plugin.cc"
+    #   VERBATIM
+    #  )
   # We knowingly generate code with unused parameters and missing
   # returns: user is supposed to fill those in when xe implements the plugin
   # methods.
-  SET_SOURCE_FILES_PROPERTIES(ToolsTest${type}_plugin.cc
-    PROPERTIES
-    COMPILE_FLAGS "-Wno-unused-parameter -Wno-return-type"
-    )
-  simple_plugin(ToolsTest${type} "plugin" NO_INSTALL art_Framework_Core)
-endforeach()
+  # SET_SOURCE_FILES_PROPERTIES(ToolsTest${type}_plugin.cc
+  # PROPERTIES
+  #  COMPILE_FLAGS "-Wno-unused-parameter -Wno-return-type"
+  # )
+  #simple_plugin(ToolsTest${type} "plugin" NO_INSTALL art_Framework_Core)
+  #endforeach()
diff --git a/tools/checkClassVersion b/tools/checkClassVersion
index ee0b627..9953d78 100755
--- a/tools/checkClassVersion
+++ b/tools/checkClassVersion
@@ -134,9 +134,17 @@ def main():
                        help="instead of issuing errors, generate a new classes_def.xml file.")
     oparser.add_option("-G","--generate-in-place",dest="generate_in_place", action="store_true",default=False,
                        help="Update the classes_def.xml file in place.")
+    oparser.add_option("-L",metavar="PATH",
+                       dest="dynamic_path",
+                       action="append",
+                       help="Prepend PATH to dynamic loader path")
 
     (options,args)=oparser.parse_args()
 
+    if options.dynamic_path:
+      newDynamicPath = ":".join(options.dynamic_path) + ":" + ROOT.gSystem.GetDynamicPath()
+      ROOT.gSystem.SetDynamicPath(newDynamicPath)
+
     if options.library is None:
         if 0 != ROOT.gSystem.Load("libart_Framework_Core"):
             raise RuntimeError("failed to load libart_Framework_Core")
diff --git a/tools/relnotes b/tools/relnotes
index 8f790b3..bcc0004 100755
--- a/tools/relnotes
+++ b/tools/relnotes
@@ -47,15 +47,13 @@ my @all_suite_versions = suite_versions(for_package("art", "cd /cvs/projects/art
 if (lc $package eq "art") { # Want Art Suite release notes.
   my $suite_version = suite_version($vnum);
   my $dot_version = dot_version($vnum);
-  my $prod_version = prod_version($vnum);
   my $version_date = tag_date("art", $suite_version);
   print "h1. Art Suite Release Notes $dot_version ($version_date).\n\n";
-  print "* \"Download page\":https://scisoft.fnal.gov/scisoft/bundles/art/${prod_version}/art-${prod_version}.html.\n";
+  print "* \"Download page\":http://oink.fnal.gov/distro/art/art-${suite_version}.html.\n";
   my $prev = previous_version($dot_version, @all_suite_versions);
   if ($prev =~ /^\d/) {
     print "* Previous version's [[Release Notes $prev|release notes]].\n\n";
   }
-  print "h2. External package changes.\n\n\n"
   print "h2. Art ",
     vpage($dot_version),
       ".\n\n";
